
tft_SPI2_v9_wd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  08012790  08012790  00013790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801576c  0801576c  00017214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801576c  0801576c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015774  08015774  00017214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08015774  08015774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015780  08015780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08015784  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f74  20000214  08015998  00017214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007188  08015998  00018188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000341dc  00000000  00000000  00017244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008093  00000000  00000000  0004b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002210  00000000  00000000  000534b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a2e  00000000  00000000  000556c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e620  00000000  00000000  000570f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c6b  00000000  00000000  00085716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb191  00000000  00000000  000b7381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a2512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1c8  00000000  00000000  001a2558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001ac720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012778 	.word	0x08012778

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08012778 	.word	0x08012778

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9d3 	b.w	8001010 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b988 	b.w	8001010 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <BME280_Read8>:
#endif
}
#endif
#ifdef BME280
uint8_t BME280_Read8(uint8_t addr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <BME280_Read8+0x38>)
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	b29a      	uxth	r2, r3
 800102a:	230a      	movs	r3, #10
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	f107 030f 	add.w	r3, r7, #15
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	21ec      	movs	r1, #236	@ 0xec
 800103c:	f007 ff8e 	bl	8008f5c <HAL_I2C_Mem_Read>
	return tmp;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000230 	.word	0x20000230

08001050 <BME280_Read16>:
	return (tmp >> 8) | (tmp << 8);
}
#endif
#ifdef BME280
uint16_t BME280_Read16(uint8_t addr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <BME280_Read16+0x44>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	b29a      	uxth	r2, r3
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2302      	movs	r3, #2
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	21ec      	movs	r1, #236	@ 0xec
 8001074:	f007 ff72 	bl	8008f5c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	b21b      	sxth	r3, r3
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000230 	.word	0x20000230

08001098 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffd3 	bl	8001050 <BME280_Read16>
 80010aa:	4603      	mov	r3, r0
 80010ac:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29b      	uxth	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BME280_Write8>:
#endif
}
#endif
#ifdef BME280
void BME280_Write8(uint8_t address, uint8_t data)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <BME280_Write8+0x34>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	230a      	movs	r3, #10
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	21ec      	movs	r1, #236	@ 0xec
 80010f4:	f007 fe38 	bl	8008d68 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000230 	.word	0x20000230

08001104 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <BME280_Read24+0x40>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	b29a      	uxth	r2, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2303      	movs	r3, #3
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	21ec      	movs	r1, #236	@ 0xec
 8001128:	f007 ff18 	bl	8008f5c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	041a      	lsls	r2, r3, #16
 8001130:	7b7b      	ldrb	r3, [r7, #13]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	4313      	orrs	r3, r2
 8001136:	7bba      	ldrb	r2, [r7, #14]
 8001138:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000230 	.word	0x20000230

08001148 <BME280_IsReadingCalibration>:
	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
}
#endif
#ifdef BME280
uint8_t BME280_IsReadingCalibration(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 800114e:	20f3      	movs	r0, #243	@ 0xf3
 8001150:	f7ff ff60 	bl	8001014 <BME280_Read8>
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	b25a      	sxtb	r2, r3
 8001188:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	f003 031c 	and.w	r3, r3, #28
 8001194:	b25b      	sxtb	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f023 0303 	bic.w	r3, r3, #3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	20f5      	movs	r0, #245	@ 0xf5
 80011a6:	f7ff ff91 	bl	80010cc <BME280_Write8>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <BME280_Init>:

#if(BMP_I2C == 1)
void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	70fb      	strb	r3, [r7, #3]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70bb      	strb	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80011ce:	4a92      	ldr	r2, [pc, #584]	@ (8001418 <BME280_Init+0x264>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	uint8_t HumReg, i;

	if (mode > BME280_NORMALMODE)
 80011d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d902      	bls.n	80011e2 <BME280_Init+0x2e>
	    mode = BME280_NORMALMODE;
 80011dc:	2303      	movs	r3, #3
 80011de:	f887 3020 	strb.w	r3, [r7, #32]
	_mode = mode;
 80011e2:	4a8e      	ldr	r2, [pc, #568]	@ (800141c <BME280_Init+0x268>)
 80011e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e8:	7013      	strb	r3, [r2, #0]
	if(mode == BME280_FORCEDMODE)
 80011ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <BME280_Init+0x44>
		mode = BME280_SLEEPMODE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3020 	strb.w	r3, [r7, #32]

	if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d901      	bls.n	8001202 <BME280_Init+0x4e>
		temperature_resolution = BME280_TEMPERATURE_20BIT;
 80011fe:	2305      	movs	r3, #5
 8001200:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001202:	4a87      	ldr	r2, [pc, #540]	@ (8001420 <BME280_Init+0x26c>)
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d901      	bls.n	8001212 <BME280_Init+0x5e>
		pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 800120e:	2305      	movs	r3, #5
 8001210:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001212:	4a84      	ldr	r2, [pc, #528]	@ (8001424 <BME280_Init+0x270>)
 8001214:	78bb      	ldrb	r3, [r7, #2]
 8001216:	7013      	strb	r3, [r2, #0]

	if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d901      	bls.n	8001222 <BME280_Init+0x6e>
		huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 800121e:	2305      	movs	r3, #5
 8001220:	707b      	strb	r3, [r7, #1]
	_huminidity_oversampling = huminidity_oversampling;
 8001222:	4a81      	ldr	r2, [pc, #516]	@ (8001428 <BME280_Init+0x274>)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	7013      	strb	r3, [r2, #0]

	while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001228:	bf00      	nop
 800122a:	20d0      	movs	r0, #208	@ 0xd0
 800122c:	f7ff fef2 	bl	8001014 <BME280_Read8>
 8001230:	4603      	mov	r3, r0
 8001232:	2b60      	cmp	r3, #96	@ 0x60
 8001234:	d1f9      	bne.n	800122a <BME280_Init+0x76>

	BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001236:	21b6      	movs	r1, #182	@ 0xb6
 8001238:	20e0      	movs	r0, #224	@ 0xe0
 800123a:	f7ff ff47 	bl	80010cc <BME280_Write8>

	for(i = 0; i<30; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e006      	b.n	8001252 <BME280_Init+0x9e>
		Delay_us(1000); // Wait  300 msfor wake up
 8001244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001248:	f001 fc60 	bl	8002b0c <Delay_us>
	for(i = 0; i<30; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b1d      	cmp	r3, #29
 8001256:	d9f5      	bls.n	8001244 <BME280_Init+0x90>

	while(BME280_IsReadingCalibration())
 8001258:	e00c      	b.n	8001274 <BME280_Init+0xc0>
		for(i = 0; i<10; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e006      	b.n	800126e <BME280_Init+0xba>
			Delay_us(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001264:	f001 fc52 	bl	8002b0c <Delay_us>
		for(i = 0; i<10; i++)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3301      	adds	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d9f5      	bls.n	8001260 <BME280_Init+0xac>
	while(BME280_IsReadingCalibration())
 8001274:	f7ff ff68 	bl	8001148 <BME280_IsReadingCalibration>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1ed      	bne.n	800125a <BME280_Init+0xa6>

	/* read calibration data */
	t1 = BME280_Read16LE(BME280_DIG_T1);
 800127e:	2088      	movs	r0, #136	@ 0x88
 8001280:	f7ff ff0a 	bl	8001098 <BME280_Read16LE>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <BME280_Init+0x278>)
 800128a:	801a      	strh	r2, [r3, #0]
	t2 = BME280_Read16LE(BME280_DIG_T2);
 800128c:	208a      	movs	r0, #138	@ 0x8a
 800128e:	f7ff ff03 	bl	8001098 <BME280_Read16LE>
 8001292:	4603      	mov	r3, r0
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b66      	ldr	r3, [pc, #408]	@ (8001430 <BME280_Init+0x27c>)
 8001298:	801a      	strh	r2, [r3, #0]
	t3 = BME280_Read16LE(BME280_DIG_T3);
 800129a:	208c      	movs	r0, #140	@ 0x8c
 800129c:	f7ff fefc 	bl	8001098 <BME280_Read16LE>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <BME280_Init+0x280>)
 80012a6:	801a      	strh	r2, [r3, #0]

	p1 = BME280_Read16LE(BME280_DIG_P1);
 80012a8:	208e      	movs	r0, #142	@ 0x8e
 80012aa:	f7ff fef5 	bl	8001098 <BME280_Read16LE>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b61      	ldr	r3, [pc, #388]	@ (8001438 <BME280_Init+0x284>)
 80012b4:	801a      	strh	r2, [r3, #0]
	p2 = BME280_Read16LE(BME280_DIG_P2);
 80012b6:	2090      	movs	r0, #144	@ 0x90
 80012b8:	f7ff feee 	bl	8001098 <BME280_Read16LE>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <BME280_Init+0x288>)
 80012c2:	801a      	strh	r2, [r3, #0]
	p3 = BME280_Read16LE(BME280_DIG_P3);
 80012c4:	2092      	movs	r0, #146	@ 0x92
 80012c6:	f7ff fee7 	bl	8001098 <BME280_Read16LE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001440 <BME280_Init+0x28c>)
 80012d0:	801a      	strh	r2, [r3, #0]
	p4 = BME280_Read16LE(BME280_DIG_P4);
 80012d2:	2094      	movs	r0, #148	@ 0x94
 80012d4:	f7ff fee0 	bl	8001098 <BME280_Read16LE>
 80012d8:	4603      	mov	r3, r0
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <BME280_Init+0x290>)
 80012de:	801a      	strh	r2, [r3, #0]
	p5 = BME280_Read16LE(BME280_DIG_P5);
 80012e0:	2096      	movs	r0, #150	@ 0x96
 80012e2:	f7ff fed9 	bl	8001098 <BME280_Read16LE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b57      	ldr	r3, [pc, #348]	@ (8001448 <BME280_Init+0x294>)
 80012ec:	801a      	strh	r2, [r3, #0]
	p6 = BME280_Read16LE(BME280_DIG_P6);
 80012ee:	2098      	movs	r0, #152	@ 0x98
 80012f0:	f7ff fed2 	bl	8001098 <BME280_Read16LE>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b54      	ldr	r3, [pc, #336]	@ (800144c <BME280_Init+0x298>)
 80012fa:	801a      	strh	r2, [r3, #0]
	p7 = BME280_Read16LE(BME280_DIG_P7);
 80012fc:	209a      	movs	r0, #154	@ 0x9a
 80012fe:	f7ff fecb 	bl	8001098 <BME280_Read16LE>
 8001302:	4603      	mov	r3, r0
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <BME280_Init+0x29c>)
 8001308:	801a      	strh	r2, [r3, #0]
	p8 = BME280_Read16LE(BME280_DIG_P8);
 800130a:	209c      	movs	r0, #156	@ 0x9c
 800130c:	f7ff fec4 	bl	8001098 <BME280_Read16LE>
 8001310:	4603      	mov	r3, r0
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b4f      	ldr	r3, [pc, #316]	@ (8001454 <BME280_Init+0x2a0>)
 8001316:	801a      	strh	r2, [r3, #0]
	p9 = BME280_Read16LE(BME280_DIG_P9);
 8001318:	209e      	movs	r0, #158	@ 0x9e
 800131a:	f7ff febd 	bl	8001098 <BME280_Read16LE>
 800131e:	4603      	mov	r3, r0
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <BME280_Init+0x2a4>)
 8001324:	801a      	strh	r2, [r3, #0]

	h1 = BME280_Read8(BME280_DIG_H1);
 8001326:	20a1      	movs	r0, #161	@ 0xa1
 8001328:	f7ff fe74 	bl	8001014 <BME280_Read8>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <BME280_Init+0x2a8>)
 8001332:	701a      	strb	r2, [r3, #0]
	h2 = BME280_Read16LE(BME280_DIG_H2);
 8001334:	20e1      	movs	r0, #225	@ 0xe1
 8001336:	f7ff feaf 	bl	8001098 <BME280_Read16LE>
 800133a:	4603      	mov	r3, r0
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b48      	ldr	r3, [pc, #288]	@ (8001460 <BME280_Init+0x2ac>)
 8001340:	801a      	strh	r2, [r3, #0]
	h3 = BME280_Read8(BME280_DIG_H3);
 8001342:	20e3      	movs	r0, #227	@ 0xe3
 8001344:	f7ff fe66 	bl	8001014 <BME280_Read8>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <BME280_Init+0x2b0>)
 800134e:	701a      	strb	r2, [r3, #0]
	h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001350:	20e4      	movs	r0, #228	@ 0xe4
 8001352:	f7ff fe5f 	bl	8001014 <BME280_Read8>
 8001356:	4603      	mov	r3, r0
 8001358:	b21b      	sxth	r3, r3
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	b21c      	sxth	r4, r3
 800135e:	20e5      	movs	r0, #229	@ 0xe5
 8001360:	f7ff fe58 	bl	8001014 <BME280_Read8>
 8001364:	4603      	mov	r3, r0
 8001366:	b21b      	sxth	r3, r3
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	b21b      	sxth	r3, r3
 800136e:	4323      	orrs	r3, r4
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <BME280_Init+0x2b4>)
 8001374:	801a      	strh	r2, [r3, #0]
	h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001376:	20e6      	movs	r0, #230	@ 0xe6
 8001378:	f7ff fe4c 	bl	8001014 <BME280_Read8>
 800137c:	4603      	mov	r3, r0
 800137e:	b21b      	sxth	r3, r3
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	b21c      	sxth	r4, r3
 8001384:	20e5      	movs	r0, #229	@ 0xe5
 8001386:	f7ff fe45 	bl	8001014 <BME280_Read8>
 800138a:	4603      	mov	r3, r0
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	b2db      	uxtb	r3, r3
 8001390:	b21b      	sxth	r3, r3
 8001392:	4323      	orrs	r3, r4
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b35      	ldr	r3, [pc, #212]	@ (800146c <BME280_Init+0x2b8>)
 8001398:	801a      	strh	r2, [r3, #0]
	h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 800139a:	20e7      	movs	r0, #231	@ 0xe7
 800139c:	f7ff fe3a 	bl	8001014 <BME280_Read8>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <BME280_Init+0x2bc>)
 80013a6:	701a      	strb	r2, [r3, #0]

	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 80013a8:	20f2      	movs	r0, #242	@ 0xf2
 80013aa:	f7ff fe33 	bl	8001014 <BME280_Read8>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73bb      	strb	r3, [r7, #14]
	HumReg &= 0xF8;
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	f023 0307 	bic.w	r3, r3, #7
 80013b8:	73bb      	strb	r3, [r7, #14]
	HumReg |= _huminidity_oversampling;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <BME280_Init+0x274>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	73bb      	strb	r3, [r7, #14]
	BME280_Write8(BME280_HUM_CONTROL, HumReg);
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	4619      	mov	r1, r3
 80013c8:	20f2      	movs	r0, #242	@ 0xf2
 80013ca:	f7ff fe7f 	bl	80010cc <BME280_Write8>
	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 80013ce:	20f2      	movs	r0, #242	@ 0xf2
 80013d0:	f7ff fe20 	bl	8001014 <BME280_Read8>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73bb      	strb	r3, [r7, #14]
	BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013dc:	015b      	lsls	r3, r3, #5
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	20f4      	movs	r0, #244	@ 0xf4
 80013fa:	f7ff fe67 	bl	80010cc <BME280_Write8>

	if(mode == BME280_NORMALMODE)
 80013fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d103      	bne.n	800140e <BME280_Init+0x25a>
	{
		BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 8001406:	2100      	movs	r1, #0
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff feb1 	bl	8001170 <BME280_SetConfig>
	}
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000230 	.word	0x20000230
 800141c:	20000237 	.word	0x20000237
 8001420:	20000234 	.word	0x20000234
 8001424:	20000235 	.word	0x20000235
 8001428:	20000236 	.word	0x20000236
 800142c:	20000256 	.word	0x20000256
 8001430:	2000023c 	.word	0x2000023c
 8001434:	2000023e 	.word	0x2000023e
 8001438:	20000258 	.word	0x20000258
 800143c:	20000240 	.word	0x20000240
 8001440:	20000242 	.word	0x20000242
 8001444:	20000244 	.word	0x20000244
 8001448:	20000246 	.word	0x20000246
 800144c:	20000248 	.word	0x20000248
 8001450:	2000024a 	.word	0x2000024a
 8001454:	2000024c 	.word	0x2000024c
 8001458:	2000024e 	.word	0x2000024e
 800145c:	20000238 	.word	0x20000238
 8001460:	20000250 	.word	0x20000250
 8001464:	20000239 	.word	0x20000239
 8001468:	20000252 	.word	0x20000252
 800146c:	20000254 	.word	0x20000254
 8001470:	2000023a 	.word	0x2000023a

08001474 <BME280_ReadTemperature>:
  return -99;
}
#endif
#ifdef BME280
float BME280_ReadTemperature(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <BME280_ReadTemperature+0x104>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d12b      	bne.n	80014da <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8001482:	20f4      	movs	r0, #244	@ 0xf4
 8001484:	f7ff fdc6 	bl	8001014 <BME280_Read8>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	4619      	mov	r1, r3
 80014a0:	20f4      	movs	r0, #244	@ 0xf4
 80014a2:	f7ff fe13 	bl	80010cc <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 80014a6:	20f4      	movs	r0, #244	@ 0xf4
 80014a8:	f7ff fdb4 	bl	8001014 <BME280_Read8>
 80014ac:	4603      	mov	r3, r0
 80014ae:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 80014b8:	7dbb      	ldrb	r3, [r7, #22]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10d      	bne.n	80014da <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 80014be:	20f4      	movs	r0, #244	@ 0xf4
 80014c0:	f7ff fda8 	bl	8001014 <BME280_Read8>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d000      	beq.n	80014d8 <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 80014d6:	e7f2      	b.n	80014be <BME280_ReadTemperature+0x4a>
				  break;
 80014d8:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 80014da:	20fa      	movs	r0, #250	@ 0xfa
 80014dc:	f7ff fe12 	bl	8001104 <BME280_Read24>
 80014e0:	4603      	mov	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80014ea:	d102      	bne.n	80014f2 <BME280_ReadTemperature+0x7e>
	  return -99;
 80014ec:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800157c <BME280_ReadTemperature+0x108>
 80014f0:	e03b      	b.n	800156a <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	111b      	asrs	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	10da      	asrs	r2, r3, #3
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <BME280_ReadTemperature+0x10c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8001504:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <BME280_ReadTemperature+0x110>)
 8001506:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	12db      	asrs	r3, r3, #11
 8001510:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	111b      	asrs	r3, r3, #4
 8001516:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <BME280_ReadTemperature+0x10c>)
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	1112      	asrs	r2, r2, #4
 8001520:	4917      	ldr	r1, [pc, #92]	@ (8001580 <BME280_ReadTemperature+0x10c>)
 8001522:	8809      	ldrh	r1, [r1, #0]
 8001524:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001526:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800152a:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 800152c:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <BME280_ReadTemperature+0x114>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001532:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001536:	139b      	asrs	r3, r3, #14
 8001538:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4413      	add	r3, r2
 8001540:	4a12      	ldr	r2, [pc, #72]	@ (800158c <BME280_ReadTemperature+0x118>)
 8001542:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <BME280_ReadTemperature+0x118>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3380      	adds	r3, #128	@ 0x80
 8001550:	121b      	asrs	r3, r3, #8
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001590 <BME280_ReadTemperature+0x11c>
 8001566:	ee87 7aa6 	vdiv.f32	s14, s15, s13

}
 800156a:	eef0 7a47 	vmov.f32	s15, s14
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000237 	.word	0x20000237
 800157c:	c2c60000 	.word	0xc2c60000
 8001580:	20000256 	.word	0x20000256
 8001584:	2000023c 	.word	0x2000023c
 8001588:	2000023e 	.word	0x2000023e
 800158c:	2000025c 	.word	0x2000025c
 8001590:	42c80000 	.word	0x42c80000

08001594 <BME280_ReadPressure>:
	  return (int32_t)p/256;
}
#endif
#ifdef BME280
int32_t BME280_ReadPressure(void)
{
 8001594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001598:	b0ca      	sub	sp, #296	@ 0x128
 800159a:	af00      	add	r7, sp, #0
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	BME280_ReadTemperature();
 800159c:	f7ff ff6a 	bl	8001474 <BME280_ReadTemperature>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 80015a0:	20f7      	movs	r0, #247	@ 0xf7
 80015a2:	f7ff fdaf 	bl	8001104 <BME280_Read24>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	adc_P >>= 4;
 80015ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015b0:	111b      	asrs	r3, r3, #4
 80015b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	var1 = ((int64_t)t_fine) - 128000;
 80015b6:	4baf      	ldr	r3, [pc, #700]	@ (8001874 <BME280_ReadPressure+0x2e0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	17da      	asrs	r2, r3, #31
 80015bc:	4698      	mov	r8, r3
 80015be:	4691      	mov	r9, r2
 80015c0:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 80015c4:	f149 3bff 	adc.w	fp, r9, #4294967295
 80015c8:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
	var2 = var1 * var1 * (int64_t)p6;
 80015cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80015d4:	fb03 f102 	mul.w	r1, r3, r2
 80015d8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	18ca      	adds	r2, r1, r3
 80015e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80015ea:	fba3 4503 	umull	r4, r5, r3, r3
 80015ee:	1953      	adds	r3, r2, r5
 80015f0:	461d      	mov	r5, r3
 80015f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001878 <BME280_ReadPressure+0x2e4>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	17da      	asrs	r2, r3, #31
 80015fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001600:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001604:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001608:	4603      	mov	r3, r0
 800160a:	fb03 f205 	mul.w	r2, r3, r5
 800160e:	460b      	mov	r3, r1
 8001610:	fb04 f303 	mul.w	r3, r4, r3
 8001614:	4413      	add	r3, r2
 8001616:	4602      	mov	r2, r0
 8001618:	fba4 1202 	umull	r1, r2, r4, r2
 800161c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001620:	460a      	mov	r2, r1
 8001622:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800162a:	4413      	add	r3, r2
 800162c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001630:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001634:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001638:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 800163c:	4b8f      	ldr	r3, [pc, #572]	@ (800187c <BME280_ReadPressure+0x2e8>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	b21b      	sxth	r3, r3
 8001644:	17da      	asrs	r2, r3, #31
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800164a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800164e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001652:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001656:	462a      	mov	r2, r5
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001660:	4621      	mov	r1, r4
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	441a      	add	r2, r3
 8001668:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800166c:	4621      	mov	r1, r4
 800166e:	fba3 1301 	umull	r1, r3, r3, r1
 8001672:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001676:	460b      	mov	r3, r1
 8001678:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800167c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001692:	462b      	mov	r3, r5
 8001694:	0459      	lsls	r1, r3, #17
 8001696:	4623      	mov	r3, r4
 8001698:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800169c:	4623      	mov	r3, r4
 800169e:	0458      	lsls	r0, r3, #17
 80016a0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016a4:	1814      	adds	r4, r2, r0
 80016a6:	643c      	str	r4, [r7, #64]	@ 0x40
 80016a8:	414b      	adcs	r3, r1
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80016b0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	var2 = var2 + (((int64_t)p4)<<35);
 80016b4:	4b72      	ldr	r3, [pc, #456]	@ (8001880 <BME280_ReadPressure+0x2ec>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016c2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016d2:	00d9      	lsls	r1, r3, #3
 80016d4:	2000      	movs	r0, #0
 80016d6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016da:	1814      	adds	r4, r2, r0
 80016dc:	63bc      	str	r4, [r7, #56]	@ 0x38
 80016de:	414b      	adcs	r3, r1
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80016e6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80016ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016f2:	fb03 f102 	mul.w	r1, r3, r2
 80016f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80016fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	18ca      	adds	r2, r1, r3
 8001704:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001708:	fba3 1303 	umull	r1, r3, r3, r3
 800170c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001710:	460b      	mov	r3, r1
 8001712:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001720:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <BME280_ReadPressure+0x2f0>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	b21b      	sxth	r3, r3
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800172e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001732:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001736:	462b      	mov	r3, r5
 8001738:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800173c:	4642      	mov	r2, r8
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	464b      	mov	r3, r9
 8001744:	4621      	mov	r1, r4
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 1201 	umull	r1, r2, r2, r1
 8001754:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001758:	460a      	mov	r2, r1
 800175a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800175e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001762:	4413      	add	r3, r2
 8001764:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8001782:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <BME280_ReadPressure+0x2f4>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b21b      	sxth	r3, r3
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001790:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001794:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001798:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800179c:	464a      	mov	r2, r9
 800179e:	fb02 f203 	mul.w	r2, r2, r3
 80017a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017a6:	4644      	mov	r4, r8
 80017a8:	fb04 f303 	mul.w	r3, r4, r3
 80017ac:	441a      	add	r2, r3
 80017ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017b2:	4644      	mov	r4, r8
 80017b4:	fba3 4304 	umull	r4, r3, r3, r4
 80017b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017bc:	4623      	mov	r3, r4
 80017be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80017c6:	18d3      	adds	r3, r2, r3
 80017c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017d8:	464c      	mov	r4, r9
 80017da:	0323      	lsls	r3, r4, #12
 80017dc:	4644      	mov	r4, r8
 80017de:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017e2:	4644      	mov	r4, r8
 80017e4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80017e6:	1884      	adds	r4, r0, r2
 80017e8:	633c      	str	r4, [r7, #48]	@ 0x30
 80017ea:	eb41 0303 	adc.w	r3, r1, r3
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80017f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80017fc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001800:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001804:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <BME280_ReadPressure+0x2f8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	2200      	movs	r2, #0
 8001810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001818:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800181c:	462b      	mov	r3, r5
 800181e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001822:	4642      	mov	r2, r8
 8001824:	fb02 f203 	mul.w	r2, r2, r3
 8001828:	464b      	mov	r3, r9
 800182a:	4621      	mov	r1, r4
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	4622      	mov	r2, r4
 8001834:	4641      	mov	r1, r8
 8001836:	fba2 1201 	umull	r1, r2, r2, r1
 800183a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800183e:	460a      	mov	r2, r1
 8001840:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001844:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001848:	4413      	add	r3, r2
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800185a:	4629      	mov	r1, r5
 800185c:	104a      	asrs	r2, r1, #1
 800185e:	4629      	mov	r1, r5
 8001860:	17cb      	asrs	r3, r1, #31
 8001862:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	if (var1 == 0) {
 8001866:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800186a:	4313      	orrs	r3, r2
 800186c:	d110      	bne.n	8001890 <BME280_ReadPressure+0x2fc>
		return 0;  // avoid exception caused by division by zero
 800186e:	2300      	movs	r3, #0
 8001870:	e158      	b.n	8001b24 <BME280_ReadPressure+0x590>
 8001872:	bf00      	nop
 8001874:	2000025c 	.word	0x2000025c
 8001878:	20000248 	.word	0x20000248
 800187c:	20000246 	.word	0x20000246
 8001880:	20000244 	.word	0x20000244
 8001884:	20000242 	.word	0x20000242
 8001888:	20000240 	.word	0x20000240
 800188c:	20000258 	.word	0x20000258
	}
	p = 1048576 - adc_P;
 8001890:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001894:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001898:	17da      	asrs	r2, r3, #31
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800189c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800189e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80018a2:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	p = (((p<<31) - var2)*3125) / var1;
 80018a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80018aa:	105b      	asrs	r3, r3, #1
 80018ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80018b4:	07db      	lsls	r3, r3, #31
 80018b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018be:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80018c2:	4621      	mov	r1, r4
 80018c4:	1a89      	subs	r1, r1, r2
 80018c6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80018c8:	4629      	mov	r1, r5
 80018ca:	eb61 0303 	sbc.w	r3, r1, r3
 80018ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018d0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018d4:	4622      	mov	r2, r4
 80018d6:	462b      	mov	r3, r5
 80018d8:	1891      	adds	r1, r2, r2
 80018da:	6239      	str	r1, [r7, #32]
 80018dc:	415b      	adcs	r3, r3
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018e4:	4621      	mov	r1, r4
 80018e6:	1851      	adds	r1, r2, r1
 80018e8:	61b9      	str	r1, [r7, #24]
 80018ea:	4629      	mov	r1, r5
 80018ec:	414b      	adcs	r3, r1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018fc:	4649      	mov	r1, r9
 80018fe:	018b      	lsls	r3, r1, #6
 8001900:	4641      	mov	r1, r8
 8001902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001906:	4641      	mov	r1, r8
 8001908:	018a      	lsls	r2, r1, #6
 800190a:	4641      	mov	r1, r8
 800190c:	1889      	adds	r1, r1, r2
 800190e:	6139      	str	r1, [r7, #16]
 8001910:	4649      	mov	r1, r9
 8001912:	eb43 0101 	adc.w	r1, r3, r1
 8001916:	6179      	str	r1, [r7, #20]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001924:	4649      	mov	r1, r9
 8001926:	008b      	lsls	r3, r1, #2
 8001928:	4641      	mov	r1, r8
 800192a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800192e:	4641      	mov	r1, r8
 8001930:	008a      	lsls	r2, r1, #2
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	4603      	mov	r3, r0
 8001938:	4622      	mov	r2, r4
 800193a:	189b      	adds	r3, r3, r2
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	460b      	mov	r3, r1
 8001940:	462a      	mov	r2, r5
 8001942:	eb42 0303 	adc.w	r3, r2, r3
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001954:	4649      	mov	r1, r9
 8001956:	008b      	lsls	r3, r1, #2
 8001958:	4641      	mov	r1, r8
 800195a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800195e:	4641      	mov	r1, r8
 8001960:	008a      	lsls	r2, r1, #2
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	4603      	mov	r3, r0
 8001968:	4622      	mov	r2, r4
 800196a:	189b      	adds	r3, r3, r2
 800196c:	673b      	str	r3, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	460a      	mov	r2, r1
 8001972:	eb42 0303 	adc.w	r3, r2, r3
 8001976:	677b      	str	r3, [r7, #116]	@ 0x74
 8001978:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800197c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001980:	f7ff f962 	bl	8000c48 <__aeabi_ldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800198c:	4b68      	ldr	r3, [pc, #416]	@ (8001b30 <BME280_ReadPressure+0x59c>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	b21b      	sxth	r3, r3
 8001994:	17da      	asrs	r2, r3, #31
 8001996:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001998:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800199a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800199e:	f04f 0000 	mov.w	r0, #0
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	0b50      	lsrs	r0, r2, #13
 80019a8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019ac:	1359      	asrs	r1, r3, #13
 80019ae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80019b2:	462b      	mov	r3, r5
 80019b4:	fb00 f203 	mul.w	r2, r0, r3
 80019b8:	4623      	mov	r3, r4
 80019ba:	fb03 f301 	mul.w	r3, r3, r1
 80019be:	4413      	add	r3, r2
 80019c0:	4622      	mov	r2, r4
 80019c2:	fba2 1200 	umull	r1, r2, r2, r0
 80019c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019ca:	460a      	mov	r2, r1
 80019cc:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d4:	4413      	add	r3, r2
 80019d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019da:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0b50      	lsrs	r0, r2, #13
 80019e8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019ec:	1359      	asrs	r1, r3, #13
 80019ee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019f2:	462b      	mov	r3, r5
 80019f4:	fb00 f203 	mul.w	r2, r0, r3
 80019f8:	4623      	mov	r3, r4
 80019fa:	fb03 f301 	mul.w	r3, r3, r1
 80019fe:	4413      	add	r3, r2
 8001a00:	4622      	mov	r2, r4
 8001a02:	fba2 1200 	umull	r1, r2, r2, r0
 8001a06:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a14:	4413      	add	r3, r2
 8001a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a26:	4621      	mov	r1, r4
 8001a28:	0e4a      	lsrs	r2, r1, #25
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a30:	4629      	mov	r1, r5
 8001a32:	164b      	asrs	r3, r1, #25
 8001a34:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var2 = (((int64_t)p8) * p) >> 19;
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <BME280_ReadPressure+0x5a0>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	17da      	asrs	r2, r3, #31
 8001a42:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a44:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a4e:	462a      	mov	r2, r5
 8001a50:	fb02 f203 	mul.w	r2, r2, r3
 8001a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001a64:	4621      	mov	r1, r4
 8001a66:	fba2 1201 	umull	r1, r2, r2, r1
 8001a6a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001a6e:	460a      	mov	r2, r1
 8001a70:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a74:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a78:	4413      	add	r3, r2
 8001a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	0cca      	lsrs	r2, r1, #19
 8001a8e:	4629      	mov	r1, r5
 8001a90:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a94:	4629      	mov	r1, r5
 8001a96:	14cb      	asrs	r3, r1, #19
 8001a98:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a9c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001aa0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001aa4:	1884      	adds	r4, r0, r2
 8001aa6:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001aa8:	eb41 0303 	adc.w	r3, r1, r3
 8001aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001aae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ab2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	1889      	adds	r1, r1, r2
 8001aba:	6539      	str	r1, [r7, #80]	@ 0x50
 8001abc:	4629      	mov	r1, r5
 8001abe:	eb43 0101 	adc.w	r1, r3, r1
 8001ac2:	6579      	str	r1, [r7, #84]	@ 0x54
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	0a18      	lsrs	r0, r3, #8
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ada:	462b      	mov	r3, r5
 8001adc:	1219      	asrs	r1, r3, #8
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <BME280_ReadPressure+0x5a4>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	17da      	asrs	r2, r3, #31
 8001ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001af8:	464c      	mov	r4, r9
 8001afa:	0123      	lsls	r3, r4, #4
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b02:	4644      	mov	r4, r8
 8001b04:	0122      	lsls	r2, r4, #4
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	603c      	str	r4, [r7, #0]
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b14:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
	return (int32_t)p/256;
 8001b18:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <BME280_ReadPressure+0x58e>
 8001b20:	33ff      	adds	r3, #255	@ 0xff
 8001b22:	121b      	asrs	r3, r3, #8
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b30:	2000024e 	.word	0x2000024e
 8001b34:	2000024c 	.word	0x2000024c
 8001b38:	2000024a 	.word	0x2000024a

08001b3c <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  return altitude;
}
#endif
#ifdef BME280
uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b0d2      	sub	sp, #328	@ 0x148
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001b48:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001b4c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8001b50:	f7ff fc90 	bl	8001474 <BME280_ReadTemperature>
 8001b54:	eef0 7a40 	vmov.f32	s15, s0
 8001b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b5c:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 8001b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001e38 <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 8001b6c:	eef4 7a47 	vcmp.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d101      	bne.n	8001b7a <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 8001b76:	23ff      	movs	r3, #255	@ 0xff
 8001b78:	e33f      	b.n	80021fa <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8001b7a:	20f7      	movs	r0, #247	@ 0xf7
 8001b7c:	f7ff fac2 	bl	8001104 <BME280_Read24>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	adc_P >>= 4;
 8001b86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b8a:	111b      	asrs	r3, r3, #4
 8001b8c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

	var1 = ((int64_t)t_fine) - 128000;
 8001b90:	4baa      	ldr	r3, [pc, #680]	@ (8001e3c <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	17da      	asrs	r2, r3, #31
 8001b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001b9a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001baa:	4613      	mov	r3, r2
 8001bac:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bb6:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	var2 = var1 * var1 * (int64_t)p6;
 8001bba:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bc2:	fb03 f102 	mul.w	r1, r3, r2
 8001bc6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001bca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	18ca      	adds	r2, r1, r3
 8001bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bd8:	fba3 4503 	umull	r4, r5, r3, r3
 8001bdc:	1953      	adds	r3, r2, r5
 8001bde:	461d      	mov	r5, r3
 8001be0:	4b97      	ldr	r3, [pc, #604]	@ (8001e40 <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	17da      	asrs	r2, r3, #31
 8001bea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001bee:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001bf2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	fb03 f205 	mul.w	r2, r3, r5
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	fb04 f303 	mul.w	r3, r4, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	4602      	mov	r2, r0
 8001c06:	fba4 8902 	umull	r8, r9, r4, r2
 8001c0a:	444b      	add	r3, r9
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
 8001c12:	e9c7 894c 	strd	r8, r9, [r7, #304]	@ 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001c16:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	17da      	asrs	r2, r3, #31
 8001c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001c28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c2c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001c30:	462a      	mov	r2, r5
 8001c32:	fb02 f203 	mul.w	r2, r2, r3
 8001c36:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	441a      	add	r2, r3
 8001c42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c46:	4621      	mov	r1, r4
 8001c48:	fba3 ab01 	umull	sl, fp, r3, r1
 8001c4c:	eb02 030b 	add.w	r3, r2, fp
 8001c50:	469b      	mov	fp, r3
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001c5e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001c62:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001c66:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001c6a:	1814      	adds	r4, r2, r0
 8001c6c:	643c      	str	r4, [r7, #64]	@ 0x40
 8001c6e:	414b      	adcs	r3, r1
 8001c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c72:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001c76:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 8001c7a:	4b73      	ldr	r3, [pc, #460]	@ (8001e48 <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	17da      	asrs	r2, r3, #31
 8001c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c88:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c98:	00d9      	lsls	r1, r3, #3
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001ca0:	1814      	adds	r4, r2, r0
 8001ca2:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001ca4:	414b      	adcs	r3, r1
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ca8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001cac:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001cb0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001cb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001cb8:	fb03 f102 	mul.w	r1, r3, r2
 8001cbc:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001cc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	18ca      	adds	r2, r1, r3
 8001cca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001cce:	fba3 1303 	umull	r1, r3, r3, r3
 8001cd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ce6:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	17da      	asrs	r2, r3, #31
 8001cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001cf8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001d02:	4642      	mov	r2, r8
 8001d04:	fb02 f203 	mul.w	r2, r2, r3
 8001d08:	464b      	mov	r3, r9
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	4622      	mov	r2, r4
 8001d14:	4641      	mov	r1, r8
 8001d16:	fba2 1201 	umull	r1, r2, r2, r1
 8001d1a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001d1e:	460a      	mov	r2, r1
 8001d20:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001d24:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001d28:	4413      	add	r3, r2
 8001d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	0a18      	lsrs	r0, r3, #8
 8001d3e:	462b      	mov	r3, r5
 8001d40:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d44:	462b      	mov	r3, r5
 8001d46:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8001d48:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	17da      	asrs	r2, r3, #31
 8001d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001d5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001d62:	464a      	mov	r2, r9
 8001d64:	fb02 f203 	mul.w	r2, r2, r3
 8001d68:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d6c:	4644      	mov	r4, r8
 8001d6e:	fb04 f303 	mul.w	r3, r4, r3
 8001d72:	441a      	add	r2, r3
 8001d74:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d78:	4644      	mov	r4, r8
 8001d7a:	fba3 4304 	umull	r4, r3, r3, r4
 8001d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001d82:	4623      	mov	r3, r4
 8001d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d8c:	18d3      	adds	r3, r2, r3
 8001d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001d9e:	464c      	mov	r4, r9
 8001da0:	0323      	lsls	r3, r4, #12
 8001da2:	4644      	mov	r4, r8
 8001da4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001da8:	4644      	mov	r4, r8
 8001daa:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001dac:	1884      	adds	r4, r0, r2
 8001dae:	633c      	str	r4, [r7, #48]	@ 0x30
 8001db0:	eb41 0303 	adc.w	r3, r1, r3
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001dba:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001dbe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001dc2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001dc6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001dca:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001dce:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001dde:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001de2:	462b      	mov	r3, r5
 8001de4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001de8:	4642      	mov	r2, r8
 8001dea:	fb02 f203 	mul.w	r2, r2, r3
 8001dee:	464b      	mov	r3, r9
 8001df0:	4621      	mov	r1, r4
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	4622      	mov	r2, r4
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	fba2 1201 	umull	r1, r2, r2, r1
 8001e00:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e04:	460a      	mov	r2, r1
 8001e06:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001e0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001e0e:	4413      	add	r3, r2
 8001e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e20:	4629      	mov	r1, r5
 8001e22:	104a      	asrs	r2, r1, #1
 8001e24:	4629      	mov	r1, r5
 8001e26:	17cb      	asrs	r3, r1, #31
 8001e28:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138

	if (var1 == 0) {
 8001e2c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001e30:	4313      	orrs	r3, r2
 8001e32:	d111      	bne.n	8001e58 <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 8001e34:	2300      	movs	r3, #0
 8001e36:	e1e0      	b.n	80021fa <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 8001e38:	c2c60000 	.word	0xc2c60000
 8001e3c:	2000025c 	.word	0x2000025c
 8001e40:	20000248 	.word	0x20000248
 8001e44:	20000246 	.word	0x20000246
 8001e48:	20000244 	.word	0x20000244
 8001e4c:	20000242 	.word	0x20000242
 8001e50:	20000240 	.word	0x20000240
 8001e54:	20000258 	.word	0x20000258
	}
	p = 1048576 - adc_P;
 8001e58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e5c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001e60:	17da      	asrs	r2, r3, #31
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e66:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001e6a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	p = (((p<<31) - var2)*3125) / var1;
 8001e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e72:	105b      	asrs	r3, r3, #1
 8001e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e7c:	07db      	lsls	r3, r3, #31
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e82:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001e86:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	1a89      	subs	r1, r1, r2
 8001e8e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001e92:	4629      	mov	r1, r5
 8001e94:	eb61 0303 	sbc.w	r3, r1, r3
 8001e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e9c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	1891      	adds	r1, r2, r2
 8001ea6:	6239      	str	r1, [r7, #32]
 8001ea8:	415b      	adcs	r3, r3
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	1851      	adds	r1, r2, r1
 8001eb4:	61b9      	str	r1, [r7, #24]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	414b      	adcs	r3, r1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ec8:	4649      	mov	r1, r9
 8001eca:	018b      	lsls	r3, r1, #6
 8001ecc:	4641      	mov	r1, r8
 8001ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed2:	4641      	mov	r1, r8
 8001ed4:	018a      	lsls	r2, r1, #6
 8001ed6:	4641      	mov	r1, r8
 8001ed8:	1889      	adds	r1, r1, r2
 8001eda:	6139      	str	r1, [r7, #16]
 8001edc:	4649      	mov	r1, r9
 8001ede:	eb43 0101 	adc.w	r1, r3, r1
 8001ee2:	6179      	str	r1, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	008b      	lsls	r3, r1, #2
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001efa:	4641      	mov	r1, r8
 8001efc:	008a      	lsls	r2, r1, #2
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	4622      	mov	r2, r4
 8001f06:	189b      	adds	r3, r3, r2
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	eb42 0303 	adc.w	r3, r2, r3
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f20:	4649      	mov	r1, r9
 8001f22:	008b      	lsls	r3, r1, #2
 8001f24:	4641      	mov	r1, r8
 8001f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	008a      	lsls	r2, r1, #2
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	4622      	mov	r2, r4
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	eb42 0303 	adc.w	r3, r2, r3
 8001f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f44:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001f48:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001f4c:	f7fe fe7c 	bl	8000c48 <__aeabi_ldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001f58:	4bab      	ldr	r3, [pc, #684]	@ (8002208 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	17da      	asrs	r2, r3, #31
 8001f62:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f64:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f66:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0b50      	lsrs	r0, r2, #13
 8001f74:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f78:	1359      	asrs	r1, r3, #13
 8001f7a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001f7e:	462b      	mov	r3, r5
 8001f80:	fb00 f203 	mul.w	r2, r0, r3
 8001f84:	4623      	mov	r3, r4
 8001f86:	fb03 f301 	mul.w	r3, r3, r1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	fba2 1200 	umull	r1, r2, r2, r0
 8001f92:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001f96:	460a      	mov	r2, r1
 8001f98:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001f9c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fa6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0b50      	lsrs	r0, r2, #13
 8001fb4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fb8:	1359      	asrs	r1, r3, #13
 8001fba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001fbe:	462b      	mov	r3, r5
 8001fc0:	fb00 f203 	mul.w	r2, r0, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	fb03 f301 	mul.w	r3, r3, r1
 8001fca:	4413      	add	r3, r2
 8001fcc:	4622      	mov	r2, r4
 8001fce:	fba2 1200 	umull	r1, r2, r2, r0
 8001fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	0e4a      	lsrs	r2, r1, #25
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	164b      	asrs	r3, r1, #25
 8002000:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 8002004:	4b81      	ldr	r3, [pc, #516]	@ (800220c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 8002006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200a:	b21b      	sxth	r3, r3
 800200c:	17da      	asrs	r2, r3, #31
 800200e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002010:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002016:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800201a:	462a      	mov	r2, r5
 800201c:	fb02 f203 	mul.w	r2, r2, r3
 8002020:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002024:	4621      	mov	r1, r4
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002030:	4621      	mov	r1, r4
 8002032:	fba2 1201 	umull	r1, r2, r2, r1
 8002036:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800203a:	460a      	mov	r2, r1
 800203c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002040:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002044:	4413      	add	r3, r2
 8002046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002056:	4621      	mov	r1, r4
 8002058:	0cca      	lsrs	r2, r1, #19
 800205a:	4629      	mov	r1, r5
 800205c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002060:	4629      	mov	r1, r5
 8002062:	14cb      	asrs	r3, r1, #19
 8002064:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002068:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800206c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002070:	1884      	adds	r4, r0, r2
 8002072:	663c      	str	r4, [r7, #96]	@ 0x60
 8002074:	eb41 0303 	adc.w	r3, r1, r3
 8002078:	667b      	str	r3, [r7, #100]	@ 0x64
 800207a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800207e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002082:	4621      	mov	r1, r4
 8002084:	1889      	adds	r1, r1, r2
 8002086:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002088:	4629      	mov	r1, r5
 800208a:	eb43 0101 	adc.w	r1, r3, r1
 800208e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800209c:	4623      	mov	r3, r4
 800209e:	0a18      	lsrs	r0, r3, #8
 80020a0:	462b      	mov	r3, r5
 80020a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020a6:	462b      	mov	r3, r5
 80020a8:	1219      	asrs	r1, r3, #8
 80020aa:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	17da      	asrs	r2, r3, #31
 80020b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80020b6:	657a      	str	r2, [r7, #84]	@ 0x54
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020c4:	464c      	mov	r4, r9
 80020c6:	0123      	lsls	r3, r4, #4
 80020c8:	4644      	mov	r4, r8
 80020ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020ce:	4644      	mov	r4, r8
 80020d0:	0122      	lsls	r2, r4, #4
 80020d2:	1884      	adds	r4, r0, r2
 80020d4:	603c      	str	r4, [r7, #0]
 80020d6:	eb41 0303 	adc.w	r3, r1, r3
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80020e0:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	*pressure = (int32_t)p/256;
 80020e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da00      	bge.n	80020ee <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 80020ec:	33ff      	adds	r3, #255	@ 0xff
 80020ee:	121b      	asrs	r3, r3, #8
 80020f0:	461a      	mov	r2, r3
 80020f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020f6:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80020f8:	20fd      	movs	r0, #253	@ 0xfd
 80020fa:	f7fe ffa9 	bl	8001050 <BME280_Read16>
 80020fe:	4603      	mov	r3, r0
 8002100:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 8002104:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800210c:	d101      	bne.n	8002112 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 800210e:	23ff      	movs	r3, #255	@ 0xff
 8002110:	e073      	b.n	80021fa <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 8002112:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800211a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800211e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002122:	039a      	lsls	r2, r3, #14
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 8002126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212a:	051b      	lsls	r3, r3, #20
 800212c:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 8002130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002134:	4619      	mov	r1, r3
 8002136:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800213a:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800213e:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8002140:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002144:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8002146:	4a36      	ldr	r2, [pc, #216]	@ (8002220 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 8002148:	f992 2000 	ldrsb.w	r2, [r2]
 800214c:	4611      	mov	r1, r2
 800214e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002152:	fb01 f202 	mul.w	r2, r1, r2
 8002156:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002158:	4932      	ldr	r1, [pc, #200]	@ (8002224 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 800215a:	7809      	ldrb	r1, [r1, #0]
 800215c:	4608      	mov	r0, r1
 800215e:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8002162:	fb00 f101 	mul.w	r1, r0, r1
 8002166:	12c9      	asrs	r1, r1, #11
 8002168:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 800216c:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002170:	1292      	asrs	r2, r2, #10
 8002172:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 8002176:	492c      	ldr	r1, [pc, #176]	@ (8002228 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 8002178:	f9b1 1000 	ldrsh.w	r1, [r1]
 800217c:	fb01 f202 	mul.w	r2, r1, r2
 8002180:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002184:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800218e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002192:	13db      	asrs	r3, r3, #15
 8002194:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002198:	13d2      	asrs	r2, r2, #15
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 80021a0:	4a22      	ldr	r2, [pc, #136]	@ (800222c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 80021a2:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 80021a8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80021aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80021b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80021c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021c4:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80021c8:	bfa8      	it	ge
 80021ca:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80021ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	float h = (v_x1_u32r>>12);
 80021d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021d6:	131b      	asrs	r3, r3, #12
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e0:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
	*huminidity = h / 1024.0;
 80021e4:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80021e8:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002230 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 80021ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021f4:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop
 8002208:	2000024e 	.word	0x2000024e
 800220c:	2000024c 	.word	0x2000024c
 8002210:	2000024a 	.word	0x2000024a
 8002214:	2000025c 	.word	0x2000025c
 8002218:	20000252 	.word	0x20000252
 800221c:	20000254 	.word	0x20000254
 8002220:	2000023a 	.word	0x2000023a
 8002224:	20000239 	.word	0x20000239
 8002228:	20000250 	.word	0x20000250
 800222c:	20000238 	.word	0x20000238
 8002230:	44800000 	.word	0x44800000

08002234 <BME280_GetSeaLevelPressure>:

	  return altitude;
}

uint32_t BME280_GetSeaLevelPressure(float altitude_meters)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	ed2d 8b02 	vpush	{d8}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t pressure_pa = BME280_ReadPressure();  // w Pa
 8002242:	f7ff f9a7 	bl	8001594 <BME280_ReadPressure>
 8002246:	60f8      	str	r0, [r7, #12]

    // Wzór redukcji do poziomu morza
    float sea_level_pressure = pressure_pa / powf(1.0f - (altitude_meters / 44330.0f), 5.255f);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002252:	ed97 7a01 	vldr	s14, [r7, #4]
 8002256:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80022ac <BME280_GetSeaLevelPressure+0x78>
 800225a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800225e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002266:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80022b0 <BME280_GetSeaLevelPressure+0x7c>
 800226a:	eeb0 0a67 	vmov.f32	s0, s15
 800226e:	f00c ff29 	bl	800f0c4 <powf>
 8002272:	eeb0 7a40 	vmov.f32	s14, s0
 8002276:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800227a:	edc7 7a02 	vstr	s15, [r7, #8]
    return round(sea_level_pressure);  // w hPa
 800227e:	68b8      	ldr	r0, [r7, #8]
 8002280:	f7fe f992 	bl	80005a8 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	ec43 2b10 	vmov	d0, r2, r3
 800228c:	f00c ff7c 	bl	800f188 <round>
 8002290:	ec53 2b10 	vmov	r2, r3, d0
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fcb6 	bl	8000c08 <__aeabi_d2uiz>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	ecbd 8b02 	vpop	{d8}
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	472d2a00 	.word	0x472d2a00
 80022b0:	40a828f6 	.word	0x40a828f6

080022b4 <_ZN13ButtonHandlerC1EP12GPIO_TypeDeftP19tskTaskControlBlock>:


#include "ButtonHandler.h"
#include <cstring>

ButtonHandler::ButtonHandler(GPIO_TypeDef* port, uint16_t pin, TaskHandle_t listener)
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	80fb      	strh	r3, [r7, #6]
    : _port(port), _pin(pin), _listener(listener), _taskHandle(nullptr), _lastHandled(0){}
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	809a      	strh	r2, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZN13ButtonHandler5startEv>:

void ButtonHandler::start() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
    xTaskCreate(taskEntry, "ButtonTask", 256, this, 2, &_taskHandle);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	330c      	adds	r3, #12
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002308:	4903      	ldr	r1, [pc, #12]	@ (8002318 <_ZN13ButtonHandler5startEv+0x28>)
 800230a:	4804      	ldr	r0, [pc, #16]	@ (800231c <_ZN13ButtonHandler5startEv+0x2c>)
 800230c:	f00a ff78 	bl	800d200 <xTaskCreate>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	08012790 	.word	0x08012790
 800231c:	08002321 	.word	0x08002321

08002320 <_ZN13ButtonHandler9taskEntryEPv>:

void ButtonHandler::taskEntry(void* param) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    static_cast<ButtonHandler*>(param)->taskLoop();
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f829 	bl	8002380 <_ZN13ButtonHandler8taskLoopEv>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <_ZN13ButtonHandler11onInterruptEv>:

void ButtonHandler::onInterrupt() {
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    if (_taskHandle) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <_ZN13ButtonHandler11onInterruptEv+0x3a>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(_taskHandle, &xHigherPriorityTaskWoken);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f107 020c 	add.w	r2, r7, #12
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f00c f92e 	bl	800e5b8 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <_ZN13ButtonHandler11onInterruptEv+0x3a>
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <_ZN13ButtonHandler11onInterruptEv+0x44>)
 8002364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	f3bf 8f6f 	isb	sy
    }
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000ed04 	.word	0xe000ed04

08002380 <_ZN13ButtonHandler8taskLoopEv>:

void ButtonHandler::taskLoop() {
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
    for (;;) {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	2001      	movs	r0, #1
 800238e:	f00b ffa5 	bl	800e2dc <ulTaskNotifyTake>

        if (xTaskGetTickCount() - _lastHandled < pdMS_TO_TICKS(150)) {
 8002392:	f00b fa5d 	bl	800d850 <xTaskGetTickCount>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b95      	cmp	r3, #149	@ 0x95
 80023a0:	bf94      	ite	ls
 80023a2:	2301      	movls	r3, #1
 80023a4:	2300      	movhi	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d153      	bne.n	8002454 <_ZN13ButtonHandler8taskLoopEv+0xd4>
            continue;
        }


        uint8_t releasedCount = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]

        TickType_t pressStart = xTaskGetTickCount();
 80023b0:	f00b fa4e 	bl	800d850 <xTaskGetTickCount>
 80023b4:	60f8      	str	r0, [r7, #12]
        TickType_t duration = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
        while (releasedCount < 5 && duration < pdMS_TO_TICKS(1000)) {
 80023ba:	e01e      	b.n	80023fa <_ZN13ButtonHandler8taskLoopEv+0x7a>
            if (HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_SET) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	889b      	ldrh	r3, [r3, #4]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f006 fb26 	bl	8008a18 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <_ZN13ButtonHandler8taskLoopEv+0x64>
                ++releasedCount;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	3301      	adds	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
 80023e2:	e001      	b.n	80023e8 <_ZN13ButtonHandler8taskLoopEv+0x68>
            } else {
                releasedCount = 0; // reset jeśli znów wciśnięty
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
            }

            vTaskDelay(pdMS_TO_TICKS(5));
 80023e8:	2005      	movs	r0, #5
 80023ea:	f00b f8e5 	bl	800d5b8 <vTaskDelay>
            duration = xTaskGetTickCount() - pressStart;
 80023ee:	f00b fa2f 	bl	800d850 <xTaskGetTickCount>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	613b      	str	r3, [r7, #16]
        while (releasedCount < 5 && duration < pdMS_TO_TICKS(1000)) {
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d803      	bhi.n	8002408 <_ZN13ButtonHandler8taskLoopEv+0x88>
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002406:	d3d9      	bcc.n	80023bc <_ZN13ButtonHandler8taskLoopEv+0x3c>
        }

        uartPrint("Duration: %d, count : %d", duration, releasedCount);
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	461a      	mov	r2, r3
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	4812      	ldr	r0, [pc, #72]	@ (8002458 <_ZN13ButtonHandler8taskLoopEv+0xd8>)
 8002410:	f003 f820 	bl	8005454 <uartPrint>

       ButtonEvent event;
       if(duration >= pdMS_TO_TICKS(1000)){
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800241a:	d309      	bcc.n	8002430 <_ZN13ButtonHandler8taskLoopEv+0xb0>
    	   event = ButtonEvent::LONG_PRESS;
 800241c:	2301      	movs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
           xTaskNotify(_listener, static_cast<uint32_t>(event), eSetValueWithOverwrite);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6898      	ldr	r0, [r3, #8]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	2300      	movs	r3, #0
 8002428:	2203      	movs	r2, #3
 800242a:	f00c f803 	bl	800e434 <xTaskGenericNotify>
 800242e:	e00b      	b.n	8002448 <_ZN13ButtonHandler8taskLoopEv+0xc8>
       }else if(duration >= pdMS_TO_TICKS(50)){
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b31      	cmp	r3, #49	@ 0x31
 8002434:	d908      	bls.n	8002448 <_ZN13ButtonHandler8taskLoopEv+0xc8>
    	   event = ButtonEvent::SHORT_PRESS;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
           xTaskNotify(_listener, static_cast<uint32_t>(event), eSetValueWithOverwrite);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6898      	ldr	r0, [r3, #8]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	2300      	movs	r3, #0
 8002442:	2203      	movs	r2, #3
 8002444:	f00b fff6 	bl	800e434 <xTaskGenericNotify>
       }

       _lastHandled = xTaskGetTickCount();
 8002448:	f00b fa02 	bl	800d850 <xTaskGetTickCount>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e799      	b.n	8002388 <_ZN13ButtonHandler8taskLoopEv+0x8>
            continue;
 8002454:	bf00      	nop

        //vTaskDelay(pdMS_TO_TICKS(200)); // antydrgania po puszczeniu
    }
 8002456:	e797      	b.n	8002388 <_ZN13ButtonHandler8taskLoopEv+0x8>
 8002458:	0801279c 	.word	0x0801279c

0800245c <_Z12SaveColorIdxh>:
static uint8_t mode = 0;
static uint16_t waitTime = 5000;


void SaveColorIdx(uint8_t idx)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b094      	sub	sp, #80	@ 0x50
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
    HAL_FLASH_Unlock();
 8002466:	f005 feaf 	bl	80081c8 <HAL_FLASH_Unlock>
    uint16_t status = EE_WriteVariable(VirtAddVarTab[0], idx);
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <_Z12SaveColorIdxh+0x88>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	b292      	uxth	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fdd7 	bl	8003028 <EE_WriteVariable>
 800247a:	4603      	mov	r3, r0
 800247c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (status == 1) {
 8002480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002484:	2b01      	cmp	r3, #1
 8002486:	d111      	bne.n	80024ac <_Z12SaveColorIdxh+0x50>
        // Powtórz zapis raz jeszcze
        HAL_UART_Transmit(&huart2, (uint8_t*)"Retrying EE_WriteVariable...\n", 30, HAL_MAX_DELAY);
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	221e      	movs	r2, #30
 800248e:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <_Z12SaveColorIdxh+0x8c>)
 8002490:	4816      	ldr	r0, [pc, #88]	@ (80024ec <_Z12SaveColorIdxh+0x90>)
 8002492:	f009 fad5 	bl	800ba40 <HAL_UART_Transmit>
        status = EE_WriteVariable(VirtAddVarTab[0], idx);
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <_Z12SaveColorIdxh+0x88>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	b292      	uxth	r2, r2
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fdc1 	bl	8003028 <EE_WriteVariable>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    }

    char msg[64];
    sprintf(msg, "EE_WriteVariable status: %u (data: %u)\n", status, idx);
 80024ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f107 000c 	add.w	r0, r7, #12
 80024b6:	490e      	ldr	r1, [pc, #56]	@ (80024f0 <_Z12SaveColorIdxh+0x94>)
 80024b8:	f00e f836 	bl	8010528 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ff05 	bl	80002d0 <strlen>
 80024c6:	4603      	mov	r3, r0
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f107 010c 	add.w	r1, r7, #12
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	4806      	ldr	r0, [pc, #24]	@ (80024ec <_Z12SaveColorIdxh+0x90>)
 80024d4:	f009 fab4 	bl	800ba40 <HAL_UART_Transmit>

    HAL_FLASH_Lock();
 80024d8:	f005 fe98 	bl	800820c <HAL_FLASH_Lock>
}
 80024dc:	bf00      	nop
 80024de:	3750      	adds	r7, #80	@ 0x50
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000020 	.word	0x20000020
 80024e8:	080127b8 	.word	0x080127b8
 80024ec:	20000fa8 	.word	0x20000fa8
 80024f0:	080127d8 	.word	0x080127d8

080024f4 <_Z12ReadColorIdxv>:


uint8_t ReadColorIdx()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
    uint16_t val;
    if (EE_ReadVariable(VirtAddVarTab[0], &val) == HAL_OK)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <_Z12ReadColorIdxv+0x34>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	1dba      	adds	r2, r7, #6
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fd46 	bl	8002f94 <EE_ReadVariable>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <_Z12ReadColorIdxv+0x2a>
        return (uint8_t)val;
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e000      	b.n	8002520 <_Z12ReadColorIdxv+0x2c>
    return 0;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000020 	.word	0x20000020

0800252c <_Z8lcd_initPKh>:

void lcd_init(const uint8_t* logo){
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b095      	sub	sp, #84	@ 0x54
 8002530:	af02      	add	r7, sp, #8
 8002532:	6078      	str	r0, [r7, #4]
    uartPrint("Start GC9A01A_TestTask\n");
 8002534:	4827      	ldr	r0, [pc, #156]	@ (80025d4 <_Z8lcd_initPKh+0xa8>)
 8002536:	f002 ff8d 	bl	8005454 <uartPrint>
    WatchdogManager::instance().registerTask("DisplayTask", xTaskGetCurrentTaskHandle(), 15);
 800253a:	f004 ffd1 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 800253e:	4604      	mov	r4, r0
 8002540:	f00b fcfc 	bl	800df3c <xTaskGetCurrentTaskHandle>
 8002544:	4602      	mov	r2, r0
 8002546:	230f      	movs	r3, #15
 8002548:	4923      	ldr	r1, [pc, #140]	@ (80025d8 <_Z8lcd_initPKh+0xac>)
 800254a:	4620      	mov	r0, r4
 800254c:	f004 fff0 	bl	8007530 <_ZN15WatchdogManager12registerTaskEPKcP19tskTaskControlBlockm>
    tft.init();
 8002550:	4822      	ldr	r0, [pc, #136]	@ (80025dc <_Z8lcd_initPKh+0xb0>)
 8002552:	f001 ffb7 	bl	80044c4 <_ZN7GC9A01A4initEv>
    //tft.drawBitmapDMA(logo);
    tft.drawBitmap1bit(logo, tft.getHeight(), tft.getWidth(), LOGO_COLOR0, LOGO_COLOR1);
 8002556:	4821      	ldr	r0, [pc, #132]	@ (80025dc <_Z8lcd_initPKh+0xb0>)
 8002558:	f002 fb3a 	bl	8004bd0 <_ZNK7GC9A01A9getHeightEv>
 800255c:	4603      	mov	r3, r0
 800255e:	b29c      	uxth	r4, r3
 8002560:	481e      	ldr	r0, [pc, #120]	@ (80025dc <_Z8lcd_initPKh+0xb0>)
 8002562:	f002 fb2a 	bl	8004bba <_ZNK7GC9A01A8getWidthEv>
 8002566:	4603      	mov	r3, r0
 8002568:	b29b      	uxth	r3, r3
 800256a:	f24f 729e 	movw	r2, #63390	@ 0xf79e
 800256e:	9201      	str	r2, [sp, #4]
 8002570:	f640 0243 	movw	r2, #2115	@ 0x843
 8002574:	9200      	str	r2, [sp, #0]
 8002576:	4622      	mov	r2, r4
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4818      	ldr	r0, [pc, #96]	@ (80025dc <_Z8lcd_initPKh+0xb0>)
 800257c:	f002 fb34 	bl	8004be8 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt>
    vTaskDelay(pdMS_TO_TICKS(5000));
 8002580:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002584:	f00b f818 	bl	800d5b8 <vTaskDelay>
    colorIdx = ReadColorIdx();
 8002588:	f7ff ffb4 	bl	80024f4 <_Z12ReadColorIdxv>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <_Z8lcd_initPKh+0xb4>)
 8002592:	701a      	strb	r2, [r3, #0]
    lastSavedColorIdx = colorIdx;
 8002594:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <_Z8lcd_initPKh+0xb4>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <_Z8lcd_initPKh+0xb8>)
 800259a:	701a      	strb	r2, [r3, #0]
    char msg[64];
    sprintf(msg, "Reading from VA=0x%04X\n", VirtAddVarTab[0]);
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <_Z8lcd_initPKh+0xbc>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	4911      	ldr	r1, [pc, #68]	@ (80025ec <_Z8lcd_initPKh+0xc0>)
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00d ffbd 	bl	8010528 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fe8c 	bl	80002d0 <strlen>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 0108 	add.w	r1, r7, #8
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <_Z8lcd_initPKh+0xc4>)
 80025c6:	f009 fa3b 	bl	800ba40 <HAL_UART_Transmit>
}
 80025ca:	bf00      	nop
 80025cc:	374c      	adds	r7, #76	@ 0x4c
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08012800 	.word	0x08012800
 80025d8:	08012818 	.word	0x08012818
 80025dc:	20000260 	.word	0x20000260
 80025e0:	200002ea 	.word	0x200002ea
 80025e4:	200002eb 	.word	0x200002eb
 80025e8:	20000020 	.word	0x20000020
 80025ec:	08012824 	.word	0x08012824
 80025f0:	20000fa8 	.word	0x20000fa8

080025f4 <_Z21updateDisplayIfNeededb>:
void updateDisplayIfNeeded(bool force) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af06      	add	r7, sp, #24
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
    uint8_t result = xQueuePeek(weatherQueue, &currData, 0);
 80025fe:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <_Z21updateDisplayIfNeededb+0x194>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	4961      	ldr	r1, [pc, #388]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002606:	4618      	mov	r0, r3
 8002608:	f00a fb8e 	bl	800cd28 <xQueuePeek>
 800260c:	4603      	mov	r3, r0
 800260e:	73fb      	strb	r3, [r7, #15]

    if ((fabsf(currData.temperature - prevData.temperature) > 0.1f && result) || force) {
 8002610:	4b5e      	ldr	r3, [pc, #376]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	4b5e      	ldr	r3, [pc, #376]	@ (8002790 <_Z21updateDisplayIfNeededb+0x19c>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	eef0 7ae7 	vabs.f32	s15, s15
 8002624:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002794 <_Z21updateDisplayIfNeededb+0x1a0>
 8002628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	dd02      	ble.n	8002638 <_Z21updateDisplayIfNeededb+0x44>
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <_Z21updateDisplayIfNeededb+0x4a>
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <_Z21updateDisplayIfNeededb+0x8c>
        sprintf(temp_disp, "T:%.1f~C", currData.temperature);
 800263e:	4b53      	ldr	r3, [pc, #332]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffb0 	bl	80005a8 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4952      	ldr	r1, [pc, #328]	@ (8002798 <_Z21updateDisplayIfNeededb+0x1a4>)
 800264e:	4853      	ldr	r0, [pc, #332]	@ (800279c <_Z21updateDisplayIfNeededb+0x1a8>)
 8002650:	f00d ff6a 	bl	8010528 <siprintf>
        tft.drawTextGenFast(5, start, temp_disp, GC9A01A_BLACK, colors[colorIdx], curr_font, scale, 1);
 8002654:	4b52      	ldr	r3, [pc, #328]	@ (80027a0 <_Z21updateDisplayIfNeededb+0x1ac>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b52      	ldr	r3, [pc, #328]	@ (80027a4 <_Z21updateDisplayIfNeededb+0x1b0>)
 800265c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002660:	4a51      	ldr	r2, [pc, #324]	@ (80027a8 <_Z21updateDisplayIfNeededb+0x1b4>)
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	9104      	str	r1, [sp, #16]
 8002668:	2102      	movs	r1, #2
 800266a:	9103      	str	r1, [sp, #12]
 800266c:	9202      	str	r2, [sp, #8]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4b49      	ldr	r3, [pc, #292]	@ (800279c <_Z21updateDisplayIfNeededb+0x1a8>)
 8002676:	2232      	movs	r2, #50	@ 0x32
 8002678:	2105      	movs	r1, #5
 800267a:	484c      	ldr	r0, [pc, #304]	@ (80027ac <_Z21updateDisplayIfNeededb+0x1b8>)
 800267c:	f002 f98c 	bl	8004998 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh>
    }
    if ((fabsf(currData.pres - prevData.pres) > 0.1f && result) || force) {
 8002680:	4b42      	ldr	r3, [pc, #264]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <_Z21updateDisplayIfNeededb+0x19c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002692:	eef0 7ae7 	vabs.f32	s15, s15
 8002696:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002794 <_Z21updateDisplayIfNeededb+0x1a0>
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd02      	ble.n	80026aa <_Z21updateDisplayIfNeededb+0xb6>
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <_Z21updateDisplayIfNeededb+0xbc>
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <_Z21updateDisplayIfNeededb+0xfe>
        sprintf(press_disp, "P:%ldhPa", currData.pres);
 80026b0:	4b36      	ldr	r3, [pc, #216]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	461a      	mov	r2, r3
 80026b6:	493e      	ldr	r1, [pc, #248]	@ (80027b0 <_Z21updateDisplayIfNeededb+0x1bc>)
 80026b8:	483e      	ldr	r0, [pc, #248]	@ (80027b4 <_Z21updateDisplayIfNeededb+0x1c0>)
 80026ba:	f00d ff35 	bl	8010528 <siprintf>
        tft.drawTextGenFast(5, start + space_before_next, press_disp, GC9A01A_BLACK, colors[colorIdx], curr_font, scale, 1);
 80026be:	4b3e      	ldr	r3, [pc, #248]	@ (80027b8 <_Z21updateDisplayIfNeededb+0x1c4>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	3332      	adds	r3, #50	@ 0x32
 80026c4:	b299      	uxth	r1, r3
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <_Z21updateDisplayIfNeededb+0x1ac>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b35      	ldr	r3, [pc, #212]	@ (80027a4 <_Z21updateDisplayIfNeededb+0x1b0>)
 80026ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026d2:	4a35      	ldr	r2, [pc, #212]	@ (80027a8 <_Z21updateDisplayIfNeededb+0x1b4>)
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	2001      	movs	r0, #1
 80026d8:	9004      	str	r0, [sp, #16]
 80026da:	2002      	movs	r0, #2
 80026dc:	9003      	str	r0, [sp, #12]
 80026de:	9202      	str	r2, [sp, #8]
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <_Z21updateDisplayIfNeededb+0x1c0>)
 80026e8:	460a      	mov	r2, r1
 80026ea:	2105      	movs	r1, #5
 80026ec:	482f      	ldr	r0, [pc, #188]	@ (80027ac <_Z21updateDisplayIfNeededb+0x1b8>)
 80026ee:	f002 f953 	bl	8004998 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh>
    }
    if ((fabsf(currData.humidity - prevData.humidity) > 0.1f && result) || force) {
 80026f2:	4b26      	ldr	r3, [pc, #152]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 80026f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80026f8:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <_Z21updateDisplayIfNeededb+0x19c>)
 80026fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	eef0 7ae7 	vabs.f32	s15, s15
 8002706:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002794 <_Z21updateDisplayIfNeededb+0x1a0>
 800270a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	dd02      	ble.n	800271a <_Z21updateDisplayIfNeededb+0x126>
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <_Z21updateDisplayIfNeededb+0x12c>
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d026      	beq.n	800276e <_Z21updateDisplayIfNeededb+0x17a>
        sprintf(hum_disp, "H:%.1f%%", currData.humidity);
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff3f 	bl	80005a8 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4923      	ldr	r1, [pc, #140]	@ (80027bc <_Z21updateDisplayIfNeededb+0x1c8>)
 8002730:	4823      	ldr	r0, [pc, #140]	@ (80027c0 <_Z21updateDisplayIfNeededb+0x1cc>)
 8002732:	f00d fef9 	bl	8010528 <siprintf>
        tft.drawTextGenFast(5, start + space_before_next * 2, hum_disp, GC9A01A_BLACK, colors[colorIdx], curr_font, scale, 1);
 8002736:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <_Z21updateDisplayIfNeededb+0x1c4>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	3319      	adds	r3, #25
 800273c:	b29b      	uxth	r3, r3
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	b299      	uxth	r1, r3
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <_Z21updateDisplayIfNeededb+0x1ac>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <_Z21updateDisplayIfNeededb+0x1b0>)
 800274a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800274e:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <_Z21updateDisplayIfNeededb+0x1b4>)
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	2001      	movs	r0, #1
 8002754:	9004      	str	r0, [sp, #16]
 8002756:	2002      	movs	r0, #2
 8002758:	9003      	str	r0, [sp, #12]
 800275a:	9202      	str	r2, [sp, #8]
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	2300      	movs	r3, #0
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <_Z21updateDisplayIfNeededb+0x1cc>)
 8002764:	460a      	mov	r2, r1
 8002766:	2105      	movs	r1, #5
 8002768:	4810      	ldr	r0, [pc, #64]	@ (80027ac <_Z21updateDisplayIfNeededb+0x1b8>)
 800276a:	f002 f915 	bl	8004998 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh>
    }

    if (result) {
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <_Z21updateDisplayIfNeededb+0x18a>
        prevData = currData;
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <_Z21updateDisplayIfNeededb+0x19c>)
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_Z21updateDisplayIfNeededb+0x198>)
 8002778:	ca07      	ldmia	r2, {r0, r1, r2}
 800277a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000e10 	.word	0x20000e10
 800278c:	2000000c 	.word	0x2000000c
 8002790:	20000000 	.word	0x20000000
 8002794:	3dcccccd 	.word	0x3dcccccd
 8002798:	0801283c 	.word	0x0801283c
 800279c:	20000288 	.word	0x20000288
 80027a0:	200002ea 	.word	0x200002ea
 80027a4:	08012fe8 	.word	0x08012fe8
 80027a8:	20000018 	.word	0x20000018
 80027ac:	20000260 	.word	0x20000260
 80027b0:	08012848 	.word	0x08012848
 80027b4:	200002a8 	.word	0x200002a8
 80027b8:	200002e8 	.word	0x200002e8
 80027bc:	08012854 	.word	0x08012854
 80027c0:	200002c8 	.word	0x200002c8

080027c4 <_Z17show_weather_datav>:
//        default: return slide1;
//    }
//}


void show_weather_data(){
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af02      	add	r7, sp, #8

    tft.fillRect(0, 0, tft.getHeight(), tft.getWidth(), colors[colorIdx]);
 80027ca:	4891      	ldr	r0, [pc, #580]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 80027cc:	f002 fa00 	bl	8004bd0 <_ZNK7GC9A01A9getHeightEv>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29c      	uxth	r4, r3
 80027d4:	488e      	ldr	r0, [pc, #568]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 80027d6:	f002 f9f0 	bl	8004bba <_ZNK7GC9A01A8getWidthEv>
 80027da:	4603      	mov	r3, r0
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4a8d      	ldr	r2, [pc, #564]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4a8c      	ldr	r2, [pc, #560]	@ (8002a18 <_Z17show_weather_datav+0x254>)
 80027e6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80027ea:	9201      	str	r2, [sp, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4623      	mov	r3, r4
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	4886      	ldr	r0, [pc, #536]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 80027f6:	f001 ff82 	bl	80046fe <_ZN7GC9A01A8fillRectEttttt>

    for(;;)
    {
    	bool colorChanged = false;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
    	uartPrint("Stack remaining in %s task: %u\n", "bme_display_task", uxTaskGetStackHighWaterMark(bmeDisplayTaskHandle));
 80027fe:	4b87      	ldr	r3, [pc, #540]	@ (8002a1c <_Z17show_weather_datav+0x258>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f00b fb28 	bl	800de58 <uxTaskGetStackHighWaterMark>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4984      	ldr	r1, [pc, #528]	@ (8002a20 <_Z17show_weather_datav+0x25c>)
 800280e:	4885      	ldr	r0, [pc, #532]	@ (8002a24 <_Z17show_weather_datav+0x260>)
 8002810:	f002 fe20 	bl	8005454 <uartPrint>
        uint32_t rawValue;
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &rawValue, pdMS_TO_TICKS(waitTime)) == pdTRUE) {
 8002814:	4b84      	ldr	r3, [pc, #528]	@ (8002a28 <_Z17show_weather_datav+0x264>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a82      	ldr	r2, [pc, #520]	@ (8002a2c <_Z17show_weather_datav+0x268>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	1d3a      	adds	r2, r7, #4
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	2000      	movs	r0, #0
 8002832:	f00b fd9f 	bl	800e374 <xTaskNotifyWait>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8097 	beq.w	8002976 <_Z17show_weather_datav+0x1b2>
            ButtonEvent event = static_cast<ButtonEvent>(rawValue);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60bb      	str	r3, [r7, #8]

            switch (event) {
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <_Z17show_weather_datav+0x96>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d040      	beq.n	80028da <_Z17show_weather_datav+0x116>
 8002858:	e098      	b.n	800298c <_Z17show_weather_datav+0x1c8>
            case ButtonEvent::SHORT_PRESS:
            	if(mode == 0){
 800285a:	4b75      	ldr	r3, [pc, #468]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 8091 	bne.w	8002986 <_Z17show_weather_datav+0x1c2>
                    HAL_UART_Transmit(&huart2, (uint8_t*)"SHORT PRESS\n", 12, HAL_MAX_DELAY);
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	220c      	movs	r2, #12
 800286a:	4972      	ldr	r1, [pc, #456]	@ (8002a34 <_Z17show_weather_datav+0x270>)
 800286c:	4872      	ldr	r0, [pc, #456]	@ (8002a38 <_Z17show_weather_datav+0x274>)
 800286e:	f009 f8e7 	bl	800ba40 <HAL_UART_Transmit>
                    colorIdx = (colorIdx + 1) % (sizeof(colors) / sizeof(colors[0]));
 8002872:	4b68      	ldr	r3, [pc, #416]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	4619      	mov	r1, r3
 800287a:	4b70      	ldr	r3, [pc, #448]	@ (8002a3c <_Z17show_weather_datav+0x278>)
 800287c:	fba3 2301 	umull	r2, r3, r3, r1
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	1aca      	subs	r2, r1, r3
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 8002890:	701a      	strb	r2, [r3, #0]
                    tft.fillRect(0, 0, tft.getHeight(), tft.getWidth(), colors[colorIdx]);
 8002892:	485f      	ldr	r0, [pc, #380]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 8002894:	f002 f99c 	bl	8004bd0 <_ZNK7GC9A01A9getHeightEv>
 8002898:	4603      	mov	r3, r0
 800289a:	b29c      	uxth	r4, r3
 800289c:	485c      	ldr	r0, [pc, #368]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 800289e:	f002 f98c 	bl	8004bba <_ZNK7GC9A01A8getWidthEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002a18 <_Z17show_weather_datav+0x254>)
 80028ae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	4854      	ldr	r0, [pc, #336]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 80028be:	f001 ff1e 	bl	80046fe <_ZN7GC9A01A8fillRectEttttt>
                    colorChanged = true;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
                    updateDisplayIfNeeded(colorChanged);
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fe93 	bl	80025f4 <_Z21updateDisplayIfNeededb>
                    lastWriteTick = xTaskGetTickCount();
 80028ce:	f00a ffbf 	bl	800d850 <xTaskGetTickCount>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002a40 <_Z17show_weather_datav+0x27c>)
 80028d6:	6013      	str	r3, [r2, #0]
            	}
            	break;
 80028d8:	e055      	b.n	8002986 <_Z17show_weather_datav+0x1c2>
            case ButtonEvent::LONG_PRESS:
                HAL_UART_Transmit(&huart2, (uint8_t*)"LONG PRESS\n", 11, HAL_MAX_DELAY);
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	220b      	movs	r2, #11
 80028e0:	4958      	ldr	r1, [pc, #352]	@ (8002a44 <_Z17show_weather_datav+0x280>)
 80028e2:	4855      	ldr	r0, [pc, #340]	@ (8002a38 <_Z17show_weather_datav+0x274>)
 80028e4:	f009 f8ac 	bl	800ba40 <HAL_UART_Transmit>
                mode = !mode;
 80028e8:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 80028fa:	701a      	strb	r2, [r3, #0]
            	if(mode == 1){
 80028fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d114      	bne.n	800292e <_Z17show_weather_datav+0x16a>
            		waitTime = pdMS_TO_TICKS(10000);
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <_Z17show_weather_datav+0x264>)
 8002906:	f242 7210 	movw	r2, #10000	@ 0x2710
 800290a:	801a      	strh	r2, [r3, #0]
            		uartPrint("Free heap: %u\n", xPortGetFreeHeapSize());
 800290c:	f00c fad8 	bl	800eec0 <xPortGetFreeHeapSize>
 8002910:	4603      	mov	r3, r0
 8002912:	4619      	mov	r1, r3
 8002914:	484c      	ldr	r0, [pc, #304]	@ (8002a48 <_Z17show_weather_datav+0x284>)
 8002916:	f002 fd9d 	bl	8005454 <uartPrint>
            		uartPrint("Stack remaining in %s task: %u\n", "bme_display_task", uxTaskGetStackHighWaterMark(nullptr));
 800291a:	2000      	movs	r0, #0
 800291c:	f00b fa9c 	bl	800de58 <uxTaskGetStackHighWaterMark>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	493e      	ldr	r1, [pc, #248]	@ (8002a20 <_Z17show_weather_datav+0x25c>)
 8002926:	483f      	ldr	r0, [pc, #252]	@ (8002a24 <_Z17show_weather_datav+0x260>)
 8002928:	f002 fd94 	bl	8005454 <uartPrint>
            	}else if(mode == 0){
            		waitTime = pdMS_TO_TICKS(5000);
            		tft.fillRect(0, 0, tft.getHeight(), tft.getWidth(), colors[colorIdx]);
            		updateDisplayIfNeeded(true);
            	}
                break;
 800292c:	e02d      	b.n	800298a <_Z17show_weather_datav+0x1c6>
            	}else if(mode == 0){
 800292e:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d129      	bne.n	800298a <_Z17show_weather_datav+0x1c6>
            		waitTime = pdMS_TO_TICKS(5000);
 8002936:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <_Z17show_weather_datav+0x264>)
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	801a      	strh	r2, [r3, #0]
            		tft.fillRect(0, 0, tft.getHeight(), tft.getWidth(), colors[colorIdx]);
 800293e:	4834      	ldr	r0, [pc, #208]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 8002940:	f002 f946 	bl	8004bd0 <_ZNK7GC9A01A9getHeightEv>
 8002944:	4603      	mov	r3, r0
 8002946:	b29c      	uxth	r4, r3
 8002948:	4831      	ldr	r0, [pc, #196]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 800294a:	f002 f936 	bl	8004bba <_ZNK7GC9A01A8getWidthEv>
 800294e:	4603      	mov	r3, r0
 8002950:	b29b      	uxth	r3, r3
 8002952:	4a30      	ldr	r2, [pc, #192]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	4611      	mov	r1, r2
 8002958:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <_Z17show_weather_datav+0x254>)
 800295a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800295e:	9201      	str	r2, [sp, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4623      	mov	r3, r4
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	4829      	ldr	r0, [pc, #164]	@ (8002a10 <_Z17show_weather_datav+0x24c>)
 800296a:	f001 fec8 	bl	80046fe <_ZN7GC9A01A8fillRectEttttt>
            		updateDisplayIfNeeded(true);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fe40 	bl	80025f4 <_Z21updateDisplayIfNeededb>
                break;
 8002974:	e009      	b.n	800298a <_Z17show_weather_datav+0x1c6>
            }
        }else{
        	if(mode == 0){
 8002976:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <_Z17show_weather_datav+0x26c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <_Z17show_weather_datav+0x1c8>
        		updateDisplayIfNeeded(false);
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fe38 	bl	80025f4 <_Z21updateDisplayIfNeededb>
 8002984:	e002      	b.n	800298c <_Z17show_weather_datav+0x1c8>
            	break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <_Z17show_weather_datav+0x1c8>
                break;
 800298a:	bf00      	nop
        		//slideIdx = (slideIdx + 1) % SLIDE_COUNT;
        		//tft.drawBitmapDMA(getSlideByIndex(slideIdx));
        	}
        }

		if(xTaskGetTickCount() - lastWriteTick > pdMS_TO_TICKS(1 * 60 * 1000)){
 800298c:	f00a ff60 	bl	800d850 <xTaskGetTickCount>
 8002990:	4602      	mov	r2, r0
 8002992:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <_Z17show_weather_datav+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800299c:	4293      	cmp	r3, r2
 800299e:	bf8c      	ite	hi
 80029a0:	2301      	movhi	r3, #1
 80029a2:	2300      	movls	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01e      	beq.n	80029e8 <_Z17show_weather_datav+0x224>
			if(colorIdx != lastSavedColorIdx){
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <_Z17show_weather_datav+0x288>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d018      	beq.n	80029e8 <_Z17show_weather_datav+0x224>
				uartPrint("Tick: %lu, ColorIdx: %u, LastSaved: %u\n", xTaskGetTickCount(), colorIdx, lastSavedColorIdx);
 80029b6:	f00a ff4b 	bl	800d850 <xTaskGetTickCount>
 80029ba:	4601      	mov	r1, r0
 80029bc:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <_Z17show_weather_datav+0x288>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4822      	ldr	r0, [pc, #136]	@ (8002a50 <_Z17show_weather_datav+0x28c>)
 80029c8:	f002 fd44 	bl	8005454 <uartPrint>
				SaveColorIdx(colorIdx);
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fd43 	bl	800245c <_Z12SaveColorIdxh>
				lastSavedColorIdx = colorIdx;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <_Z17show_weather_datav+0x250>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <_Z17show_weather_datav+0x288>)
 80029dc:	701a      	strb	r2, [r3, #0]
				lastWriteTick = xTaskGetTickCount();
 80029de:	f00a ff37 	bl	800d850 <xTaskGetTickCount>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a16      	ldr	r2, [pc, #88]	@ (8002a40 <_Z17show_weather_datav+0x27c>)
 80029e6:	6013      	str	r3, [r2, #0]
			}

		}
		if (tim2_fired) {
 80029e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <_Z17show_weather_datav+0x290>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <_Z17show_weather_datav+0x23a>
		    tim2_fired = false;
 80029f2:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <_Z17show_weather_datav+0x290>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
		    //tft.drawBitmapFromFlashNoDMA(slide1,240,240);
		    uartPrint("TIM2 interrupt fired!\n");
 80029f8:	4817      	ldr	r0, [pc, #92]	@ (8002a58 <_Z17show_weather_datav+0x294>)
 80029fa:	f002 fd2b 	bl	8005454 <uartPrint>
		}
		WatchdogManager::instance().notifyAlive("DisplayTask");
 80029fe:	f004 fd6f 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4915      	ldr	r1, [pc, #84]	@ (8002a5c <_Z17show_weather_datav+0x298>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fdbe 	bl	8007588 <_ZN15WatchdogManager11notifyAliveEPKc>
		//uartPrint("Free heap on startup: %lu bytes\n", xPortGetFreeHeapSize());


    }
 8002a0c:	e6f5      	b.n	80027fa <_Z17show_weather_datav+0x36>
 8002a0e:	bf00      	nop
 8002a10:	20000260 	.word	0x20000260
 8002a14:	200002ea 	.word	0x200002ea
 8002a18:	08012fe8 	.word	0x08012fe8
 8002a1c:	20000dfc 	.word	0x20000dfc
 8002a20:	08012860 	.word	0x08012860
 8002a24:	08012874 	.word	0x08012874
 8002a28:	2000001c 	.word	0x2000001c
 8002a2c:	10624dd3 	.word	0x10624dd3
 8002a30:	200002f0 	.word	0x200002f0
 8002a34:	08012894 	.word	0x08012894
 8002a38:	20000fa8 	.word	0x20000fa8
 8002a3c:	aaaaaaab 	.word	0xaaaaaaab
 8002a40:	200002ec 	.word	0x200002ec
 8002a44:	080128a4 	.word	0x080128a4
 8002a48:	080128b0 	.word	0x080128b0
 8002a4c:	200002eb 	.word	0x200002eb
 8002a50:	080128c0 	.word	0x080128c0
 8002a54:	20000de8 	.word	0x20000de8
 8002a58:	080128e8 	.word	0x080128e8
 8002a5c:	08012818 	.word	0x08012818

08002a60 <_Z16BME_Display_TaskPv>:
}


void BME_Display_Task(void *argument)
{        // Czeka na powiadomienie z ISR (przycisk)
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	lcd_init(logo_thaleo_1bit);
 8002a68:	4804      	ldr	r0, [pc, #16]	@ (8002a7c <_Z16BME_Display_TaskPv+0x1c>)
 8002a6a:	f7ff fd5f 	bl	800252c <_Z8lcd_initPKh>
	show_weather_data();
 8002a6e:	f7ff fea9 	bl	80027c4 <_Z17show_weather_datav>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	080137b4 	.word	0x080137b4

08002a80 <_Z41__static_initialization_and_destruction_0v>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af06      	add	r7, sp, #24
                   GPIOA, GPIO_PIN_9); // RST
 8002a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a8a:	9305      	str	r3, [sp, #20]
 8002a8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ae8 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8002a8e:	9304      	str	r3, [sp, #16]
 8002a90:	2300      	movs	r3, #0
 8002a92:	9303      	str	r3, [sp, #12]
 8002a94:	2300      	movs	r3, #0
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8002aa6:	4912      	ldr	r1, [pc, #72]	@ (8002af0 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8002aa8:	4812      	ldr	r0, [pc, #72]	@ (8002af4 <_Z41__static_initialization_and_destruction_0v+0x74>)
 8002aaa:	f001 fce1 	bl	8004470 <_ZN7GC9A01AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDefmS3_mS3_mS3_m>
static const uint16_t space_before_next = (tft.getHeight() - 2 * start - scale * curr_font->height * 3) / 2 + scale * curr_font->height;
 8002aae:	4811      	ldr	r0, [pc, #68]	@ (8002af4 <_Z41__static_initialization_and_destruction_0v+0x74>)
 8002ab0:	f002 f88e 	bl	8004bd0 <_ZNK7GC9A01A9getHeightEv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	7a5b      	ldrb	r3, [r3, #9]
 8002abc:	4619      	mov	r1, r3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	3b64      	subs	r3, #100	@ 0x64
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	7a5b      	ldrb	r3, [r3, #9]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <_Z41__static_initialization_and_destruction_0v+0x7c>)
 8002ade:	801a      	strh	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020800 	.word	0x40020800
 8002af0:	20000e14 	.word	0x20000e14
 8002af4:	20000260 	.word	0x20000260
 8002af8:	20000018 	.word	0x20000018
 8002afc:	200002e8 	.word	0x200002e8

08002b00 <_GLOBAL__sub_I_tft>:
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	f7ff ffbc 	bl	8002a80 <_Z41__static_initialization_and_destruction_0v>
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <Delay_us>:
#include "tim.h"

#include "delays.h"

void Delay_us(uint16_t us)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
	htim3.Instance->CNT = 0;
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <Delay_us+0x30>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim3.Instance->CNT <= us);
 8002b1e:	bf00      	nop
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <Delay_us+0x30>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d9f9      	bls.n	8002b20 <Delay_us+0x14>
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000f60 	.word	0x20000f60

08002b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <MX_DMA_Init+0x3c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <MX_DMA_Init+0x3c>)
 8002b50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <MX_DMA_Init+0x3c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	203b      	movs	r0, #59	@ 0x3b
 8002b68:	f004 ff40 	bl	80079ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002b6c:	203b      	movs	r0, #59	@ 0x3b
 8002b6e:	f004 ff59 	bl	8007a24 <HAL_NVIC_EnableIRQ>

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002b86:	2306      	movs	r3, #6
 8002b88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	83fb      	strh	r3, [r7, #30]
 8002b96:	2300      	movs	r3, #0
 8002b98:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8002b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8002e2c <EE_Init+0x2ac>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002baa:	4ba1      	ldr	r3, [pc, #644]	@ (8002e30 <EE_Init+0x2b0>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8002bc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <EE_Init+0x62>
 8002bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bce:	f280 8196 	bge.w	8002efe <EE_Init+0x37e>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80f8 	beq.w	8002dc8 <EE_Init+0x248>
 8002bd8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d050      	beq.n	8002c82 <EE_Init+0x102>
 8002be0:	e18d      	b.n	8002efe <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002be2:	8c3b      	ldrh	r3, [r7, #32]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002be8:	4890      	ldr	r0, [pc, #576]	@ (8002e2c <EE_Init+0x2ac>)
 8002bea:	f000 f9a9 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 818e 	bne.w	8002f12 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002bf6:	f107 0214 	add.w	r2, r7, #20
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f005 fc54 	bl	80084ac <HAL_FLASHEx_Erase>
 8002c04:	4603      	mov	r3, r0
 8002c06:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002c08:	7efb      	ldrb	r3, [r7, #27]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8181 	beq.w	8002f12 <EE_Init+0x392>
          {
            return FlashStatus;
 8002c10:	7efb      	ldrb	r3, [r7, #27]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	e185      	b.n	8002f22 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002c16:	8c3b      	ldrh	r3, [r7, #32]
 8002c18:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d125      	bne.n	8002c6c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002c20:	4882      	ldr	r0, [pc, #520]	@ (8002e2c <EE_Init+0x2ac>)
 8002c22:	f000 f98d 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10e      	bne.n	8002c4a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002c2c:	f107 0214 	add.w	r2, r7, #20
 8002c30:	463b      	mov	r3, r7
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f005 fc39 	bl	80084ac <HAL_FLASHEx_Erase>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002c3e:	7efb      	ldrb	r3, [r7, #27]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <EE_Init+0xca>
          {
            return FlashStatus;
 8002c44:	7efb      	ldrb	r3, [r7, #27]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	e16b      	b.n	8002f22 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	4977      	ldr	r1, [pc, #476]	@ (8002e30 <EE_Init+0x2b0>)
 8002c54:	2001      	movs	r0, #1
 8002c56:	f005 fa63 	bl	8008120 <HAL_FLASH_Program>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002c5e:	7efb      	ldrb	r3, [r7, #27]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8156 	beq.w	8002f12 <EE_Init+0x392>
        {
          return FlashStatus;
 8002c66:	7efb      	ldrb	r3, [r7, #27]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	e15a      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002c6c:	f000 f9fe 	bl	800306c <EE_Format>
 8002c70:	4603      	mov	r3, r0
 8002c72:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 814b 	beq.w	8002f12 <EE_Init+0x392>
        {
          return FlashStatus;
 8002c7c:	7efb      	ldrb	r3, [r7, #27]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	e14f      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002c82:	8c3b      	ldrh	r3, [r7, #32]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d163      	bne.n	8002d50 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002c8c:	e030      	b.n	8002cf0 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002c8e:	4b69      	ldr	r3, [pc, #420]	@ (8002e34 <EE_Init+0x2b4>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c96:	4968      	ldr	r1, [pc, #416]	@ (8002e38 <EE_Init+0x2b8>)
 8002c98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d101      	bne.n	8002ca4 <EE_Init+0x124>
          {
            x = VarIdx;
 8002ca0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ca2:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8002ca4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ca6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d01d      	beq.n	8002cea <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002cae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cb0:	4a61      	ldr	r2, [pc, #388]	@ (8002e38 <EE_Init+0x2b8>)
 8002cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb6:	4961      	ldr	r1, [pc, #388]	@ (8002e3c <EE_Init+0x2bc>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f96b 	bl	8002f94 <EE_ReadVariable>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002cc2:	8bbb      	ldrh	r3, [r7, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d010      	beq.n	8002cea <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002cc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cca:	4a5b      	ldr	r2, [pc, #364]	@ (8002e38 <EE_Init+0x2b8>)
 8002ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e3c <EE_Init+0x2bc>)
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fa60 	bl	800319c <EE_VerifyPageFullWriteVariable>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002ce0:	8bfb      	ldrh	r3, [r7, #30]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <EE_Init+0x16a>
              {
                return EepromStatus;
 8002ce6:	8bfb      	ldrh	r3, [r7, #30]
 8002ce8:	e11b      	b.n	8002f22 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002cea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cec:	3301      	adds	r3, #1
 8002cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002cf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0cb      	beq.n	8002c8e <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	494b      	ldr	r1, [pc, #300]	@ (8002e2c <EE_Init+0x2ac>)
 8002d00:	2001      	movs	r0, #1
 8002d02:	f005 fa0d 	bl	8008120 <HAL_FLASH_Program>
 8002d06:	4603      	mov	r3, r0
 8002d08:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002d0a:	7efb      	ldrb	r3, [r7, #27]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <EE_Init+0x196>
        {
          return FlashStatus;
 8002d10:	7efb      	ldrb	r3, [r7, #27]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	e105      	b.n	8002f22 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8002d16:	2307      	movs	r3, #7
 8002d18:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002d22:	4843      	ldr	r0, [pc, #268]	@ (8002e30 <EE_Init+0x2b0>)
 8002d24:	f000 f90c 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80f3 	bne.w	8002f16 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002d30:	f107 0214 	add.w	r2, r7, #20
 8002d34:	463b      	mov	r3, r7
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fbb7 	bl	80084ac <HAL_FLASHEx_Erase>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002d42:	7efb      	ldrb	r3, [r7, #27]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80e6 	beq.w	8002f16 <EE_Init+0x396>
          {
            return FlashStatus;
 8002d4a:	7efb      	ldrb	r3, [r7, #27]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	e0e8      	b.n	8002f22 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002d50:	8c3b      	ldrh	r3, [r7, #32]
 8002d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12b      	bne.n	8002db2 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002d62:	2302      	movs	r3, #2
 8002d64:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002d66:	4832      	ldr	r0, [pc, #200]	@ (8002e30 <EE_Init+0x2b0>)
 8002d68:	f000 f8ea 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10e      	bne.n	8002d90 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002d72:	f107 0214 	add.w	r2, r7, #20
 8002d76:	463b      	mov	r3, r7
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f005 fb96 	bl	80084ac <HAL_FLASHEx_Erase>
 8002d80:	4603      	mov	r3, r0
 8002d82:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002d84:	7efb      	ldrb	r3, [r7, #27]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <EE_Init+0x210>
          {
            return FlashStatus;
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	e0c8      	b.n	8002f22 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	4924      	ldr	r1, [pc, #144]	@ (8002e2c <EE_Init+0x2ac>)
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f005 f9c0 	bl	8008120 <HAL_FLASH_Program>
 8002da0:	4603      	mov	r3, r0
 8002da2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002da4:	7efb      	ldrb	r3, [r7, #27]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80b5 	beq.w	8002f16 <EE_Init+0x396>
        {
          return FlashStatus;
 8002dac:	7efb      	ldrb	r3, [r7, #27]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	e0b7      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002db2:	f000 f95b 	bl	800306c <EE_Format>
 8002db6:	4603      	mov	r3, r0
 8002db8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002dba:	7efb      	ldrb	r3, [r7, #27]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80aa 	beq.w	8002f16 <EE_Init+0x396>
        {
          return FlashStatus;
 8002dc2:	7efb      	ldrb	r3, [r7, #27]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	e0ac      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002dc8:	8c3b      	ldrh	r3, [r7, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002dce:	f000 f94d 	bl	800306c <EE_Format>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002dd6:	7efb      	ldrb	r3, [r7, #27]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809e 	beq.w	8002f1a <EE_Init+0x39a>
        {
          return FlashStatus;
 8002dde:	7efb      	ldrb	r3, [r7, #27]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	e09e      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002de4:	8c3b      	ldrh	r3, [r7, #32]
 8002de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11b      	bne.n	8002e26 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002dee:	2307      	movs	r3, #7
 8002df0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002df6:	2302      	movs	r3, #2
 8002df8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002dfa:	480d      	ldr	r0, [pc, #52]	@ (8002e30 <EE_Init+0x2b0>)
 8002dfc:	f000 f8a0 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8089 	bne.w	8002f1a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002e08:	f107 0214 	add.w	r2, r7, #20
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f005 fb4b 	bl	80084ac <HAL_FLASHEx_Erase>
 8002e16:	4603      	mov	r3, r0
 8002e18:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002e1a:	7efb      	ldrb	r3, [r7, #27]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07c      	beq.n	8002f1a <EE_Init+0x39a>
          {
            return FlashStatus;
 8002e20:	7efb      	ldrb	r3, [r7, #27]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	e07d      	b.n	8002f22 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002e2a:	e03a      	b.n	8002ea2 <EE_Init+0x322>
 8002e2c:	08040000 	.word	0x08040000
 8002e30:	08044000 	.word	0x08044000
 8002e34:	08040006 	.word	0x08040006
 8002e38:	20000020 	.word	0x20000020
 8002e3c:	200002f2 	.word	0x200002f2
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002e40:	4b3a      	ldr	r3, [pc, #232]	@ (8002f2c <EE_Init+0x3ac>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e48:	4939      	ldr	r1, [pc, #228]	@ (8002f30 <EE_Init+0x3b0>)
 8002e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d101      	bne.n	8002e56 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8002e52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e54:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8002e56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002e58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d01d      	beq.n	8002e9c <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002e60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e62:	4a33      	ldr	r2, [pc, #204]	@ (8002f30 <EE_Init+0x3b0>)
 8002e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e68:	4932      	ldr	r1, [pc, #200]	@ (8002f34 <EE_Init+0x3b4>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f892 	bl	8002f94 <EE_ReadVariable>
 8002e70:	4603      	mov	r3, r0
 8002e72:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002e74:	8bbb      	ldrh	r3, [r7, #28]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d010      	beq.n	8002e9c <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002e7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f30 <EE_Init+0x3b0>)
 8002e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e82:	4a2c      	ldr	r2, [pc, #176]	@ (8002f34 <EE_Init+0x3b4>)
 8002e84:	8812      	ldrh	r2, [r2, #0]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f987 	bl	800319c <EE_VerifyPageFullWriteVariable>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002e92:	8bfb      	ldrh	r3, [r7, #30]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <EE_Init+0x31c>
              {
                return EepromStatus;
 8002e98:	8bfb      	ldrh	r3, [r7, #30]
 8002e9a:	e042      	b.n	8002f22 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002e9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0cb      	beq.n	8002e40 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	4921      	ldr	r1, [pc, #132]	@ (8002f38 <EE_Init+0x3b8>)
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f005 f934 	bl	8008120 <HAL_FLASH_Program>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002ebc:	7efb      	ldrb	r3, [r7, #27]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <EE_Init+0x348>
        {
          return FlashStatus;
 8002ec2:	7efb      	ldrb	r3, [r7, #27]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	e02c      	b.n	8002f22 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8002ec8:	2306      	movs	r3, #6
 8002eca:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002ed4:	4819      	ldr	r0, [pc, #100]	@ (8002f3c <EE_Init+0x3bc>)
 8002ed6:	f000 f833 	bl	8002f40 <EE_VerifyPageFullyErased>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11c      	bne.n	8002f1a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002ee0:	f107 0214 	add.w	r2, r7, #20
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fadf 	bl	80084ac <HAL_FLASHEx_Erase>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ef2:	7efb      	ldrb	r3, [r7, #27]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <EE_Init+0x39a>
          {
            return FlashStatus;
 8002ef8:	7efb      	ldrb	r3, [r7, #27]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	e011      	b.n	8002f22 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8002efe:	f000 f8b5 	bl	800306c <EE_Format>
 8002f02:	4603      	mov	r3, r0
 8002f04:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8002f06:	7efb      	ldrb	r3, [r7, #27]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <EE_Init+0x39e>
      {
        return FlashStatus;
 8002f0c:	7efb      	ldrb	r3, [r7, #27]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	e007      	b.n	8002f22 <EE_Init+0x3a2>
      break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <EE_Init+0x3a0>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <EE_Init+0x3a0>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <EE_Init+0x3a0>
      }
      break;
 8002f1e:	bf00      	nop
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3728      	adds	r7, #40	@ 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08044006 	.word	0x08044006
 8002f30:	20000020 	.word	0x20000020
 8002f34:	200002f2 	.word	0x200002f2
 8002f38:	08044000 	.word	0x08044000
 8002f3c:	08040000 	.word	0x08040000

08002f40 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 8002f4c:	f245 5355 	movw	r3, #21845	@ 0x5555
 8002f50:	827b      	strh	r3, [r7, #18]
   
  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002f58:	333c      	adds	r3, #60	@ 0x3c
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 8002f5c:	e00d      	b.n	8002f7a <EE_VerifyPageFullyErased+0x3a>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8002f64:	8a7b      	ldrh	r3, [r7, #18]
 8002f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d002      	beq.n	8002f74 <EE_VerifyPageFullyErased+0x34>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

      break;
 8002f72:	e006      	b.n	8002f82 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d9ed      	bls.n	8002f5e <EE_VerifyPageFullyErased+0x1e>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	b29b      	uxth	r3, r3
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8002fa4:	f245 5355 	movw	r3, #21845	@ 0x5555
 8002fa8:	81bb      	strh	r3, [r7, #12]
 8002faa:	2301      	movs	r3, #1
 8002fac:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	@ (8003020 <EE_ReadVariable+0x8c>)
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <EE_ReadVariable+0x8c>)
 8002fb4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f000 f8aa 	bl	8003110 <EE_FindValidPage>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	2bab      	cmp	r3, #171	@ 0xab
 8002fc4:	d101      	bne.n	8002fca <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8002fc6:	23ab      	movs	r3, #171	@ 0xab
 8002fc8:	e025      	b.n	8003016 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002fca:	89fb      	ldrh	r3, [r7, #14]
 8002fcc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	039b      	lsls	r3, r3, #14
 8002fd4:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	039a      	lsls	r2, r3, #14
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <EE_ReadVariable+0x90>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8002fe2:	e012      	b.n	800300a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8002fea:	89ba      	ldrh	r2, [r7, #12]
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d108      	bne.n	8003004 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3b02      	subs	r3, #2
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	82fb      	strh	r3, [r7, #22]

      break;
 8003002:	e007      	b.n	8003014 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3b04      	subs	r3, #4
 8003008:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3302      	adds	r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8e7      	bhi.n	8002fe4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8003014:	8afb      	ldrh	r3, [r7, #22]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08040000 	.word	0x08040000
 8003024:	0803fffe 	.word	0x0803fffe

08003028 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	460a      	mov	r2, r1
 8003032:	80fb      	strh	r3, [r7, #6]
 8003034:	4613      	mov	r3, r2
 8003036:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800303c:	88ba      	ldrh	r2, [r7, #4]
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8aa 	bl	800319c <EE_VerifyPageFullWriteVariable>
 8003048:	4603      	mov	r3, r0
 800304a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800304c:	89fb      	ldrh	r3, [r7, #14]
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	d107      	bne.n	8003062 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8003052:	88ba      	ldrh	r2, [r7, #4]
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f901 	bl	8003260 <EE_PageTransfer>
 800305e:	4603      	mov	r3, r0
 8003060:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8003062:	89fb      	ldrh	r3, [r7, #14]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
HAL_StatusTypeDef EE_Format(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800307e:	2306      	movs	r3, #6
 8003080:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003086:	2302      	movs	r3, #2
 8003088:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800308a:	481f      	ldr	r0, [pc, #124]	@ (8003108 <EE_Format+0x9c>)
 800308c:	f7ff ff58 	bl	8002f40 <EE_VerifyPageFullyErased>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8003096:	f107 0218 	add.w	r2, r7, #24
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 fa04 	bl	80084ac <HAL_FLASHEx_Erase>
 80030a4:	4603      	mov	r3, r0
 80030a6:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <EE_Format+0x46>
    {
      return FlashStatus;
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	e025      	b.n	80030fe <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	4913      	ldr	r1, [pc, #76]	@ (8003108 <EE_Format+0x9c>)
 80030bc:	2001      	movs	r0, #1
 80030be:	f005 f82f 	bl	8008120 <HAL_FLASH_Program>
 80030c2:	4603      	mov	r3, r0
 80030c4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <EE_Format+0x64>
  {
    return FlashStatus;
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	e016      	b.n	80030fe <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80030d0:	2307      	movs	r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80030d4:	480d      	ldr	r0, [pc, #52]	@ (800310c <EE_Format+0xa0>)
 80030d6:	f7ff ff33 	bl	8002f40 <EE_VerifyPageFullyErased>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80030e0:	f107 0218 	add.w	r2, r7, #24
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f005 f9df 	bl	80084ac <HAL_FLASHEx_Erase>
 80030ee:	4603      	mov	r3, r0
 80030f0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <EE_Format+0x90>
    {
      return FlashStatus;
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	e000      	b.n	80030fe <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08040000 	.word	0x08040000
 800310c:	08044000 	.word	0x08044000

08003110 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800311a:	2306      	movs	r3, #6
 800311c:	81fb      	strh	r3, [r7, #14]
 800311e:	2306      	movs	r3, #6
 8003120:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003122:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <EE_FindValidPage+0x84>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <EE_FindValidPage+0x88>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <EE_FindValidPage+0x5c>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d125      	bne.n	8003184 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8003138:	89bb      	ldrh	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8003148:	2300      	movs	r3, #0
 800314a:	e01c      	b.n	8003186 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800314c:	2301      	movs	r3, #1
 800314e:	e01a      	b.n	8003186 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8003160:	2301      	movs	r3, #1
 8003162:	e010      	b.n	8003186 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8003164:	2300      	movs	r3, #0
 8003166:	e00e      	b.n	8003186 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8003168:	23ab      	movs	r3, #171	@ 0xab
 800316a:	e00c      	b.n	8003186 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8003172:	2300      	movs	r3, #0
 8003174:	e007      	b.n	8003186 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8003176:	89bb      	ldrh	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800317c:	2301      	movs	r3, #1
 800317e:	e002      	b.n	8003186 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8003180:	23ab      	movs	r3, #171	@ 0xab
 8003182:	e000      	b.n	8003186 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8003184:	2300      	movs	r3, #0
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	08040000 	.word	0x08040000
 8003198:	08044000 	.word	0x08044000

0800319c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800319c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	460a      	mov	r2, r1
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80031b6:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <EE_VerifyPageFullWriteVariable+0xb8>)
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <EE_VerifyPageFullWriteVariable+0xbc>)
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80031be:	2001      	movs	r0, #1
 80031c0:	f7ff ffa6 	bl	8003110 <EE_FindValidPage>
 80031c4:	4603      	mov	r3, r0
 80031c6:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80031c8:	8a3b      	ldrh	r3, [r7, #16]
 80031ca:	2bab      	cmp	r3, #171	@ 0xab
 80031cc:	d101      	bne.n	80031d2 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80031ce:	23ab      	movs	r3, #171	@ 0xab
 80031d0:	e03b      	b.n	800324a <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80031d2:	8a3b      	ldrh	r3, [r7, #16]
 80031d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80031d8:	3310      	adds	r3, #16
 80031da:	039b      	lsls	r3, r3, #14
 80031dc:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80031de:	8a3b      	ldrh	r3, [r7, #16]
 80031e0:	3301      	adds	r3, #1
 80031e2:	039a      	lsls	r2, r3, #14
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <EE_VerifyPageFullWriteVariable+0xc0>)
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 80031ea:	e029      	b.n	8003240 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d121      	bne.n	800323a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	461c      	mov	r4, r3
 80031fc:	4615      	mov	r5, r2
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	2001      	movs	r0, #1
 8003206:	f004 ff8b 	bl	8008120 <HAL_FLASH_Program>
 800320a:	4603      	mov	r3, r0
 800320c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	b29b      	uxth	r3, r3
 8003218:	e017      	b.n	800324a <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1c99      	adds	r1, r3, #2
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2200      	movs	r2, #0
 8003222:	4698      	mov	r8, r3
 8003224:	4691      	mov	r9, r2
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	2001      	movs	r0, #1
 800322c:	f004 ff78 	bl	8008120 <HAL_FLASH_Program>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	b29b      	uxth	r3, r3
 8003238:	e007      	b.n	800324a <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3304      	adds	r3, #4
 800323e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d3d1      	bcc.n	80031ec <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003248:	2380      	movs	r3, #128	@ 0x80
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003254:	08040000 	.word	0x08040000
 8003258:	08044000 	.word	0x08044000
 800325c:	0803ffff 	.word	0x0803ffff

08003260 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	80fb      	strh	r3, [r7, #6]
 800326c:	4613      	mov	r3, r2
 800326e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8003276:	4b54      	ldr	r3, [pc, #336]	@ (80033c8 <EE_PageTransfer+0x168>)
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800327a:	2300      	movs	r3, #0
 800327c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	847b      	strh	r3, [r7, #34]	@ 0x22
 800328a:	2300      	movs	r3, #0
 800328c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff ff3c 	bl	8003110 <EE_FindValidPage>
 8003298:	4603      	mov	r3, r0
 800329a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800329c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d104      	bne.n	80032ac <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80032a2:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <EE_PageTransfer+0x168>)
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80032a6:	2307      	movs	r3, #7
 80032a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80032aa:	e009      	b.n	80032c0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80032ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80032b2:	4b46      	ldr	r3, [pc, #280]	@ (80033cc <EE_PageTransfer+0x16c>)
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80032b6:	2306      	movs	r3, #6
 80032b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80032ba:	e001      	b.n	80032c0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80032bc:	23ab      	movs	r3, #171	@ 0xab
 80032be:	e07e      	b.n	80033be <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80032c0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032ca:	2001      	movs	r0, #1
 80032cc:	f004 ff28 	bl	8008120 <HAL_FLASH_Program>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80032d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80032de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	e06b      	b.n	80033be <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80032e6:	88ba      	ldrh	r2, [r7, #4]
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff55 	bl	800319c <EE_VerifyPageFullWriteVariable>
 80032f2:	4603      	mov	r3, r0
 80032f4:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80032f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80032fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80032fe:	e05e      	b.n	80033be <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003300:	2300      	movs	r3, #0
 8003302:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003304:	e027      	b.n	8003356 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8003306:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003308:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <EE_PageTransfer+0x170>)
 800330a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	429a      	cmp	r2, r3
 8003312:	d01d      	beq.n	8003350 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003314:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003316:	4a2e      	ldr	r2, [pc, #184]	@ (80033d0 <EE_PageTransfer+0x170>)
 8003318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800331c:	492d      	ldr	r1, [pc, #180]	@ (80033d4 <EE_PageTransfer+0x174>)
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fe38 	bl	8002f94 <EE_ReadVariable>
 8003324:	4603      	mov	r3, r0
 8003326:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8003328:	8c3b      	ldrh	r3, [r7, #32]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d010      	beq.n	8003350 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800332e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003330:	4a27      	ldr	r2, [pc, #156]	@ (80033d0 <EE_PageTransfer+0x170>)
 8003332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003336:	4a27      	ldr	r2, [pc, #156]	@ (80033d4 <EE_PageTransfer+0x174>)
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff2d 	bl	800319c <EE_VerifyPageFullWriteVariable>
 8003342:	4603      	mov	r3, r0
 8003344:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8003346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 800334c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800334e:	e036      	b.n	80033be <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003350:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003352:	3301      	adds	r3, #1
 8003354:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003356:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0d4      	beq.n	8003306 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8003360:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003362:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800336c:	f107 021c 	add.w	r2, r7, #28
 8003370:	f107 0308 	add.w	r3, r7, #8
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f005 f898 	bl	80084ac <HAL_FLASHEx_Erase>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800338a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800338e:	b29b      	uxth	r3, r3
 8003390:	e015      	b.n	80033be <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800339c:	2001      	movs	r0, #1
 800339e:	f004 febf 	bl	8008120 <HAL_FLASH_Program>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80033a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 80033b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	e002      	b.n	80033be <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 80033b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033bc:	b29b      	uxth	r3, r3
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3730      	adds	r7, #48	@ 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08040000 	.word	0x08040000
 80033cc:	08044000 	.word	0x08044000
 80033d0:	20000020 	.word	0x20000020
 80033d4:	200002f2 	.word	0x200002f2

080033d8 <_ZN7ESP8266C1EP20__UART_HandleTypeDefS1_>:
#include <stdio.h>
#include "FreeRTOS.h"
#include "task.h"


ESP8266::ESP8266(UART_HandleTypeDef* uart, UART_HandleTypeDef* debug_uart)
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
    : _uart(uart), _debug(debug_uart), _debug_enabled(debug_uart != nullptr) {}
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	721a      	strb	r2, [r3, #8]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	725a      	strb	r2, [r3, #9]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_ZN7ESP826610debugPrintEPKc>:

void ESP8266::setDebug(bool enable) {
    _debug_enabled = enable;
}

void ESP8266::debugPrint(const char* str) {
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
    if (_debug && _debug_enabled) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00f      	beq.n	8003446 <_ZN7ESP826610debugPrintEPKc+0x32>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7a1b      	ldrb	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <_ZN7ESP826610debugPrintEPKc+0x32>
        HAL_UART_Transmit(_debug, (uint8_t*)str, strlen(str), 100);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685c      	ldr	r4, [r3, #4]
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f7fc ff4c 	bl	80002d0 <strlen>
 8003438:	4603      	mov	r3, r0
 800343a:	b29a      	uxth	r2, r3
 800343c:	2364      	movs	r3, #100	@ 0x64
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	4620      	mov	r0, r4
 8003442:	f008 fafd 	bl	800ba40 <HAL_UART_Transmit>
    }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
	...

08003450 <_ZN7ESP826611sendCommandEPcS0_jm>:

bool ESP8266::isBusy() const { return busy; }
void ESP8266::setBusy(bool b) { busy = b; }

bool ESP8266::sendCommand(char* cmd, char* response, size_t response_size, uint32_t timeout) {
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
    memset(response, 0, response_size);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	2100      	movs	r1, #0
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f00d f91c 	bl	80106a0 <memset>

    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f7fc ff2f 	bl	80002d0 <strlen>
 8003472:	4603      	mov	r3, r0
 8003474:	b29a      	uxth	r2, r3
 8003476:	2364      	movs	r3, #100	@ 0x64
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	4620      	mov	r0, r4
 800347c:	f008 fae0 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP TX] ");
 8003480:	4942      	ldr	r1, [pc, #264]	@ (800358c <_ZN7ESP826611sendCommandEPcS0_jm+0x13c>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff ffc6 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint(cmd);
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ffc2 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint("\r\n");
 8003490:	493f      	ldr	r1, [pc, #252]	@ (8003590 <_ZN7ESP826611sendCommandEPcS0_jm+0x140>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff ffbe 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>

    uint8_t ch;
    unsigned int index = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    uint32_t start = HAL_GetTick();
 800349c:	f004 f9be 	bl	800781c <HAL_GetTick>
 80034a0:	61b8      	str	r0, [r7, #24]

    while ((HAL_GetTick() - start) < timeout) {
 80034a2:	e054      	b.n	800354e <_ZN7ESP826611sendCommandEPcS0_jm+0xfe>
        if (HAL_UART_Receive(_uart, &ch, 1, 10) == HAL_OK) {
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	f107 0117 	add.w	r1, r7, #23
 80034ac:	230a      	movs	r3, #10
 80034ae:	2201      	movs	r2, #1
 80034b0:	f008 fb51 	bl	800bb56 <HAL_UART_Receive>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d041      	beq.n	8003548 <_ZN7ESP826611sendCommandEPcS0_jm+0xf8>
            if (index < response_size - 1) {
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d23f      	bcs.n	800354e <_ZN7ESP826611sendCommandEPcS0_jm+0xfe>
                response[index++] = ch;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	61fa      	str	r2, [r7, #28]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	7dfa      	ldrb	r2, [r7, #23]
 80034da:	701a      	strb	r2, [r3, #0]
                response[index] = '\0';
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]

                if (strstr(response, "OK")) {
 80034e6:	492b      	ldr	r1, [pc, #172]	@ (8003594 <_ZN7ESP826611sendCommandEPcS0_jm+0x144>)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f00d f8e1 	bl	80106b0 <strstr>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <_ZN7ESP826611sendCommandEPcS0_jm+0xc0>
                    debugPrint("[ESP RX] ");
 80034f4:	4928      	ldr	r1, [pc, #160]	@ (8003598 <_ZN7ESP826611sendCommandEPcS0_jm+0x148>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff ff8c 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    debugPrint(response);
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff88 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    debugPrint("\r\n");
 8003504:	4922      	ldr	r1, [pc, #136]	@ (8003590 <_ZN7ESP826611sendCommandEPcS0_jm+0x140>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff ff84 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    return true;
 800350c:	2301      	movs	r3, #1
 800350e:	e038      	b.n	8003582 <_ZN7ESP826611sendCommandEPcS0_jm+0x132>
                }
                if (strstr(response, "ERROR") || strstr(response, "FAIL")) {
 8003510:	4922      	ldr	r1, [pc, #136]	@ (800359c <_ZN7ESP826611sendCommandEPcS0_jm+0x14c>)
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f00d f8cc 	bl	80106b0 <strstr>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <_ZN7ESP826611sendCommandEPcS0_jm+0xdc>
 800351e:	4920      	ldr	r1, [pc, #128]	@ (80035a0 <_ZN7ESP826611sendCommandEPcS0_jm+0x150>)
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f00d f8c5 	bl	80106b0 <strstr>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <_ZN7ESP826611sendCommandEPcS0_jm+0xfe>
                    debugPrint("[ESP RX] ");
 800352c:	491a      	ldr	r1, [pc, #104]	@ (8003598 <_ZN7ESP826611sendCommandEPcS0_jm+0x148>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff ff70 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    debugPrint(response);
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff6c 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    debugPrint("\r\n");
 800353c:	4914      	ldr	r1, [pc, #80]	@ (8003590 <_ZN7ESP826611sendCommandEPcS0_jm+0x140>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff ff68 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    return false;
 8003544:	2300      	movs	r3, #0
 8003546:	e01c      	b.n	8003582 <_ZN7ESP826611sendCommandEPcS0_jm+0x132>
                }
            }
        } else {
            vTaskDelay(pdMS_TO_TICKS(1));
 8003548:	2001      	movs	r0, #1
 800354a:	f00a f835 	bl	800d5b8 <vTaskDelay>
    while ((HAL_GetTick() - start) < timeout) {
 800354e:	f004 f965 	bl	800781c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355a:	429a      	cmp	r2, r3
 800355c:	bf8c      	ite	hi
 800355e:	2301      	movhi	r3, #1
 8003560:	2300      	movls	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d19d      	bne.n	80034a4 <_ZN7ESP826611sendCommandEPcS0_jm+0x54>
        }
    }

    debugPrint("[ESP RX TIMEOUT] ");
 8003568:	490e      	ldr	r1, [pc, #56]	@ (80035a4 <_ZN7ESP826611sendCommandEPcS0_jm+0x154>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff52 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint(response);
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff4e 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint("\r\n");
 8003578:	4905      	ldr	r1, [pc, #20]	@ (8003590 <_ZN7ESP826611sendCommandEPcS0_jm+0x140>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff ff4a 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>

    return false;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	bf00      	nop
 800358c:	08012900 	.word	0x08012900
 8003590:	0801290c 	.word	0x0801290c
 8003594:	08012910 	.word	0x08012910
 8003598:	08012914 	.word	0x08012914
 800359c:	08012920 	.word	0x08012920
 80035a0:	08012928 	.word	0x08012928
 80035a4:	08012930 	.word	0x08012930

080035a8 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj>:


bool ESP8266::connectToWiFi(const char* ssid, const char* password, char* response, size_t response_size) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0a6      	sub	sp, #152	@ 0x98
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 80035b6:	f107 0010 	add.w	r0, r7, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a36      	ldr	r2, [pc, #216]	@ (800369c <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xf4>)
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	f00c ff7a 	bl	80104bc <sniprintf>

    if (!sendCommand(cmd, response, response_size, 15000)) {  // Więcej czasu na połączenie
 80035c8:	f107 0110 	add.w	r1, r7, #16
 80035cc:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff ff39 	bl	8003450 <_ZN7ESP826611sendCommandEPcS0_jm>
 80035de:	4603      	mov	r3, r0
 80035e0:	f083 0301 	eor.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x46>
        return false;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e051      	b.n	8003692 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xea>
    }
    if (strstr(response, "+CWJAP:1")) debugPrint("Wrong password.\r\n");
 80035ee:	492c      	ldr	r1, [pc, #176]	@ (80036a0 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xf8>)
 80035f0:	6838      	ldr	r0, [r7, #0]
 80035f2:	f00d f85d 	bl	80106b0 <strstr>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x5e>
 80035fc:	4929      	ldr	r1, [pc, #164]	@ (80036a4 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xfc>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff ff08 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
 8003604:	e016      	b.n	8003634 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x8c>
    else if (strstr(response, "+CWJAP:2")) debugPrint("AP not found.\r\n");
 8003606:	4928      	ldr	r1, [pc, #160]	@ (80036a8 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x100>)
 8003608:	6838      	ldr	r0, [r7, #0]
 800360a:	f00d f851 	bl	80106b0 <strstr>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x76>
 8003614:	4925      	ldr	r1, [pc, #148]	@ (80036ac <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x104>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fefc 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
 800361c:	e00a      	b.n	8003634 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x8c>
    else if (strstr(response, "+CWJAP:3")) debugPrint("Connection timeout.\r\n");
 800361e:	4924      	ldr	r1, [pc, #144]	@ (80036b0 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x108>)
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f00d f845 	bl	80106b0 <strstr>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x8c>
 800362c:	4921      	ldr	r1, [pc, #132]	@ (80036b4 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x10c>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fef0 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    // Szukamy znanych oznak sukcesu
    if (strstr(response, "WIFI CONNECTED") && strstr(response, "WIFI GOT IP") && strstr(response, "OK")) {
 8003634:	4920      	ldr	r1, [pc, #128]	@ (80036b8 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x110>)
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f00d f83a 	bl	80106b0 <strstr>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00f      	beq.n	8003662 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xba>
 8003642:	491e      	ldr	r1, [pc, #120]	@ (80036bc <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x114>)
 8003644:	6838      	ldr	r0, [r7, #0]
 8003646:	f00d f833 	bl	80106b0 <strstr>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xba>
 8003650:	491b      	ldr	r1, [pc, #108]	@ (80036c0 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x118>)
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f00d f82c 	bl	80106b0 <strstr>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xba>
        return true;
 800365e:	2301      	movs	r3, #1
 8003660:	e017      	b.n	8003692 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xea>
    }

    // Możliwe przyczyny niepowodzenia
    if (strstr(response, "FAIL") || strstr(response, "WRONG PASSWORD") || strstr(response, "NO AP FOUND")) {
 8003662:	4918      	ldr	r1, [pc, #96]	@ (80036c4 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x11c>)
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f00d f823 	bl	80106b0 <strstr>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xe4>
 8003670:	4915      	ldr	r1, [pc, #84]	@ (80036c8 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x120>)
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f00d f81c 	bl	80106b0 <strstr>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xe4>
 800367e:	4913      	ldr	r1, [pc, #76]	@ (80036cc <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0x124>)
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	f00d f815 	bl	80106b0 <strstr>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xe8>
        return false;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj+0xea>
    }

    // Domyślnie: nieudane połączenie
    return false;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3790      	adds	r7, #144	@ 0x90
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	08012944 	.word	0x08012944
 80036a0:	0801295c 	.word	0x0801295c
 80036a4:	08012968 	.word	0x08012968
 80036a8:	0801297c 	.word	0x0801297c
 80036ac:	08012988 	.word	0x08012988
 80036b0:	08012998 	.word	0x08012998
 80036b4:	080129a4 	.word	0x080129a4
 80036b8:	080129bc 	.word	0x080129bc
 80036bc:	080129cc 	.word	0x080129cc
 80036c0:	08012910 	.word	0x08012910
 80036c4:	08012928 	.word	0x08012928
 80036c8:	080129d8 	.word	0x080129d8
 80036cc:	080129e8 	.word	0x080129e8

080036d0 <_ZN7ESP826611isConnectedEPKc>:

bool ESP8266::isConnected(const char* ssid_expected) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b0c4      	sub	sp, #272	@ 0x110
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036de:	6018      	str	r0, [r3, #0]
 80036e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036e8:	6019      	str	r1, [r3, #0]
    char response[256];
    if (!sendCommand((char*)"AT+CWJAP?\r\n", response, sizeof(response), 1000)) {
 80036ea:	f107 0208 	add.w	r2, r7, #8
 80036ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036f2:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 80036f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003700:	4910      	ldr	r1, [pc, #64]	@ (8003744 <_ZN7ESP826611isConnectedEPKc+0x74>)
 8003702:	6800      	ldr	r0, [r0, #0]
 8003704:	f7ff fea4 	bl	8003450 <_ZN7ESP826611sendCommandEPcS0_jm>
 8003708:	4603      	mov	r3, r0
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <_ZN7ESP826611isConnectedEPKc+0x48>
        return false;
 8003714:	2300      	movs	r3, #0
 8003716:	e00f      	b.n	8003738 <_ZN7ESP826611isConnectedEPKc+0x68>
    }
    return strstr(response, ssid_expected);
 8003718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800371c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003720:	f107 0208 	add.w	r2, r7, #8
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	4610      	mov	r0, r2
 8003728:	f00c ffc2 	bl	80106b0 <strstr>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3

}
 8003738:	4618      	mov	r0, r3
 800373a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	080129f4 	.word	0x080129f4

08003748 <_ZN7ESP826616sendToThingSpeakEPKcffl>:

bool ESP8266::sendToThingSpeak(const char* apiKey, float temp, float hum, int32_t pres) {
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374a:	f2ad 4d84 	subw	sp, sp, #1156	@ 0x484
 800374e:	af06      	add	r7, sp, #24
 8003750:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003754:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003758:	6018      	str	r0, [r3, #0]
 800375a:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800375e:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8003762:	6019      	str	r1, [r3, #0]
 8003764:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003768:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800376c:	ed83 0a00 	vstr	s0, [r3]
 8003770:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003774:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8003778:	edc3 0a00 	vstr	s1, [r3]
 800377c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003780:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8003784:	601a      	str	r2, [r3, #0]
    while (busy) vTaskDelay(pdMS_TO_TICKS(10));
 8003786:	e002      	b.n	800378e <_ZN7ESP826616sendToThingSpeakEPKcffl+0x46>
 8003788:	200a      	movs	r0, #10
 800378a:	f009 ff15 	bl	800d5b8 <vTaskDelay>
 800378e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003792:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	7a5b      	ldrb	r3, [r3, #9]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f3      	bne.n	8003788 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x40>
    busy = true;
 80037a0:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80037a4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	725a      	strb	r2, [r3, #9]
    char cmd[64];
    char http[512];
    char resp[512];

    // 1. Start TCP connection
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80037ae:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 80037b2:	4aba      	ldr	r2, [pc, #744]	@ (8003a9c <_ZN7ESP826616sendToThingSpeakEPKcffl+0x354>)
 80037b4:	2140      	movs	r1, #64	@ 0x40
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00c fe80 	bl	80104bc <sniprintf>
    if (!sendCommand(cmd, resp, sizeof(resp), 3000)) return false;
 80037bc:	f107 021c 	add.w	r2, r7, #28
 80037c0:	f207 411c 	addw	r1, r7, #1052	@ 0x41c
 80037c4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80037c8:	f2a3 4054 	subw	r0, r3, #1108	@ 0x454
 80037cc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	f7ff fe3a 	bl	8003450 <_ZN7ESP826611sendCommandEPcS0_jm>
 80037dc:	4603      	mov	r3, r0
 80037de:	f083 0301 	eor.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <_ZN7ESP826616sendToThingSpeakEPKcffl+0xa4>
 80037e8:	2300      	movs	r3, #0
 80037ea:	e1b7      	b.n	8003b5c <_ZN7ESP826616sendToThingSpeakEPKcffl+0x414>

    // 2. Prepare HTTP request
    snprintf(http, sizeof(http),
 80037ec:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80037f0:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	f7fc fed7 	bl	80005a8 <__aeabi_f2d>
 80037fa:	4604      	mov	r4, r0
 80037fc:	460d      	mov	r5, r1
 80037fe:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003802:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f7fc fece 	bl	80005a8 <__aeabi_f2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8003814:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 8003818:	f507 7607 	add.w	r6, r7, #540	@ 0x21c
 800381c:	f507 608d 	add.w	r0, r7, #1128	@ 0x468
 8003820:	f2a0 4064 	subw	r0, r0, #1124	@ 0x464
 8003824:	6800      	ldr	r0, [r0, #0]
 8003826:	9004      	str	r0, [sp, #16]
 8003828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800382c:	e9cd 4500 	strd	r4, r5, [sp]
 8003830:	680b      	ldr	r3, [r1, #0]
 8003832:	4a9b      	ldr	r2, [pc, #620]	@ (8003aa0 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x358>)
 8003834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003838:	4630      	mov	r0, r6
 800383a:	f00c fe3f 	bl	80104bc <sniprintf>
        "Content-Length: 0\r\n"
        "\r\n",
        apiKey, temp, hum, pres);

    // 3. Request CIPSEND
    snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%d\r\n", (int)strlen(http));
 800383e:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fd44 	bl	80002d0 <strlen>
 8003848:	4603      	mov	r3, r0
 800384a:	f207 401c 	addw	r0, r7, #1052	@ 0x41c
 800384e:	4a95      	ldr	r2, [pc, #596]	@ (8003aa4 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x35c>)
 8003850:	2140      	movs	r1, #64	@ 0x40
 8003852:	f00c fe33 	bl	80104bc <sniprintf>
    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003856:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800385a:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681c      	ldr	r4, [r3, #0]
 8003862:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fd32 	bl	80002d0 <strlen>
 800386c:	4603      	mov	r3, r0
 800386e:	b29a      	uxth	r2, r3
 8003870:	f207 411c 	addw	r1, r7, #1052	@ 0x41c
 8003874:	2364      	movs	r3, #100	@ 0x64
 8003876:	4620      	mov	r0, r4
 8003878:	f008 f8e2 	bl	800ba40 <HAL_UART_Transmit>

    // 3.1 Wait for '>' prompt
    uint8_t ch;
    unsigned int index = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
    uint32_t start = HAL_GetTick();
 8003882:	f003 ffcb 	bl	800781c <HAL_GetTick>
 8003886:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
    memset(resp, 0, sizeof(resp));
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f00c ff03 	bl	80106a0 <memset>

    while ((HAL_GetTick() - start) < 3000) {
 800389a:	e056      	b.n	800394a <_ZN7ESP826616sendToThingSpeakEPKcffl+0x202>
        if (HAL_UART_Receive(_uart, &ch, 1, 10) == HAL_OK) {
 800389c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80038a0:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f107 011b 	add.w	r1, r7, #27
 80038ac:	230a      	movs	r3, #10
 80038ae:	2201      	movs	r2, #1
 80038b0:	f008 f951 	bl	800bb56 <HAL_UART_Receive>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03f      	beq.n	8003944 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x1fc>
            if (index < sizeof(resp) - 1) {
 80038c4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80038c8:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 80038cc:	d83a      	bhi.n	8003944 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x1fc>
                resp[index++] = ch;
 80038ce:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	f8c7 2464 	str.w	r2, [r7, #1124]	@ 0x464
 80038d8:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 80038dc:	f2a2 424d 	subw	r2, r2, #1101	@ 0x44d
 80038e0:	7811      	ldrb	r1, [r2, #0]
 80038e2:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 80038e6:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 80038ea:	54d1      	strb	r1, [r2, r3]
                resp[index] = '\0';
 80038ec:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80038f0:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 80038f4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80038f8:	4413      	add	r3, r2
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]

                if (ch == '>') {
 80038fe:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003902:	f2a3 434d 	subw	r3, r3, #1101	@ 0x44d
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b3e      	cmp	r3, #62	@ 0x3e
 800390a:	d108      	bne.n	800391e <_ZN7ESP826616sendToThingSpeakEPKcffl+0x1d6>
                    debugPrint("[ESP RX] > prompt received\r\n");
 800390c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003910:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003914:	4964      	ldr	r1, [pc, #400]	@ (8003aa8 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x360>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	f7ff fd7c 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    break;
 800391c:	e024      	b.n	8003968 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x220>
                }

                if (strstr(resp, "ERROR")) {
 800391e:	f107 031c 	add.w	r3, r7, #28
 8003922:	4962      	ldr	r1, [pc, #392]	@ (8003aac <_ZN7ESP826616sendToThingSpeakEPKcffl+0x364>)
 8003924:	4618      	mov	r0, r3
 8003926:	f00c fec3 	bl	80106b0 <strstr>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x1fc>
                    debugPrint("[ESP RX] ERROR after CIPSEND\r\n");
 8003930:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003934:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003938:	495d      	ldr	r1, [pc, #372]	@ (8003ab0 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x368>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	f7ff fd6a 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    return false;
 8003940:	2300      	movs	r3, #0
 8003942:	e10b      	b.n	8003b5c <_ZN7ESP826616sendToThingSpeakEPKcffl+0x414>
                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(1));
 8003944:	2001      	movs	r0, #1
 8003946:	f009 fe37 	bl	800d5b8 <vTaskDelay>
    while ((HAL_GetTick() - start) < 3000) {
 800394a:	f003 ff67 	bl	800781c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800395a:	4293      	cmp	r3, r2
 800395c:	bf94      	ite	ls
 800395e:	2301      	movls	r3, #1
 8003960:	2300      	movhi	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d199      	bne.n	800389c <_ZN7ESP826616sendToThingSpeakEPKcffl+0x154>
    }

    // 4. Send actual HTTP payload
    HAL_UART_Transmit(_uart, (uint8_t*)http, strlen(http), 200);
 8003968:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800396c:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fca9 	bl	80002d0 <strlen>
 800397e:	4603      	mov	r3, r0
 8003980:	b29a      	uxth	r2, r3
 8003982:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 8003986:	23c8      	movs	r3, #200	@ 0xc8
 8003988:	4620      	mov	r0, r4
 800398a:	f008 f859 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP TX] ");
 800398e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003992:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003996:	4947      	ldr	r1, [pc, #284]	@ (8003ab4 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x36c>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f7ff fd3b 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint(http);
 800399e:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 80039a2:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80039a6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80039aa:	4611      	mov	r1, r2
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	f7ff fd31 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>

    // 5. Wait for "SEND OK"
    index = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
    start = HAL_GetTick();
 80039b8:	f003 ff30 	bl	800781c <HAL_GetTick>
 80039bc:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
    memset(resp, 0, sizeof(resp));
 80039c0:	f107 031c 	add.w	r3, r7, #28
 80039c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00c fe68 	bl	80106a0 <memset>
    bool success = false;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3463 	strb.w	r3, [r7, #1123]	@ 0x463

    while ((HAL_GetTick() - start) < 5000) {
 80039d6:	e07a      	b.n	8003ace <_ZN7ESP826616sendToThingSpeakEPKcffl+0x386>
        if (HAL_UART_Receive(_uart, &ch, 1, 10) == HAL_OK) {
 80039d8:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80039dc:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f107 011b 	add.w	r1, r7, #27
 80039e8:	230a      	movs	r3, #10
 80039ea:	2201      	movs	r2, #1
 80039ec:	f008 f8b3 	bl	800bb56 <HAL_UART_Receive>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d063      	beq.n	8003ac8 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x380>
            if (index < sizeof(resp) - 1) {
 8003a00:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8003a04:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8003a08:	d861      	bhi.n	8003ace <_ZN7ESP826616sendToThingSpeakEPKcffl+0x386>
                resp[index++] = ch;
 8003a0a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	f8c7 2464 	str.w	r2, [r7, #1124]	@ 0x464
 8003a14:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8003a18:	f2a2 424d 	subw	r2, r2, #1101	@ 0x44d
 8003a1c:	7811      	ldrb	r1, [r2, #0]
 8003a1e:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8003a22:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 8003a26:	54d1      	strb	r1, [r2, r3]
                resp[index] = '\0';
 8003a28:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003a2c:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8003a30:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8003a34:	4413      	add	r3, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

                if (strstr(resp, "SEND OK")) {
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	491e      	ldr	r1, [pc, #120]	@ (8003ab8 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x370>)
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00c fe35 	bl	80106b0 <strstr>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x31c>
                    debugPrint("[ESP RX] SEND OK received\r\n");
 8003a4c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003a50:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003a54:	4919      	ldr	r1, [pc, #100]	@ (8003abc <_ZN7ESP826616sendToThingSpeakEPKcffl+0x374>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f7ff fcdc 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    success = true;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3463 	strb.w	r3, [r7, #1123]	@ 0x463
                    break;
 8003a62:	e044      	b.n	8003aee <_ZN7ESP826616sendToThingSpeakEPKcffl+0x3a6>
                }
                if (strstr(resp, "ERROR") || strstr(resp, "FAIL")) {
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4910      	ldr	r1, [pc, #64]	@ (8003aac <_ZN7ESP826616sendToThingSpeakEPKcffl+0x364>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f00c fe20 	bl	80106b0 <strstr>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x340>
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	4911      	ldr	r1, [pc, #68]	@ (8003ac0 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x378>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f00c fe17 	bl	80106b0 <strstr>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d022      	beq.n	8003ace <_ZN7ESP826616sendToThingSpeakEPKcffl+0x386>
                    debugPrint("[ESP RX] ERROR or FAIL received\r\n");
 8003a88:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003a8c:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003a90:	490c      	ldr	r1, [pc, #48]	@ (8003ac4 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x37c>)
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	f7ff fcbe 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    break;
 8003a98:	e029      	b.n	8003aee <_ZN7ESP826616sendToThingSpeakEPKcffl+0x3a6>
 8003a9a:	bf00      	nop
 8003a9c:	08012a00 	.word	0x08012a00
 8003aa0:	08012a2c 	.word	0x08012a2c
 8003aa4:	08012ab4 	.word	0x08012ab4
 8003aa8:	08012ac4 	.word	0x08012ac4
 8003aac:	08012920 	.word	0x08012920
 8003ab0:	08012ae4 	.word	0x08012ae4
 8003ab4:	08012900 	.word	0x08012900
 8003ab8:	08012b04 	.word	0x08012b04
 8003abc:	08012b0c 	.word	0x08012b0c
 8003ac0:	08012928 	.word	0x08012928
 8003ac4:	08012b28 	.word	0x08012b28
                }
            }
        } else {
            vTaskDelay(pdMS_TO_TICKS(1));
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f009 fd75 	bl	800d5b8 <vTaskDelay>
    while ((HAL_GetTick() - start) < 5000) {
 8003ace:	f003 fea5 	bl	800781c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bf94      	ite	ls
 8003ae2:	2301      	movls	r3, #1
 8003ae4:	2300      	movhi	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f47f af75 	bne.w	80039d8 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x290>
        }
    }

    // 6. Close connection
    snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE\r\n");
 8003aee:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8003af2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b68 <_ZN7ESP826616sendToThingSpeakEPKcffl+0x420>)
 8003af4:	2140      	movs	r1, #64	@ 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00c fce0 	bl	80104bc <sniprintf>
    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003afc:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003b00:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fbdf 	bl	80002d0 <strlen>
 8003b12:	4603      	mov	r3, r0
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	f207 411c 	addw	r1, r7, #1052	@ 0x41c
 8003b1a:	2364      	movs	r3, #100	@ 0x64
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f007 ff8f 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP TX] AT+CIPCLOSE\r\n");
 8003b22:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003b26:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003b2a:	4910      	ldr	r1, [pc, #64]	@ (8003b6c <_ZN7ESP826616sendToThingSpeakEPKcffl+0x424>)
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f7ff fc71 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>

    // Optionally read response (but not required)
    HAL_UART_Receive(_uart, &ch, 1, 100); // absorb any 'CLOSED'
 8003b32:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003b36:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f107 011b 	add.w	r1, r7, #27
 8003b42:	2364      	movs	r3, #100	@ 0x64
 8003b44:	2201      	movs	r2, #1
 8003b46:	f008 f806 	bl	800bb56 <HAL_UART_Receive>
    busy = false;
 8003b4a:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8003b4e:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	725a      	strb	r2, [r3, #9]
    return success;
 8003b58:	f897 3463 	ldrb.w	r3, [r7, #1123]	@ 0x463
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f207 476c 	addw	r7, r7, #1132	@ 0x46c
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08012b4c 	.word	0x08012b4c
 8003b6c:	08012b5c 	.word	0x08012b5c

08003b70 <_ZN7ESP826610sendRawTcpEPKctS1_j>:

bool ESP8266::sendRawTcp(const char* ip, uint16_t port, const char* data, size_t len) {
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	f507 7428 	add.w	r4, r7, #672	@ 0x2a0
 8003b7c:	f5a4 7425 	sub.w	r4, r4, #660	@ 0x294
 8003b80:	6020      	str	r0, [r4, #0]
 8003b82:	f507 7028 	add.w	r0, r7, #672	@ 0x2a0
 8003b86:	f5a0 7026 	sub.w	r0, r0, #664	@ 0x298
 8003b8a:	6001      	str	r1, [r0, #0]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8003b92:	f5a2 7228 	sub.w	r2, r2, #672	@ 0x2a0
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003b9c:	f2a3 239a 	subw	r3, r3, #666	@ 0x29a
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	801a      	strh	r2, [r3, #0]
    while (busy) vTaskDelay(pdMS_TO_TICKS(10));
 8003ba4:	e002      	b.n	8003bac <_ZN7ESP826610sendRawTcpEPKctS1_j+0x3c>
 8003ba6:	200a      	movs	r0, #10
 8003ba8:	f009 fd06 	bl	800d5b8 <vTaskDelay>
 8003bac:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003bb0:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	7a5b      	ldrb	r3, [r3, #9]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f3      	bne.n	8003ba6 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x36>
    busy = true;
 8003bbe:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003bc2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	725a      	strb	r2, [r3, #9]
    char cmd[128];
    char resp[512];
    uint8_t ch;
    unsigned int index;
    uint32_t start;
    bool promptReceived = false;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
    bool success = false;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 329a 	strb.w	r3, [r7, #666]	@ 0x29a

    // 1. Start TCP connection
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",%u\r\n", ip, port);
 8003bd8:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003bdc:	f2a3 239a 	subw	r3, r3, #666	@ 0x29a
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003be6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8003bea:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4ab3      	ldr	r2, [pc, #716]	@ (8003ec0 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x350>)
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	f00c fc61 	bl	80104bc <sniprintf>
    if (!sendCommand(cmd, resp, sizeof(resp), 3000)) {
 8003bfa:	f107 0214 	add.w	r2, r7, #20
 8003bfe:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003c02:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003c06:	f5a3 7025 	sub.w	r0, r3, #660	@ 0x294
 8003c0a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c14:	6800      	ldr	r0, [r0, #0]
 8003c16:	f7ff fc1b 	bl	8003450 <_ZN7ESP826611sendCommandEPcS0_jm>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d012      	beq.n	8003c4c <_ZN7ESP826610sendRawTcpEPKctS1_j+0xdc>
        debugPrint("[ESP] CIPSTART failed:\r\n");
 8003c26:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003c2a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003c2e:	49a5      	ldr	r1, [pc, #660]	@ (8003ec4 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x354>)
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	f7ff fbef 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
        debugPrint(resp);
 8003c36:	f107 0214 	add.w	r2, r7, #20
 8003c3a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003c3e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003c42:	4611      	mov	r1, r2
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f7ff fbe5 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
        goto fail;
 8003c4a:	e19c      	b.n	8003f86 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x416>
    }

    // 2. Request CIPSEND
    snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%u\r\n", (unsigned int)len);
 8003c4c:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8003c50:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003c54:	4a9c      	ldr	r2, [pc, #624]	@ (8003ec8 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x358>)
 8003c56:	2180      	movs	r1, #128	@ 0x80
 8003c58:	f00c fc30 	bl	80104bc <sniprintf>
    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003c5c:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003c60:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681c      	ldr	r4, [r3, #0]
 8003c68:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fb2f 	bl	80002d0 <strlen>
 8003c72:	4603      	mov	r3, r0
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003c7a:	2364      	movs	r3, #100	@ 0x64
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f007 fedf 	bl	800ba40 <HAL_UART_Transmit>

    // 3. Wait for '>' prompt
    index = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
    start = HAL_GetTick();
 8003c88:	f003 fdc8 	bl	800781c <HAL_GetTick>
 8003c8c:	f8c7 0294 	str.w	r0, [r7, #660]	@ 0x294
    memset(resp, 0, sizeof(resp));
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f00c fd00 	bl	80106a0 <memset>

    while ((HAL_GetTick() - start) < 3000) {
 8003ca0:	e058      	b.n	8003d54 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x1e4>
        if (HAL_UART_Receive(_uart, &ch, 1, 10) == HAL_OK) {
 8003ca2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003ca6:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	f107 0113 	add.w	r1, r7, #19
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f007 ff4e 	bl	800bb56 <HAL_UART_Receive>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d041      	beq.n	8003d4e <_ZN7ESP826610sendRawTcpEPKctS1_j+0x1de>
            if (index < sizeof(resp) - 1) {
 8003cca:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003cce:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8003cd2:	d83f      	bhi.n	8003d54 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x1e4>
                resp[index++] = ch;
 8003cd4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8003cde:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8003ce2:	f2a2 228d 	subw	r2, r2, #653	@ 0x28d
 8003ce6:	7811      	ldrb	r1, [r2, #0]
 8003ce8:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8003cec:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8003cf0:	54d1      	strb	r1, [r2, r3]
                resp[index] = '\0';
 8003cf2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003cf6:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8003cfa:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003cfe:	4413      	add	r3, r2
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]

                if (ch == '>') {
 8003d04:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003d08:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d10:	d10b      	bne.n	8003d2a <_ZN7ESP826610sendRawTcpEPKctS1_j+0x1ba>
                    debugPrint("[ESP RX] > prompt received\r\n");
 8003d12:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003d16:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003d1a:	496c      	ldr	r1, [pc, #432]	@ (8003ecc <_ZN7ESP826610sendRawTcpEPKctS1_j+0x35c>)
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f7ff fb79 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    promptReceived = true;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 329b 	strb.w	r3, [r7, #667]	@ 0x29b
                    break;
 8003d28:	e023      	b.n	8003d72 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x202>
                }

                if (strstr(resp, "ERROR")) {
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	4968      	ldr	r1, [pc, #416]	@ (8003ed0 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x360>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00c fcbd 	bl	80106b0 <strstr>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x1e4>
                    debugPrint("[ESP RX] ERROR after CIPSEND\r\n");
 8003d3c:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003d40:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003d44:	4963      	ldr	r1, [pc, #396]	@ (8003ed4 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x364>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f7ff fb64 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    goto fail;
 8003d4c:	e11b      	b.n	8003f86 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x416>
                }
            }
        } else {
            vTaskDelay(pdMS_TO_TICKS(1));
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f009 fc32 	bl	800d5b8 <vTaskDelay>
    while ((HAL_GetTick() - start) < 3000) {
 8003d54:	f003 fd62 	bl	800781c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bf94      	ite	ls
 8003d68:	2301      	movls	r3, #1
 8003d6a:	2300      	movhi	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d197      	bne.n	8003ca2 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x132>
        }
    }

    if (!promptReceived) {
 8003d72:	f897 329b 	ldrb.w	r3, [r7, #667]	@ 0x29b
 8003d76:	f083 0301 	eor.w	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x222>
        debugPrint("[ESP] CIPSEND prompt '>' not received (timeout)\r\n");
 8003d80:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003d84:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003d88:	4953      	ldr	r1, [pc, #332]	@ (8003ed8 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x368>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	f7ff fb42 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
        goto fail;
 8003d90:	e0f9      	b.n	8003f86 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x416>
    }

    // 4. Send actual data
    HAL_UART_Transmit(_uart, (uint8_t*)data, len, 1000);
 8003d92:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003d96:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003da8:	f5a3 7128 	sub.w	r1, r3, #672	@ 0x2a0
 8003dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003db0:	6809      	ldr	r1, [r1, #0]
 8003db2:	f007 fe45 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP TX] ");
 8003db6:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003dba:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003dbe:	4947      	ldr	r1, [pc, #284]	@ (8003edc <_ZN7ESP826610sendRawTcpEPKctS1_j+0x36c>)
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f7ff fb27 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    debugPrint(data);
 8003dc6:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003dca:	f5a3 7228 	sub.w	r2, r3, #672	@ 0x2a0
 8003dce:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003dd2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003dd6:	6811      	ldr	r1, [r2, #0]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	f7ff fb1b 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>

    // 5. Wait for "SEND OK"
    index = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
    start = HAL_GetTick();
 8003de4:	f003 fd1a 	bl	800781c <HAL_GetTick>
 8003de8:	f8c7 0294 	str.w	r0, [r7, #660]	@ 0x294
    memset(resp, 0, sizeof(resp));
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00c fc52 	bl	80106a0 <memset>


    while ((HAL_GetTick() - start) < 5000) {
 8003dfc:	e07b      	b.n	8003ef6 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x386>
        if (HAL_UART_Receive(_uart, &ch, 1, 10) == HAL_OK) {
 8003dfe:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003e02:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f107 0113 	add.w	r1, r7, #19
 8003e0e:	230a      	movs	r3, #10
 8003e10:	2201      	movs	r2, #1
 8003e12:	f007 fea0 	bl	800bb56 <HAL_UART_Receive>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d064      	beq.n	8003ef0 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x380>
            if (index < sizeof(resp) - 1) {
 8003e26:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003e2a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8003e2e:	d862      	bhi.n	8003ef6 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x386>
                resp[index++] = ch;
 8003e30:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8003e3a:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8003e3e:	f2a2 228d 	subw	r2, r2, #653	@ 0x28d
 8003e42:	7811      	ldrb	r1, [r2, #0]
 8003e44:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8003e48:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8003e4c:	54d1      	strb	r1, [r2, r3]
                resp[index] = '\0';
 8003e4e:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003e52:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8003e56:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003e5a:	4413      	add	r3, r2
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]

                if (strstr(resp, "SEND OK")) {
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	491e      	ldr	r1, [pc, #120]	@ (8003ee0 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x370>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f00c fc22 	bl	80106b0 <strstr>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <_ZN7ESP826610sendRawTcpEPKctS1_j+0x31a>
                    debugPrint("[ESP RX] SEND OK received\r\n");
 8003e72:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003e76:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003e7a:	491a      	ldr	r1, [pc, #104]	@ (8003ee4 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x374>)
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f7ff fac9 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    success = true;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 329a 	strb.w	r3, [r7, #666]	@ 0x29a
                    break;
 8003e88:	e045      	b.n	8003f16 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x3a6>
                }
                if (strstr(resp, "ERROR") || strstr(resp, "FAIL")) {
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4910      	ldr	r1, [pc, #64]	@ (8003ed0 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x360>)
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00c fc0d 	bl	80106b0 <strstr>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d108      	bne.n	8003eae <_ZN7ESP826610sendRawTcpEPKctS1_j+0x33e>
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	4911      	ldr	r1, [pc, #68]	@ (8003ee8 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x378>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00c fc04 	bl	80106b0 <strstr>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d023      	beq.n	8003ef6 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x386>
                    debugPrint("[ESP RX] ERROR or FAIL received after data\r\n");
 8003eae:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003eb2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003eb6:	490d      	ldr	r1, [pc, #52]	@ (8003eec <_ZN7ESP826610sendRawTcpEPKctS1_j+0x37c>)
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	f7ff faab 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
                    break;
 8003ebe:	e02a      	b.n	8003f16 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x3a6>
 8003ec0:	08012b74 	.word	0x08012b74
 8003ec4:	08012b90 	.word	0x08012b90
 8003ec8:	08012bac 	.word	0x08012bac
 8003ecc:	08012ac4 	.word	0x08012ac4
 8003ed0:	08012920 	.word	0x08012920
 8003ed4:	08012ae4 	.word	0x08012ae4
 8003ed8:	08012bbc 	.word	0x08012bbc
 8003edc:	08012900 	.word	0x08012900
 8003ee0:	08012b04 	.word	0x08012b04
 8003ee4:	08012b0c 	.word	0x08012b0c
 8003ee8:	08012928 	.word	0x08012928
 8003eec:	08012bf0 	.word	0x08012bf0
                }
            }
        } else {
            vTaskDelay(pdMS_TO_TICKS(1));
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f009 fb61 	bl	800d5b8 <vTaskDelay>
    while ((HAL_GetTick() - start) < 5000) {
 8003ef6:	f003 fc91 	bl	800781c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003f06:	4293      	cmp	r3, r2
 8003f08:	bf94      	ite	ls
 8003f0a:	2301      	movls	r3, #1
 8003f0c:	2300      	movhi	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af74 	bne.w	8003dfe <_ZN7ESP826610sendRawTcpEPKctS1_j+0x28e>
        }
    }

    // 6. Close connection (always!)
    snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE\r\n");
 8003f16:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003f1a:	4a38      	ldr	r2, [pc, #224]	@ (8003ffc <_ZN7ESP826610sendRawTcpEPKctS1_j+0x48c>)
 8003f1c:	2180      	movs	r1, #128	@ 0x80
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f00c facc 	bl	80104bc <sniprintf>
    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003f24:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003f28:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681c      	ldr	r4, [r3, #0]
 8003f30:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc f9cb 	bl	80002d0 <strlen>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003f42:	2364      	movs	r3, #100	@ 0x64
 8003f44:	4620      	mov	r0, r4
 8003f46:	f007 fd7b 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP TX] AT+CIPCLOSE\r\n");
 8003f4a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003f4e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003f52:	492b      	ldr	r1, [pc, #172]	@ (8004000 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x490>)
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f7ff fa5d 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    HAL_UART_Receive(_uart, &ch, 1, 100); // absorb any 'CLOSED'
 8003f5a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003f5e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f107 0113 	add.w	r1, r7, #19
 8003f6a:	2364      	movs	r3, #100	@ 0x64
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f007 fdf2 	bl	800bb56 <HAL_UART_Receive>

    busy = false;
 8003f72:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003f76:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	725a      	strb	r2, [r3, #9]
    return success;
 8003f80:	f897 329a 	ldrb.w	r3, [r7, #666]	@ 0x29a
 8003f84:	e035      	b.n	8003ff2 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x482>

fail:
    // Awaryjne zamknięcie po błędzie
    snprintf(cmd, sizeof(cmd), "AT+CIPCLOSE\r\n");
 8003f86:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <_ZN7ESP826610sendRawTcpEPKctS1_j+0x48c>)
 8003f8c:	2180      	movs	r1, #128	@ 0x80
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f00c fa94 	bl	80104bc <sniprintf>
    HAL_UART_Transmit(_uart, (uint8_t*)cmd, strlen(cmd), 100);
 8003f94:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003f98:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681c      	ldr	r4, [r3, #0]
 8003fa0:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc f993 	bl	80002d0 <strlen>
 8003faa:	4603      	mov	r3, r0
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003fb2:	2364      	movs	r3, #100	@ 0x64
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f007 fd43 	bl	800ba40 <HAL_UART_Transmit>
    debugPrint("[ESP] Sent CIPCLOSE after failure\r\n");
 8003fba:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003fbe:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003fc2:	4910      	ldr	r1, [pc, #64]	@ (8004004 <_ZN7ESP826610sendRawTcpEPKctS1_j+0x494>)
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f7ff fa25 	bl	8003414 <_ZN7ESP826610debugPrintEPKc>
    HAL_UART_Receive(_uart, &ch, 1, 100);
 8003fca:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003fce:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f107 0113 	add.w	r1, r7, #19
 8003fda:	2364      	movs	r3, #100	@ 0x64
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f007 fdba 	bl	800bb56 <HAL_UART_Receive>

    busy = false;
 8003fe2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8003fe6:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	725a      	strb	r2, [r3, #9]
    return false;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f507 7729 	add.w	r7, r7, #676	@ 0x2a4
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}
 8003ffc:	08012b4c 	.word	0x08012b4c
 8004000:	08012b5c 	.word	0x08012b5c
 8004004:	08012c20 	.word	0x08012c20

08004008 <_Z22sendDiagnosticsOverTCPR7ESP8266>:


extern QueueHandle_t weatherQueue;
weatherData current;

void sendDiagnosticsOverTCP(ESP8266& esp) {
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 800400e:	af02      	add	r7, sp, #8
 8004010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004014:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004018:	6018      	str	r0, [r3, #0]
    const char* serverIp = "13.218.166.58";
 800401a:	4b54      	ldr	r3, [pc, #336]	@ (800416c <_Z22sendDiagnosticsOverTCPR7ESP8266+0x164>)
 800401c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    const uint16_t port = 5678;
 8004020:	f241 632e 	movw	r3, #5678	@ 0x162e
 8004024:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
    char json[512];
    int len = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    len += snprintf(json + len, sizeof(json) - len,
 800402e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004032:	f107 020c 	add.w	r2, r7, #12
 8004036:	18d0      	adds	r0, r2, r3
 8004038:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800403c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004040:	4a4b      	ldr	r2, [pc, #300]	@ (8004170 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x168>)
 8004042:	4619      	mov	r1, r3
 8004044:	f00c fa3a 	bl	80104bc <sniprintf>
 8004048:	4602      	mov	r2, r0
 800404a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800404e:	4413      	add	r3, r2
 8004050:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
        "{"
        "\"device\":\"esp01\","
        "\"tasks\":{");

    for (uint32_t i = 0; i < WatchdogManager::instance().taskCount; ++i) {
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800405a:	e03d      	b.n	80040d8 <_Z22sendDiagnosticsOverTCPR7ESP8266+0xd0>
        const auto& task = WatchdogManager::instance().tasks[i];
 800405c:	f003 fa40 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 8004060:	4603      	mov	r3, r0
 8004062:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9b2 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 800406c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
        len += snprintf(json + len, sizeof(json) - len,
 8004070:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004074:	f107 020c 	add.w	r2, r7, #12
 8004078:	18d4      	adds	r4, r2, r3
 800407a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800407e:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
            "\"%s\":%lu%s",
            task.name,
 8004082:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004086:	681e      	ldr	r6, [r3, #0]
            uxTaskGetStackHighWaterMark(task.handle),
 8004088:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800408c:	685b      	ldr	r3, [r3, #4]
        len += snprintf(json + len, sizeof(json) - len,
 800408e:	4618      	mov	r0, r3
 8004090:	f009 fee2 	bl	800de58 <uxTaskGetStackHighWaterMark>
 8004094:	6038      	str	r0, [r7, #0]
            (i < WatchdogManager::instance().taskCount - 1) ? "," : ""
 8004096:	f003 fa23 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 800409a:	4603      	mov	r3, r0
 800409c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040a0:	3b01      	subs	r3, #1
        len += snprintf(json + len, sizeof(json) - len,
 80040a2:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d201      	bcs.n	80040ae <_Z22sendDiagnosticsOverTCPR7ESP8266+0xa6>
 80040aa:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x16c>)
 80040ac:	e000      	b.n	80040b0 <_Z22sendDiagnosticsOverTCPR7ESP8266+0xa8>
 80040ae:	4b32      	ldr	r3, [pc, #200]	@ (8004178 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x170>)
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4633      	mov	r3, r6
 80040b8:	4a30      	ldr	r2, [pc, #192]	@ (800417c <_Z22sendDiagnosticsOverTCPR7ESP8266+0x174>)
 80040ba:	4629      	mov	r1, r5
 80040bc:	4620      	mov	r0, r4
 80040be:	f00c f9fd 	bl	80104bc <sniprintf>
 80040c2:	4602      	mov	r2, r0
 80040c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80040c8:	4413      	add	r3, r2
 80040ca:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    for (uint32_t i = 0; i < WatchdogManager::instance().taskCount; ++i) {
 80040ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80040d2:	3301      	adds	r3, #1
 80040d4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80040d8:	f003 fa02 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 80040dc:	4603      	mov	r3, r0
 80040de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040e2:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80040e6:	429a      	cmp	r2, r3
 80040e8:	bf34      	ite	cc
 80040ea:	2301      	movcc	r3, #1
 80040ec:	2300      	movcs	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b3      	bne.n	800405c <_Z22sendDiagnosticsOverTCPR7ESP8266+0x54>
        );
    }

    len += snprintf(json + len, sizeof(json) - len,
 80040f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80040f8:	f107 020c 	add.w	r2, r7, #12
 80040fc:	18d4      	adds	r4, r2, r3
 80040fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004102:	f5c3 7500 	rsb	r5, r3, #512	@ 0x200
 8004106:	f00a fedb 	bl	800eec0 <xPortGetFreeHeapSize>
 800410a:	4606      	mov	r6, r0
 800410c:	f00a fee4 	bl	800eed8 <xPortGetMinimumEverFreeHeapSize>
 8004110:	4603      	mov	r3, r0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4633      	mov	r3, r6
 8004116:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x178>)
 8004118:	4629      	mov	r1, r5
 800411a:	4620      	mov	r0, r4
 800411c:	f00c f9ce 	bl	80104bc <sniprintf>
 8004120:	4602      	mov	r2, r0
 8004122:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004126:	4413      	add	r3, r2
 8004128:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
        "}",
        xPortGetFreeHeapSize(),
        xPortGetMinimumEverFreeHeapSize()
    );

    if (esp.sendRawTcp(serverIp, port, json, len)) {
 800412c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004130:	f107 020c 	add.w	r2, r7, #12
 8004134:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8004138:	f5a1 7007 	sub.w	r0, r1, #540	@ 0x21c
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	f241 622e 	movw	r2, #5678	@ 0x162e
 8004144:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8004148:	6800      	ldr	r0, [r0, #0]
 800414a:	f7ff fd11 	bl	8003b70 <_ZN7ESP826610sendRawTcpEPKctS1_j>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <_Z22sendDiagnosticsOverTCPR7ESP8266+0x154>
        uartPrint("Diagnostics sent OK\n");
 8004154:	480b      	ldr	r0, [pc, #44]	@ (8004184 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x17c>)
 8004156:	f001 f97d 	bl	8005454 <uartPrint>
    } else {
        uartPrint("Diagnostics send FAILED\n");
    }
}
 800415a:	e002      	b.n	8004162 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x15a>
        uartPrint("Diagnostics send FAILED\n");
 800415c:	480a      	ldr	r0, [pc, #40]	@ (8004188 <_Z22sendDiagnosticsOverTCPR7ESP8266+0x180>)
 800415e:	f001 f979 	bl	8005454 <uartPrint>
}
 8004162:	bf00      	nop
 8004164:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8004168:	46bd      	mov	sp, r7
 800416a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416c:	08012c44 	.word	0x08012c44
 8004170:	08012c54 	.word	0x08012c54
 8004174:	08012c70 	.word	0x08012c70
 8004178:	08012c74 	.word	0x08012c74
 800417c:	08012c78 	.word	0x08012c78
 8004180:	08012c84 	.word	0x08012c84
 8004184:	08012ca8 	.word	0x08012ca8
 8004188:	08012cc0 	.word	0x08012cc0

0800418c <_Z13ESP_wifi_taskPv>:



void ESP_wifi_task(void *argument)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8004192:	af02      	add	r7, sp, #8
 8004194:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8004198:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800419c:	6018      	str	r0, [r3, #0]
	Led* led = (Led*)argument;
 800419e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80041a2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
	ESP8266 esp(&huart3, &huart2);
 80041ac:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80041b0:	4a72      	ldr	r2, [pc, #456]	@ (800437c <_Z13ESP_wifi_taskPv+0x1f0>)
 80041b2:	4973      	ldr	r1, [pc, #460]	@ (8004380 <_Z13ESP_wifi_taskPv+0x1f4>)
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f90f 	bl	80033d8 <_ZN7ESP8266C1EP20__UART_HandleTypeDefS1_>
	uartPrint("=== ESP WiFi Task started ===\r\n");
 80041ba:	4872      	ldr	r0, [pc, #456]	@ (8004384 <_Z13ESP_wifi_taskPv+0x1f8>)
 80041bc:	f001 f94a 	bl	8005454 <uartPrint>
	WatchdogManager::instance().registerTask("WifiTask", xTaskGetCurrentTaskHandle(), 60);
 80041c0:	f003 f98e 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 80041c4:	4604      	mov	r4, r0
 80041c6:	f009 feb9 	bl	800df3c <xTaskGetCurrentTaskHandle>
 80041ca:	4602      	mov	r2, r0
 80041cc:	233c      	movs	r3, #60	@ 0x3c
 80041ce:	496e      	ldr	r1, [pc, #440]	@ (8004388 <_Z13ESP_wifi_taskPv+0x1fc>)
 80041d0:	4620      	mov	r0, r4
 80041d2:	f003 f9ad 	bl	8007530 <_ZN15WatchdogManager12registerTaskEPKcP19tskTaskControlBlockm>

    bool connected = false;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
    //char cmd[64];
    static char resp[1000];
    char WapiKey[] = "7WWRU5F5YMN25XGB";
 80041dc:	4b6b      	ldr	r3, [pc, #428]	@ (800438c <_Z13ESP_wifi_taskPv+0x200>)
 80041de:	f507 7404 	add.w	r4, r7, #528	@ 0x210
 80041e2:	461d      	mov	r5, r3
 80041e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	7023      	strb	r3, [r4, #0]
    //char RapiKey[] = "HN2XX9NLQRQPK4J2";
    TickType_t previousCycleStart = xTaskGetTickCount();
 80041ec:	f009 fb30 	bl	800d850 <xTaskGetTickCount>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    for (;;) {
		uartPrint("Stack remaining in %s task: %u\n", "esp_wifi_task", uxTaskGetStackHighWaterMark(nullptr));
 80041f6:	2000      	movs	r0, #0
 80041f8:	f009 fe2e 	bl	800de58 <uxTaskGetStackHighWaterMark>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	4963      	ldr	r1, [pc, #396]	@ (8004390 <_Z13ESP_wifi_taskPv+0x204>)
 8004202:	4864      	ldr	r0, [pc, #400]	@ (8004394 <_Z13ESP_wifi_taskPv+0x208>)
 8004204:	f001 f926 	bl	8005454 <uartPrint>
        while (!connected)
 8004208:	e025      	b.n	8004256 <_Z13ESP_wifi_taskPv+0xca>
        {
            // Próba połączenia
            connected = esp.connectToWiFi("INEA-3981", "c6uAX4eG", resp, sizeof(resp));
 800420a:	f507 7009 	add.w	r0, r7, #548	@ 0x224
 800420e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4b60      	ldr	r3, [pc, #384]	@ (8004398 <_Z13ESP_wifi_taskPv+0x20c>)
 8004216:	4a61      	ldr	r2, [pc, #388]	@ (800439c <_Z13ESP_wifi_taskPv+0x210>)
 8004218:	4961      	ldr	r1, [pc, #388]	@ (80043a0 <_Z13ESP_wifi_taskPv+0x214>)
 800421a:	f7ff f9c5 	bl	80035a8 <_ZN7ESP826613connectToWiFiEPKcS1_Pcj>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
            uartPrint(resp);
 8004224:	485c      	ldr	r0, [pc, #368]	@ (8004398 <_Z13ESP_wifi_taskPv+0x20c>)
 8004226:	f001 f915 	bl	8005454 <uartPrint>

            if (connected) {
 800422a:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <_Z13ESP_wifi_taskPv+0xae>
                uartPrint("CONNECTED TO WIFI!\r\n");
 8004232:	485c      	ldr	r0, [pc, #368]	@ (80043a4 <_Z13ESP_wifi_taskPv+0x218>)
 8004234:	f001 f90e 	bl	8005454 <uartPrint>
 8004238:	e002      	b.n	8004240 <_Z13ESP_wifi_taskPv+0xb4>
            } else {
                uartPrint("CONNECTION TO WIFI FAILED!\r\n");
 800423a:	485b      	ldr	r0, [pc, #364]	@ (80043a8 <_Z13ESP_wifi_taskPv+0x21c>)
 800423c:	f001 f90a 	bl	8005454 <uartPrint>
            }
            WatchdogManager::instance().notifyAlive("WifiTask");
 8004240:	f003 f94e 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 8004244:	4603      	mov	r3, r0
 8004246:	4950      	ldr	r1, [pc, #320]	@ (8004388 <_Z13ESP_wifi_taskPv+0x1fc>)
 8004248:	4618      	mov	r0, r3
 800424a:	f003 f99d 	bl	8007588 <_ZN15WatchdogManager11notifyAliveEPKc>
            vTaskDelay(pdMS_TO_TICKS(5000));
 800424e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004252:	f009 f9b1 	bl	800d5b8 <vTaskDelay>
        while (!connected)
 8004256:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1d2      	bne.n	800420a <_Z13ESP_wifi_taskPv+0x7e>
        }

        // Sprawdzenie statusu co 10 sekund
        if (!esp.isConnected("INEA-3981")) {
 8004264:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8004268:	494d      	ldr	r1, [pc, #308]	@ (80043a0 <_Z13ESP_wifi_taskPv+0x214>)
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fa30 	bl	80036d0 <_ZN7ESP826611isConnectedEPKc>
 8004270:	4603      	mov	r3, r0
 8004272:	f083 0301 	eor.w	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <_Z13ESP_wifi_taskPv+0x108>
            uartPrint("WIFI LOST! Reconnecting...\r\n");
 800427c:	484b      	ldr	r0, [pc, #300]	@ (80043ac <_Z13ESP_wifi_taskPv+0x220>)
 800427e:	f001 f8e9 	bl	8005454 <uartPrint>
            connected = false;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
            led->set_freq(100);
 8004288:	2164      	movs	r1, #100	@ 0x64
 800428a:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 800428e:	f000 fec5 	bl	800501c <_ZN3Led8set_freqEt>
 8004292:	e064      	b.n	800435e <_Z13ESP_wifi_taskPv+0x1d2>

        }else{
        	uartPrint("WIFI Connected - all is good\r\n");
 8004294:	4846      	ldr	r0, [pc, #280]	@ (80043b0 <_Z13ESP_wifi_taskPv+0x224>)
 8004296:	f001 f8dd 	bl	8005454 <uartPrint>
        	led->set_freq(2000);
 800429a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800429e:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 80042a2:	f000 febb 	bl	800501c <_ZN3Led8set_freqEt>
        	if (xQueuePeek(weatherQueue, &current, 0) == pdPASS) {
 80042a6:	4b43      	ldr	r3, [pc, #268]	@ (80043b4 <_Z13ESP_wifi_taskPv+0x228>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	4942      	ldr	r1, [pc, #264]	@ (80043b8 <_Z13ESP_wifi_taskPv+0x22c>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f008 fd3a 	bl	800cd28 <xQueuePeek>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01d      	beq.n	8004300 <_Z13ESP_wifi_taskPv+0x174>
        	    if (esp.sendToThingSpeak(WapiKey, current.temperature, current.humidity, current.pres)) {
 80042c4:	4b3c      	ldr	r3, [pc, #240]	@ (80043b8 <_Z13ESP_wifi_taskPv+0x22c>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	4b3b      	ldr	r3, [pc, #236]	@ (80043b8 <_Z13ESP_wifi_taskPv+0x22c>)
 80042cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80042d0:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <_Z13ESP_wifi_taskPv+0x22c>)
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80042d8:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80042dc:	eef0 0a47 	vmov.f32	s1, s14
 80042e0:	eeb0 0a67 	vmov.f32	s0, s15
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fa2f 	bl	8003748 <_ZN7ESP826616sendToThingSpeakEPKcffl>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <_Z13ESP_wifi_taskPv+0x16c>
        	        uartPrint("ThingSpeak OK\r\n");
 80042f0:	4832      	ldr	r0, [pc, #200]	@ (80043bc <_Z13ESP_wifi_taskPv+0x230>)
 80042f2:	f001 f8af 	bl	8005454 <uartPrint>
 80042f6:	e006      	b.n	8004306 <_Z13ESP_wifi_taskPv+0x17a>
        	    } else {
        	        uartPrint("ThingSpeak FAIL\r\n");
 80042f8:	4831      	ldr	r0, [pc, #196]	@ (80043c0 <_Z13ESP_wifi_taskPv+0x234>)
 80042fa:	f001 f8ab 	bl	8005454 <uartPrint>
 80042fe:	e002      	b.n	8004306 <_Z13ESP_wifi_taskPv+0x17a>
        	    }
        	}else{
        		uartPrint("weatherQueue FAILED\r\n");
 8004300:	4830      	ldr	r0, [pc, #192]	@ (80043c4 <_Z13ESP_wifi_taskPv+0x238>)
 8004302:	f001 f8a7 	bl	8005454 <uartPrint>
        	}
        	vTaskDelay(pdMS_TO_TICKS(1000));
 8004306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800430a:	f009 f955 	bl	800d5b8 <vTaskDelay>
        	sendDiagnosticsOverTCP(esp);
 800430e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fe78 	bl	8004008 <_Z22sendDiagnosticsOverTCPR7ESP8266>
        	ESPMessage msg;
        	while (xQueueReceive(logQueue, &msg, 0) == pdPASS) {
 8004318:	e011      	b.n	800433e <_Z13ESP_wifi_taskPv+0x1b2>
        	    esp.sendRawTcp("13.218.166.58", 5678, msg.payload, strlen(msg.payload));
 800431a:	f107 0308 	add.w	r3, r7, #8
 800431e:	3301      	adds	r3, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f7fb ffd5 	bl	80002d0 <strlen>
 8004326:	4602      	mov	r2, r0
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	3301      	adds	r3, #1
 800432e:	f507 7009 	add.w	r0, r7, #548	@ 0x224
 8004332:	9200      	str	r2, [sp, #0]
 8004334:	f241 622e 	movw	r2, #5678	@ 0x162e
 8004338:	4923      	ldr	r1, [pc, #140]	@ (80043c8 <_Z13ESP_wifi_taskPv+0x23c>)
 800433a:	f7ff fc19 	bl	8003b70 <_ZN7ESP826610sendRawTcpEPKctS1_j>
        	while (xQueueReceive(logQueue, &msg, 0) == pdPASS) {
 800433e:	4b23      	ldr	r3, [pc, #140]	@ (80043cc <_Z13ESP_wifi_taskPv+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f107 0108 	add.w	r1, r7, #8
 8004346:	2200      	movs	r2, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f008 fafb 	bl	800c944 <xQueueReceive>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1dd      	bne.n	800431a <_Z13ESP_wifi_taskPv+0x18e>
        	}

        }
        WatchdogManager::instance().notifyAlive("WifiTask");
 800435e:	f003 f8bf 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 8004362:	4603      	mov	r3, r0
 8004364:	4908      	ldr	r1, [pc, #32]	@ (8004388 <_Z13ESP_wifi_taskPv+0x1fc>)
 8004366:	4618      	mov	r0, r3
 8004368:	f003 f90e 	bl	8007588 <_ZN15WatchdogManager11notifyAliveEPKc>

        vTaskDelayUntil(&previousCycleStart, pdMS_TO_TICKS(30000));
 800436c:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8004370:	f247 5130 	movw	r1, #30000	@ 0x7530
 8004374:	4618      	mov	r0, r3
 8004376:	f009 f89f 	bl	800d4b8 <vTaskDelayUntil>


    }
 800437a:	e73c      	b.n	80041f6 <_Z13ESP_wifi_taskPv+0x6a>
 800437c:	20000fa8 	.word	0x20000fa8
 8004380:	20000ff0 	.word	0x20000ff0
 8004384:	08012cdc 	.word	0x08012cdc
 8004388:	08012cfc 	.word	0x08012cfc
 800438c:	08012e04 	.word	0x08012e04
 8004390:	08012d08 	.word	0x08012d08
 8004394:	08012d18 	.word	0x08012d18
 8004398:	200002f4 	.word	0x200002f4
 800439c:	08012d38 	.word	0x08012d38
 80043a0:	08012d44 	.word	0x08012d44
 80043a4:	08012d50 	.word	0x08012d50
 80043a8:	08012d68 	.word	0x08012d68
 80043ac:	08012d88 	.word	0x08012d88
 80043b0:	08012da8 	.word	0x08012da8
 80043b4:	20000e10 	.word	0x20000e10
 80043b8:	20000024 	.word	0x20000024
 80043bc:	08012dc8 	.word	0x08012dc8
 80043c0:	08012dd8 	.word	0x08012dd8
 80043c4:	08012dec 	.word	0x08012dec
 80043c8:	08012c44 	.word	0x08012c44
 80043cc:	20000e0c 	.word	0x20000e0c

080043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _M_elems[__n];
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
      }
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a07      	ldr	r2, [pc, #28]	@ (8004420 <vApplicationGetIdleTaskMemory+0x2c>)
 8004404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a06      	ldr	r2, [pc, #24]	@ (8004424 <vApplicationGetIdleTaskMemory+0x30>)
 800440a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200006e0 	.word	0x200006e0
 8004424:	20000788 	.word	0x20000788

08004428 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004428:	b5b0      	push	{r4, r5, r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800442e:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <MX_FREERTOS_Init+0x30>)
 8004430:	1d3c      	adds	r4, r7, #4
 8004432:	461d      	mov	r5, r3
 8004434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800443c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f007 ff6c 	bl	800c322 <osThreadCreate>
 800444a:	4603      	mov	r3, r0
 800444c:	4a03      	ldr	r2, [pc, #12]	@ (800445c <MX_FREERTOS_Init+0x34>)
 800444e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004450:	bf00      	nop
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bdb0      	pop	{r4, r5, r7, pc}
 8004458:	08012e24 	.word	0x08012e24
 800445c:	200006dc 	.word	0x200006dc

08004460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004468:	2001      	movs	r0, #1
 800446a:	f007 ffa6 	bl	800c3ba <osDelay>
 800446e:	e7fb      	b.n	8004468 <StartDefaultTask+0x8>

08004470 <_ZN7GC9A01AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDefmS3_mS3_mS3_m>:
#include "my_app.h"

volatile bool dmaTransferComplete = true;
static uint16_t lineBuf[512];

GC9A01A::GC9A01A(SPI_HandleTypeDef *hspi,
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
                 GPIO_TypeDef *cs_gpio, uint32_t cs_pin,
                 GPIO_TypeDef *dc_gpio, uint32_t dc_pin,
                 GPIO_TypeDef *bl_gpio, uint32_t bl_pin,
                 GPIO_TypeDef *rst_gpio, uint32_t rst_pin)
    : hspi_(hspi),
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	601a      	str	r2, [r3, #0]
      cs_gpio_(cs_gpio), cs_pin_(cs_pin),
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]
      dc_gpio_(dc_gpio), dc_pin_(dc_pin),
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	611a      	str	r2, [r3, #16]
      bl_gpio_(bl_gpio), bl_pin_(bl_pin),
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a6:	619a      	str	r2, [r3, #24]
      rst_gpio_(rst_gpio), rst_pin_(rst_pin) {}
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ac:	61da      	str	r2, [r3, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b2:	621a      	str	r2, [r3, #32]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <_ZN7GC9A01A4initEv>:

void GC9A01A::init() {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(cs_gpio_, cs_pin_, GPIO_PIN_SET);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6858      	ldr	r0, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2201      	movs	r2, #1
 80044d8:	4619      	mov	r1, r3
 80044da:	f004 fab5 	bl	8008a48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(dc_gpio_, dc_pin_, GPIO_PIN_SET);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68d8      	ldr	r0, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2201      	movs	r2, #1
 80044ea:	4619      	mov	r1, r3
 80044ec:	f004 faac 	bl	8008a48 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(rst_gpio_, rst_pin_, GPIO_PIN_RESET);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69d8      	ldr	r0, [r3, #28]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2200      	movs	r2, #0
 80044fc:	4619      	mov	r1, r3
 80044fe:	f004 faa3 	bl	8008a48 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004502:	2064      	movs	r0, #100	@ 0x64
 8004504:	f003 f996 	bl	8007834 <HAL_Delay>
    HAL_GPIO_WritePin(rst_gpio_, rst_pin_, GPIO_PIN_SET);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69d8      	ldr	r0, [r3, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	b29b      	uxth	r3, r3
 8004512:	2201      	movs	r2, #1
 8004514:	4619      	mov	r1, r3
 8004516:	f004 fa97 	bl	8008a48 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800451a:	2064      	movs	r0, #100	@ 0x64
 800451c:	f003 f98a 	bl	8007834 <HAL_Delay>

    const uint8_t *addr = INIT_CMD;
 8004520:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <_ZN7GC9A01A4initEv+0xc4>)
 8004522:	60fb      	str	r3, [r7, #12]
    while (*addr > 0) {
 8004524:	e01e      	b.n	8004564 <_ZN7GC9A01A4initEv+0xa0>
        uint8_t cmd = *addr++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	72fb      	strb	r3, [r7, #11]
        uint8_t x = *addr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60fa      	str	r2, [r7, #12]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	72bb      	strb	r3, [r7, #10]
        uint8_t numArgs = x & 0x7F;
 800453a:	7abb      	ldrb	r3, [r7, #10]
 800453c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004540:	727b      	strb	r3, [r7, #9]
        configureParam(cmd, (uint8_t *)addr, numArgs);
 8004542:	7a7b      	ldrb	r3, [r7, #9]
 8004544:	7af9      	ldrb	r1, [r7, #11]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f81f 	bl	800458c <_ZN7GC9A01A14configureParamEhPhh>
        addr += numArgs;
 800454e:	7a7b      	ldrb	r3, [r7, #9]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
        if (x & 0x80) HAL_Delay(150);
 8004556:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da02      	bge.n	8004564 <_ZN7GC9A01A4initEv+0xa0>
 800455e:	2096      	movs	r0, #150	@ 0x96
 8004560:	f003 f968 	bl	8007834 <HAL_Delay>
    while (*addr > 0) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1dc      	bne.n	8004526 <_ZN7GC9A01A4initEv+0x62>
    }

    HAL_GPIO_WritePin(bl_gpio_, bl_pin_, GPIO_PIN_SET);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6958      	ldr	r0, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	b29b      	uxth	r3, r3
 8004576:	2201      	movs	r2, #1
 8004578:	4619      	mov	r1, r3
 800457a:	f004 fa65 	bl	8008a48 <HAL_GPIO_WritePin>
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	08013000 	.word	0x08013000

0800458c <_ZN7GC9A01A14configureParamEhPhh>:

void GC9A01A::configureParam(uint8_t command, uint8_t *data, uint8_t n_data) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	461a      	mov	r2, r3
 8004598:	460b      	mov	r3, r1
 800459a:	72fb      	strb	r3, [r7, #11]
 800459c:	4613      	mov	r3, r2
 800459e:	72bb      	strb	r3, [r7, #10]
    startSpiTransaction();
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa98 	bl	8004ad6 <_ZN7GC9A01A19startSpiTransactionEv>
    setSpiDataSize(SPI_DATASIZE_8BIT);
 80045a6:	2100      	movs	r1, #0
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fa89 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitCommand(command);
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fab1 	bl	8004b1a <_ZN7GC9A01A15transmitCommandEh>
    HAL_SPI_Transmit(hspi_, data, n_data, 100);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	7abb      	ldrb	r3, [r7, #10]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	2364      	movs	r3, #100	@ 0x64
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	f006 f9a5 	bl	800a912 <HAL_SPI_Transmit>
    endSpiTransaction();
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fa95 	bl	8004af8 <_ZN7GC9A01A17endSpiTransactionEv>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_ZN7GC9A01A13setAddrWindowEtttt>:

void GC9A01A::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) {
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	461a      	mov	r2, r3
 80045e4:	4603      	mov	r3, r0
 80045e6:	817b      	strh	r3, [r7, #10]
 80045e8:	460b      	mov	r3, r1
 80045ea:	813b      	strh	r3, [r7, #8]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
    uint16_t x2 = x1 + w - 1;
 80045f0:	897a      	ldrh	r2, [r7, #10]
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	4413      	add	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	82fb      	strh	r3, [r7, #22]
    uint16_t y2 = y1 + h - 1;
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8c3b      	ldrh	r3, [r7, #32]
 8004602:	4413      	add	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	82bb      	strh	r3, [r7, #20]

    setSpiDataSize(SPI_DATASIZE_8BIT);
 800460c:	2100      	movs	r1, #0
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa56 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitCommand(0x2A); // CASET
 8004614:	212a      	movs	r1, #42	@ 0x2a
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fa7f 	bl	8004b1a <_ZN7GC9A01A15transmitCommandEh>
    setSpiDataSize(SPI_DATASIZE_16BIT);
 800461c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fa4d 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitData(1, &x1);
 8004626:	f107 030a 	add.w	r3, r7, #10
 800462a:	461a      	mov	r2, r3
 800462c:	2101      	movs	r1, #1
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fa96 	bl	8004b60 <_ZN7GC9A01A12transmitDataEjPt>
    transmitData(1, &x2);
 8004634:	f107 0316 	add.w	r3, r7, #22
 8004638:	461a      	mov	r2, r3
 800463a:	2101      	movs	r1, #1
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa8f 	bl	8004b60 <_ZN7GC9A01A12transmitDataEjPt>

    setSpiDataSize(SPI_DATASIZE_8BIT);
 8004642:	2100      	movs	r1, #0
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fa3b 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitCommand(0x2B); // RASET
 800464a:	212b      	movs	r1, #43	@ 0x2b
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fa64 	bl	8004b1a <_ZN7GC9A01A15transmitCommandEh>
    setSpiDataSize(SPI_DATASIZE_16BIT);
 8004652:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fa32 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitData(1, &y1);
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	461a      	mov	r2, r3
 8004662:	2101      	movs	r1, #1
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa7b 	bl	8004b60 <_ZN7GC9A01A12transmitDataEjPt>
    transmitData(1, &y2);
 800466a:	f107 0314 	add.w	r3, r7, #20
 800466e:	461a      	mov	r2, r3
 8004670:	2101      	movs	r1, #1
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa74 	bl	8004b60 <_ZN7GC9A01A12transmitDataEjPt>

    setSpiDataSize(SPI_DATASIZE_8BIT);
 8004678:	2100      	movs	r1, #0
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa20 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    transmitCommand(0x2C); // RAMWR
 8004680:	212c      	movs	r1, #44	@ 0x2c
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa49 	bl	8004b1a <_ZN7GC9A01A15transmitCommandEh>
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_ZN7GC9A01A10drawPixelsEttPttt>:
    setSpiDataSize(SPI_DATASIZE_16BIT);
    transmitData(1, &color);
    endSpiTransaction();
}

void GC9A01A::drawPixels(uint16_t x, uint16_t y, uint16_t *color, uint16_t width, uint16_t height) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	4613      	mov	r3, r2
 80046a0:	813b      	strh	r3, [r7, #8]
    startSpiTransaction();
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fa17 	bl	8004ad6 <_ZN7GC9A01A19startSpiTransactionEv>
    setAddrWindow(x, y, width, height);
 80046a8:	8c38      	ldrh	r0, [r7, #32]
 80046aa:	893a      	ldrh	r2, [r7, #8]
 80046ac:	8979      	ldrh	r1, [r7, #10]
 80046ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4603      	mov	r3, r0
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff8e 	bl	80045d6 <_ZN7GC9A01A13setAddrWindowEtttt>
    setSpiDataSize(SPI_DATASIZE_16BIT);
 80046ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f9fe 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>
    for (size_t i = 0; i < height; ++i) {
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e00e      	b.n	80046e8 <_ZN7GC9A01A10drawPixelsEttPttt+0x58>
        transmitData(width, color + i * width);
 80046ca:	8c39      	ldrh	r1, [r7, #32]
 80046cc:	8c3b      	ldrh	r3, [r7, #32]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	461a      	mov	r2, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fa3f 	bl	8004b60 <_ZN7GC9A01A12transmitDataEjPt>
    for (size_t i = 0; i < height; ++i) {
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	3301      	adds	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3ec      	bcc.n	80046ca <_ZN7GC9A01A10drawPixelsEttPttt+0x3a>
    }
    endSpiTransaction();
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fa01 	bl	8004af8 <_ZN7GC9A01A17endSpiTransactionEv>
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_ZN7GC9A01A8fillRectEttttt>:
//        transmitColor(color);
//    }
//    endSpiTransaction();
//}

void GC9A01A::fillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 80046fe:	b590      	push	{r4, r7, lr}
 8004700:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8004704:	af02      	add	r7, sp, #8
 8004706:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 800470a:	f5a4 74fa 	sub.w	r4, r4, #500	@ 0x1f4
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	460c      	mov	r4, r1
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471a:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 800471e:	4622      	mov	r2, r4
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004726:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800472a:	4602      	mov	r2, r0
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004732:	f5a3 73fd 	sub.w	r3, r3, #506	@ 0x1fa
 8004736:	460a      	mov	r2, r1
 8004738:	801a      	strh	r2, [r3, #0]
    startSpiTransaction();
 800473a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	f000 f9c7 	bl	8004ad6 <_ZN7GC9A01A19startSpiTransactionEv>
    setAddrWindow(x, y, width, height);
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73fd 	sub.w	r3, r3, #506	@ 0x1fa
 8004750:	881c      	ldrh	r4, [r3, #0]
 8004752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004756:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004760:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8004764:	8819      	ldrh	r1, [r3, #0]
 8004766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476a:	f5a3 70fa 	sub.w	r0, r3, #500	@ 0x1f4
 800476e:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4623      	mov	r3, r4
 8004776:	6800      	ldr	r0, [r0, #0]
 8004778:	f7ff ff2d 	bl	80045d6 <_ZN7GC9A01A13setAddrWindowEtttt>
    setSpiDataSize(SPI_DATASIZE_16BIT);
 800477c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004780:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	f000 f999 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>

    const uint32_t total_pixels = width * height;
 800478e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004792:	f5a3 73fd 	sub.w	r3, r3, #506	@ 0x1fa
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	f8b7 2210 	ldrh.w	r2, [r7, #528]	@ 0x210
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    // Bufor tymczasowy – np. 240 pixeli = 480 bajtów
    static const uint16_t block_size = 240;
    uint8_t buf[block_size * 2];

    for (uint16_t i = 0; i < block_size; ++i) {
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8a7 31fe 	strh.w	r3, [r7, #510]	@ 0x1fe
 80047aa:	e01d      	b.n	80047e8 <_ZN7GC9A01A8fillRectEttttt+0xea>
        buf[2 * i] = color >> 8;
 80047ac:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	b2d1      	uxtb	r1, r2
 80047bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80047c4:	54d1      	strb	r1, [r2, r3]
        buf[2 * i + 1] = color & 0xFF;
 80047c6:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	3301      	adds	r3, #1
 80047ce:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 80047d2:	b2d1      	uxtb	r1, r2
 80047d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80047dc:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < block_size; ++i) {
 80047de:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 80047e2:	3301      	adds	r3, #1
 80047e4:	f8a7 31fe 	strh.w	r3, [r7, #510]	@ 0x1fe
 80047e8:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 80047ec:	2bef      	cmp	r3, #239	@ 0xef
 80047ee:	d9dd      	bls.n	80047ac <_ZN7GC9A01A8fillRectEttttt+0xae>
    }

    uint32_t remaining = total_pixels;
 80047f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047f4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
    while (remaining > 0) {
 80047f8:	e01d      	b.n	8004836 <_ZN7GC9A01A8fillRectEttttt+0x138>
        uint16_t to_send = (remaining > block_size) ? block_size : remaining;
 80047fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8004800:	bf28      	it	cs
 8004802:	23f0      	movcs	r3, #240	@ 0xf0
 8004804:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
        HAL_SPI_Transmit(hspi_, buf, to_send * 2, HAL_MAX_DELAY);
 8004808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	@ 0x1f2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	f107 0110 	add.w	r1, r7, #16
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	f006 f875 	bl	800a912 <HAL_SPI_Transmit>
        remaining -= to_send;
 8004828:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	@ 0x1f2
 800482c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
    while (remaining > 0) {
 8004836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1dd      	bne.n	80047fa <_ZN7GC9A01A8fillRectEttttt+0xfc>
    }

    endSpiTransaction();
 800483e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004842:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f000 f956 	bl	8004af8 <_ZN7GC9A01A17endSpiTransactionEv>
}
 800484c:	bf00      	nop
 800484e:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 8004852:	46bd      	mov	sp, r7
 8004854:	bd90      	pop	{r4, r7, pc}

08004856 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh>:
    }
}

void GC9A01A::drawCharToBuffer(uint16_t* buffer, uint16_t width, uint16_t height,
                               char c, uint16_t fgColor, uint16_t bgColor,
                               const fontStruct* font, uint8_t scale) {
 8004856:	b480      	push	{r7}
 8004858:	b08f      	sub	sp, #60	@ 0x3c
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	4611      	mov	r1, r2
 8004862:	461a      	mov	r2, r3
 8004864:	460b      	mov	r3, r1
 8004866:	80fb      	strh	r3, [r7, #6]
 8004868:	4613      	mov	r3, r2
 800486a:	80bb      	strh	r3, [r7, #4]
    if (c < font->start || c > font->end) return;
 800486c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486e:	799b      	ldrb	r3, [r3, #6]
 8004870:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8004874:	429a      	cmp	r2, r3
 8004876:	f0c0 8088 	bcc.w	800498a <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x134>
 800487a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487c:	79db      	ldrb	r3, [r3, #7]
 800487e:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8004882:	429a      	cmp	r2, r3
 8004884:	f200 8081 	bhi.w	800498a <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x134>

    uint16_t index = (c - font->start) * font->width;
 8004888:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800488c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800488e:	7992      	ldrb	r2, [r2, #6]
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004896:	7a12      	ldrb	r2, [r2, #8]
 8004898:	fb13 f302 	smulbb	r3, r3, r2
 800489c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (int col = 0; col < font->width; col++) {
 800489e:	2300      	movs	r3, #0
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a2:	e06b      	b.n	800497c <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x126>
        uint32_t line = (font->height > 8)
 80048a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a6:	7a5b      	ldrb	r3, [r3, #9]
            ? ((const uint16_t*)font->bitmap)[index + col]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d908      	bls.n	80048be <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x68>
 80048ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80048b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b4:	440b      	add	r3, r1
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	e006      	b.n	80048cc <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x76>
            : ((const uint8_t*)font->bitmap)[index + col];
 80048be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80048c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048c6:	440a      	add	r2, r1
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
        uint32_t line = (font->height > 8)
 80048cc:	623b      	str	r3, [r7, #32]

        for (int row = 0; row < font->height; row++) {
 80048ce:	2300      	movs	r3, #0
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d2:	e04a      	b.n	800496a <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x114>
            uint16_t pixelColor = (line & (1 << row)) ? fgColor : bgColor;
 80048d4:	2201      	movs	r2, #1
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x96>
 80048e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048ea:	e001      	b.n	80048f0 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x9a>
 80048ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80048f0:	83fb      	strh	r3, [r7, #30]

            for (int dx = 0; dx < scale; dx++) {
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f6:	e030      	b.n	800495a <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x104>
                for (int dy = 0; dy < scale; dy++) {
 80048f8:	2300      	movs	r3, #0
 80048fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fc:	e025      	b.n	800494a <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0xf4>
                    int px = (col * scale + dx);
 80048fe:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490a:	4413      	add	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
                    int py = (row * scale + dy);
 800490e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8004912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	4413      	add	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
                    if (px < width && py < height) {
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	429a      	cmp	r2, r3
 8004924:	da0e      	bge.n	8004944 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0xee>
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	429a      	cmp	r2, r3
 800492c:	da0a      	bge.n	8004944 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0xee>
                        buffer[py * width + px] = pixelColor;
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	fb03 f202 	mul.w	r2, r3, r2
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4413      	add	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4413      	add	r3, r2
 8004940:	8bfa      	ldrh	r2, [r7, #30]
 8004942:	801a      	strh	r2, [r3, #0]
                for (int dy = 0; dy < scale; dy++) {
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	3301      	adds	r3, #1
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800494e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004950:	429a      	cmp	r2, r3
 8004952:	dbd4      	blt.n	80048fe <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0xa8>
            for (int dx = 0; dx < scale; dx++) {
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	3301      	adds	r3, #1
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800495e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004960:	429a      	cmp	r2, r3
 8004962:	dbc9      	blt.n	80048f8 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0xa2>
        for (int row = 0; row < font->height; row++) {
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	3301      	adds	r3, #1
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30
 800496a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496c:	7a5b      	ldrb	r3, [r3, #9]
 800496e:	461a      	mov	r2, r3
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	4293      	cmp	r3, r2
 8004974:	dbae      	blt.n	80048d4 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x7e>
    for (int col = 0; col < font->width; col++) {
 8004976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004978:	3301      	adds	r3, #1
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
 800497c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497e:	7a1b      	ldrb	r3, [r3, #8]
 8004980:	461a      	mov	r2, r3
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	4293      	cmp	r3, r2
 8004986:	db8d      	blt.n	80048a4 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x4e>
 8004988:	e000      	b.n	800498c <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh+0x136>
    if (c < font->start || c > font->end) return;
 800498a:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800498c:	373c      	adds	r7, #60	@ 0x3c
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh>:

void GC9A01A::drawTextGenFast(uint16_t x, uint16_t y, const char* str,
                              uint16_t color, uint16_t bgColor,
                              const fontStruct* font, uint8_t scale, uint8_t pos) {
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b091      	sub	sp, #68	@ 0x44
 800499c:	af06      	add	r7, sp, #24
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	817b      	strh	r3, [r7, #10]
 80049a6:	4613      	mov	r3, r2
 80049a8:	813b      	strh	r3, [r7, #8]
    size_t len = strlen(str);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fb fc90 	bl	80002d0 <strlen>
 80049b0:	61f8      	str	r0, [r7, #28]
    uint16_t charW = font->width * scale + 2;
 80049b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b4:	7a1b      	ldrb	r3, [r3, #8]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80049bc:	b29b      	uxth	r3, r3
 80049be:	fb12 f303 	smulbb	r3, r2, r3
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3302      	adds	r3, #2
 80049c6:	837b      	strh	r3, [r7, #26]
    uint16_t charH = font->height * scale;
 80049c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ca:	7a5b      	ldrb	r3, [r3, #9]
 80049cc:	461a      	mov	r2, r3
 80049ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	fb12 f303 	smulbb	r3, r2, r3
 80049d8:	833b      	strh	r3, [r7, #24]
    uint16_t totalW = len * charW;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	8b7a      	ldrh	r2, [r7, #26]
 80049e0:	fb12 f303 	smulbb	r3, r2, r3
 80049e4:	82fb      	strh	r3, [r7, #22]

    if (pos == 1) {
 80049e6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d104      	bne.n	80049f8 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x60>
        x = (width_ - totalW) / 2;
 80049ee:	8afb      	ldrh	r3, [r7, #22]
 80049f0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	817b      	strh	r3, [r7, #10]
    }

    uint16_t* buffer = new uint16_t[totalW * charH];
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	8b3a      	ldrh	r2, [r7, #24]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	4a2e      	ldr	r2, [pc, #184]	@ (8004abc <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x124>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d801      	bhi.n	8004a0a <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x72>
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	e001      	b.n	8004a0e <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x76>
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f00a fb4c 	bl	800f0ac <_Znaj>
 8004a14:	4603      	mov	r3, r0
 8004a16:	613b      	str	r3, [r7, #16]
    if (!buffer) return;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04a      	beq.n	8004ab4 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x11c>

    // Wypełnij tłem
    for (size_t i = 0; i < totalW * charH; i++) buffer[i] = bgColor;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a22:	e008      	b.n	8004a36 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x9e>
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	3301      	adds	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a36:	8afb      	ldrh	r3, [r7, #22]
 8004a38:	8b3a      	ldrh	r2, [r7, #24]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d3ee      	bcc.n	8004a24 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x8c>

    // Wypełnij tekstem
    for (size_t i = 0; i < len; i++) {
 8004a46:	2300      	movs	r3, #0
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	e01e      	b.n	8004a8a <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0xf2>
        drawCharToBuffer(buffer + i * charW, totalW, charH, str[i], color, bgColor, font, scale);
 8004a4c:	8b7b      	ldrh	r3, [r7, #26]
 8004a4e:	6a3a      	ldr	r2, [r7, #32]
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	18d1      	adds	r1, r2, r3
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	8b3c      	ldrh	r4, [r7, #24]
 8004a64:	8af8      	ldrh	r0, [r7, #22]
 8004a66:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8004a6a:	9204      	str	r2, [sp, #16]
 8004a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a6e:	9203      	str	r2, [sp, #12]
 8004a70:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004a72:	9202      	str	r2, [sp, #8]
 8004a74:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff fee9 	bl	8004856 <_ZN7GC9A01A16drawCharToBufferEPtttcttPK10fontStructh>
    for (size_t i = 0; i < len; i++) {
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	3301      	adds	r3, #1
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3dc      	bcc.n	8004a4c <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0xb4>
    }

    // Wyślij jednorazowo
    drawPixels(x, y, buffer, totalW, charH);  // możesz też użyć wersji z DMA
 8004a92:	893a      	ldrh	r2, [r7, #8]
 8004a94:	8979      	ldrh	r1, [r7, #10]
 8004a96:	8b3b      	ldrh	r3, [r7, #24]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	8afb      	ldrh	r3, [r7, #22]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fdf5 	bl	8004690 <_ZN7GC9A01A10drawPixelsEttPttt>

    delete[] buffer;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x11e>
 8004aac:	6938      	ldr	r0, [r7, #16]
 8004aae:	f00a fadb 	bl	800f068 <_ZdaPv>
 8004ab2:	e000      	b.n	8004ab6 <_ZN7GC9A01A15drawTextGenFastEttPKcttPK10fontStructhh+0x11e>
    if (!buffer) return;
 8004ab4:	bf00      	nop
}
 8004ab6:	372c      	adds	r7, #44	@ 0x2c
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd90      	pop	{r4, r7, pc}
 8004abc:	3ffffffc 	.word	0x3ffffffc

08004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>:
    for (size_t i = 0; i < len; i++) {
        dest[i] = __builtin_bswap16(src[i]);
    }
}

void GC9A01A::setSpiDataSize(uint32_t) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
    // Nie wspierane w STM32F4 — ignorowane.
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <_ZN7GC9A01A19startSpiTransactionEv>:

void GC9A01A::startSpiTransaction() {
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(cs_gpio_, cs_pin_, GPIO_PIN_RESET);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6858      	ldr	r0, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4619      	mov	r1, r3
 8004aec:	f003 ffac 	bl	8008a48 <HAL_GPIO_WritePin>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN7GC9A01A17endSpiTransactionEv>:

void GC9A01A::endSpiTransaction() {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(cs_gpio_, cs_pin_, GPIO_PIN_SET);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6858      	ldr	r0, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f003 ff9b 	bl	8008a48 <HAL_GPIO_WritePin>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_ZN7GC9A01A15transmitCommandEh>:

void GC9A01A::transmitCommand(uint8_t command) {
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dc_gpio_, dc_pin_, GPIO_PIN_RESET);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68d8      	ldr	r0, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2200      	movs	r2, #0
 8004b32:	4619      	mov	r1, r3
 8004b34:	f003 ff88 	bl	8008a48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_, &command, 1, 100);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	1cf9      	adds	r1, r7, #3
 8004b3e:	2364      	movs	r3, #100	@ 0x64
 8004b40:	2201      	movs	r2, #1
 8004b42:	f005 fee6 	bl	800a912 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dc_gpio_, dc_pin_, GPIO_PIN_SET);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68d8      	ldr	r0, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2201      	movs	r2, #1
 8004b52:	4619      	mov	r1, r3
 8004b54:	f003 ff78 	bl	8008a48 <HAL_GPIO_WritePin>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZN7GC9A01A12transmitDataEjPt>:

void GC9A01A::transmitData(size_t n, uint16_t *data) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < n; ++i) {
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e01a      	b.n	8004ba8 <_ZN7GC9A01A12transmitDataEjPt+0x48>
        uint8_t buf[2] = {
            static_cast<uint8_t>(data[i] >> 8),
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
            static_cast<uint8_t>(data[i] & 0xFF)
        };
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	743b      	strb	r3, [r7, #16]
            static_cast<uint8_t>(data[i] & 0xFF)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
        };
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	747b      	strb	r3, [r7, #17]
        HAL_SPI_Transmit(hspi_, buf, 2, 100);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f107 0110 	add.w	r1, r7, #16
 8004b9a:	2364      	movs	r3, #100	@ 0x64
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f005 feb8 	bl	800a912 <HAL_SPI_Transmit>
    for (size_t i = 0; i < n; ++i) {
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3e0      	bcc.n	8004b72 <_ZN7GC9A01A12transmitDataEjPt+0x12>
    }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_ZNK7GC9A01A8getWidthEv>:
        static_cast<uint8_t>(color & 0xFF)
    };
    HAL_SPI_Transmit(hspi_, buf, 2, 100);
}

size_t GC9A01A::getWidth() const { return width_; }
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	23f0      	movs	r3, #240	@ 0xf0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_ZNK7GC9A01A9getHeightEv>:
size_t GC9A01A::getHeight() const { return height_; }
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	23f0      	movs	r3, #240	@ 0xf0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt>:
//    }
//
//    endSpiTransaction();
//}

void GC9A01A::drawBitmap1bit(const uint8_t* img, uint16_t w, uint16_t h, uint16_t color0, uint16_t color1) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	@ 0x38
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	80fb      	strh	r3, [r7, #6]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80bb      	strh	r3, [r7, #4]
    const uint32_t totalPixels = w * h;
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	88ba      	ldrh	r2, [r7, #4]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	623b      	str	r3, [r7, #32]
    const uint16_t blockSize = 512;  // maks. liczba pikseli na raz
 8004c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c0c:	83fb      	strh	r3, [r7, #30]

    const uint8_t* src = img;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
    uint32_t bitIndex = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t remaining = totalPixels;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28

    _drawTaskHandle = xTaskGetCurrentTaskHandle();
 8004c1a:	f009 f98f 	bl	800df3c <xTaskGetCurrentTaskHandle>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24

    startSpiTransaction();
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff56 	bl	8004ad6 <_ZN7GC9A01A19startSpiTransactionEv>
    setAddrWindow(0, 0, w, h);
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	88bb      	ldrh	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	2200      	movs	r2, #0
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fccd 	bl	80045d6 <_ZN7GC9A01A13setAddrWindowEtttt>
    setSpiDataSize(SPI_DATASIZE_16BIT);
 8004c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff ff3d 	bl	8004ac0 <_ZN7GC9A01A14setSpiDataSizeEm>

    while (remaining > 0) {
 8004c46:	e043      	b.n	8004cd0 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0xe8>
        uint16_t count = (remaining > blockSize) ? blockSize : remaining;
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4e:	bf28      	it	cs
 8004c50:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8004c54:	82fb      	strh	r3, [r7, #22]

        for (uint16_t i = 0; i < count; ++i) {
 8004c56:	2300      	movs	r3, #0
 8004c58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c5a:	e023      	b.n	8004ca4 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0xbc>
            uint8_t byte = src[bitIndex / 8];
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	757b      	strb	r3, [r7, #21]
            bool bit = (byte >> (7 - (bitIndex % 8))) & 0x01;
 8004c68:	7d7a      	ldrb	r2, [r7, #21]
 8004c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	fa42 f303 	asr.w	r3, r2, r3
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	753b      	strb	r3, [r7, #20]
            lineBuf[i] = bit ? color1 : color0;
 8004c84:	7d3b      	ldrb	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0xa6>
 8004c8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c8c:	e000      	b.n	8004c90 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0xa8>
 8004c8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c90:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004c92:	4916      	ldr	r1, [pc, #88]	@ (8004cec <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0x104>)
 8004c94:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            ++bitIndex;
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint16_t i = 0; i < count; ++i) {
 8004c9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004ca4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d3d7      	bcc.n	8004c5c <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0x74>
        }

        HAL_SPI_Transmit_DMA(hspi_, (uint8_t*)lineBuf, count * 2);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	8afb      	ldrh	r3, [r7, #22]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	490c      	ldr	r1, [pc, #48]	@ (8004cec <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0x104>)
 8004cba:	f005 ff6f 	bl	800ab9c <HAL_SPI_Transmit_DMA>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // czekaj na zakończenie DMA
 8004cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f009 fb0a 	bl	800e2dc <ulTaskNotifyTake>
        remaining -= count;
 8004cc8:	8afb      	ldrh	r3, [r7, #22]
 8004cca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (remaining > 0) {
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1b8      	bne.n	8004c48 <_ZN7GC9A01A14drawBitmap1bitEPKhtttt+0x60>
    }

    endSpiTransaction();
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ff0e 	bl	8004af8 <_ZN7GC9A01A17endSpiTransactionEv>
    _drawTaskHandle = nullptr;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004ce2:	bf00      	nop
 8004ce4:	3730      	adds	r7, #48	@ 0x30
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000988 	.word	0x20000988

08004cf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	@ 0x28
 8004cf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf6:	f107 0314 	add.w	r3, r7, #20
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d16:	4b3c      	ldr	r3, [pc, #240]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	4b38      	ldr	r3, [pc, #224]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	4a37      	ldr	r2, [pc, #220]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d32:	4b35      	ldr	r3, [pc, #212]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	4a30      	ldr	r2, [pc, #192]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	4a29      	ldr	r2, [pc, #164]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6a:	4b27      	ldr	r3, [pc, #156]	@ (8004e08 <MX_GPIO_Init+0x118>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8004d76:	2200      	movs	r2, #0
 8004d78:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8004d7c:	4823      	ldr	r0, [pc, #140]	@ (8004e0c <MX_GPIO_Init+0x11c>)
 8004d7e:	f003 fe63 	bl	8008a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d92:	f107 0314 	add.w	r3, r7, #20
 8004d96:	4619      	mov	r1, r3
 8004d98:	481d      	ldr	r0, [pc, #116]	@ (8004e10 <MX_GPIO_Init+0x120>)
 8004d9a:	f003 fca9 	bl	80086f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8004d9e:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8004da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da4:	2301      	movs	r3, #1
 8004da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4619      	mov	r1, r3
 8004db6:	4815      	ldr	r0, [pc, #84]	@ (8004e0c <MX_GPIO_Init+0x11c>)
 8004db8:	f003 fc9a 	bl	80086f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dbc:	2340      	movs	r3, #64	@ 0x40
 8004dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4810      	ldr	r0, [pc, #64]	@ (8004e10 <MX_GPIO_Init+0x120>)
 8004dd0:	f003 fc8e 	bl	80086f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004dd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de4:	f107 0314 	add.w	r3, r7, #20
 8004de8:	4619      	mov	r1, r3
 8004dea:	4809      	ldr	r0, [pc, #36]	@ (8004e10 <MX_GPIO_Init+0x120>)
 8004dec:	f003 fc80 	bl	80086f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004df0:	2200      	movs	r2, #0
 8004df2:	2105      	movs	r1, #5
 8004df4:	2028      	movs	r0, #40	@ 0x28
 8004df6:	f002 fdf9 	bl	80079ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dfa:	2028      	movs	r0, #40	@ 0x28
 8004dfc:	f002 fe12 	bl	8007a24 <HAL_NVIC_EnableIRQ>

}
 8004e00:	bf00      	nop
 8004e02:	3728      	adds	r7, #40	@ 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40020000 	.word	0x40020000
 8004e10:	40020800 	.word	0x40020800

08004e14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <MX_I2C1_Init+0x54>)
 8004e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e20:	4a12      	ldr	r2, [pc, #72]	@ (8004e6c <MX_I2C1_Init+0x58>)
 8004e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e50:	4804      	ldr	r0, [pc, #16]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e52:	f003 fe45 	bl	8008ae0 <HAL_I2C_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e5c:	f000 f9aa 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000d88 	.word	0x20000d88
 8004e68:	40005400 	.word	0x40005400
 8004e6c:	000186a0 	.word	0x000186a0

08004e70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	@ 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_I2C_MspInit+0x84>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d12c      	bne.n	8004eec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	4b18      	ldr	r3, [pc, #96]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	4a17      	ldr	r2, [pc, #92]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eb4:	2312      	movs	r3, #18
 8004eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	4619      	mov	r1, r3
 8004eca:	480c      	ldr	r0, [pc, #48]	@ (8004efc <HAL_I2C_MspInit+0x8c>)
 8004ecc:	f003 fc10 	bl	80086f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	4a07      	ldr	r2, [pc, #28]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_I2C_MspInit+0x88>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	@ 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40005400 	.word	0x40005400
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40020400 	.word	0x40020400

08004f00 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8004f04:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <MX_IWDG_Init+0x2c>)
 8004f06:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <MX_IWDG_Init+0x30>)
 8004f08:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8004f0a:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <MX_IWDG_Init+0x2c>)
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1499;
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <MX_IWDG_Init+0x2c>)
 8004f12:	f240 52db 	movw	r2, #1499	@ 0x5db
 8004f16:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004f18:	4804      	ldr	r0, [pc, #16]	@ (8004f2c <MX_IWDG_Init+0x2c>)
 8004f1a:	f004 fe05 	bl	8009b28 <HAL_IWDG_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8004f24:	f000 f946 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000ddc 	.word	0x20000ddc
 8004f30:	40003000 	.word	0x40003000

08004f34 <_ZN3LedC1EP12GPIO_TypeDeftt>:

#include "led.h"
#include "my_app.h"


Led::Led(GPIO_TypeDef *gpio_port, uint16_t gpio_num, uint16_t freq):
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	460b      	mov	r3, r1
 8004f44:	80fb      	strh	r3, [r7, #6]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80bb      	strh	r3, [r7, #4]
task_blink(NULL), gpio_port(gpio_port), gpio_num(gpio_num), freq(freq), status(GPIO_PIN_RESET){
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	811a      	strh	r2, [r3, #8]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88ba      	ldrh	r2, [r7, #4]
 8004f60:	815a      	strh	r2, [r3, #10]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	731a      	strb	r2, [r3, #12]
    xTaskCreate(
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2280      	movs	r2, #128	@ 0x80
 8004f74:	4904      	ldr	r1, [pc, #16]	@ (8004f88 <_ZN3LedC1EP12GPIO_TypeDeftt+0x54>)
 8004f76:	4805      	ldr	r0, [pc, #20]	@ (8004f8c <_ZN3LedC1EP12GPIO_TypeDeftt+0x58>)
 8004f78:	f008 f942 	bl	800d200 <xTaskCreate>
        128,                     // stos w słowach (nie bajtach!)
        this,                    // argument = this
		tskIDLE_PRIORITY + 1,    // priorytet
        &task_blink              // uchwyt na task
    );
};
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	08012e40 	.word	0x08012e40
 8004f8c:	08004f91 	.word	0x08004f91

08004f90 <_ZN3Led16blink_task_entryEPv>:

void Led::blink_task_entry(void *argument)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
    Led *instance = static_cast<Led*>(argument);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
    instance->blink_task();
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f805 	bl	8004fac <_ZN3Led10blink_taskEv>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <_ZN3Led10blink_taskEv>:

void Led::blink_task()
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
    {
        uint16_t local_freq;
        GPIO_PinState local_status;

        // Sekcja krytyczna — kopiujemy zmienne
        taskENTER_CRITICAL();
 8004fb4:	f009 fd30 	bl	800ea18 <vPortEnterCritical>
        local_freq = this->freq;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	895b      	ldrh	r3, [r3, #10]
 8004fbc:	81fb      	strh	r3, [r7, #14]
        local_status = this->status;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7b1b      	ldrb	r3, [r3, #12]
 8004fc2:	737b      	strb	r3, [r7, #13]
        taskEXIT_CRITICAL();
 8004fc4:	f009 fd5a 	bl	800ea7c <vPortExitCritical>

        if (local_freq != 0 && local_status == GPIO_PIN_SET) {
 8004fc8:	89fb      	ldrh	r3, [r7, #14]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d017      	beq.n	8004ffe <_ZN3Led10blink_taskEv+0x52>
 8004fce:	7b7b      	ldrb	r3, [r7, #13]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d114      	bne.n	8004ffe <_ZN3Led10blink_taskEv+0x52>
            HAL_GPIO_TogglePin(gpio_port, gpio_num);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	891b      	ldrh	r3, [r3, #8]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f003 fd4b 	bl	8008a7a <HAL_GPIO_TogglePin>
            vTaskDelay(pdMS_TO_TICKS(local_freq));
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <_ZN3Led10blink_taskEv+0x6c>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f008 fade 	bl	800d5b8 <vTaskDelay>
 8004ffc:	e00a      	b.n	8005014 <_ZN3Led10blink_taskEv+0x68>
        } else {
            HAL_GPIO_WritePin(gpio_port, gpio_num, local_status);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6858      	ldr	r0, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	891b      	ldrh	r3, [r3, #8]
 8005006:	7b7a      	ldrb	r2, [r7, #13]
 8005008:	4619      	mov	r1, r3
 800500a:	f003 fd1d 	bl	8008a48 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(100));  // zapobiega 100% CPU
 800500e:	2064      	movs	r0, #100	@ 0x64
 8005010:	f008 fad2 	bl	800d5b8 <vTaskDelay>
        }
    }
 8005014:	e7ce      	b.n	8004fb4 <_ZN3Led10blink_taskEv+0x8>
 8005016:	bf00      	nop
 8005018:	10624dd3 	.word	0x10624dd3

0800501c <_ZN3Led8set_freqEt>:
}

void Led::set_freq(uint16_t freq){
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
    taskENTER_CRITICAL();
 8005028:	f009 fcf6 	bl	800ea18 <vPortEnterCritical>
    this->freq = freq;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	815a      	strh	r2, [r3, #10]
    taskEXIT_CRITICAL();
 8005032:	f009 fd23 	bl	800ea7c <vPortExitCritical>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <_ZN3Led5startEv>:
    local = this->freq;
    taskEXIT_CRITICAL();
    return local;
}

void Led::start(){
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8005046:	f009 fce7 	bl	800ea18 <vPortEnterCritical>
    status = GPIO_PIN_SET;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	731a      	strb	r2, [r3, #12]
    taskEXIT_CRITICAL();
 8005050:	f009 fd14 	bl	800ea7c <vPortExitCritical>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005060:	f002 fba6 	bl	80077b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005064:	f000 f81a 	bl	800509c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005068:	f7ff fe42 	bl	8004cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 800506c:	f7fd fd68 	bl	8002b40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005070:	f002 f91e 	bl	80072b0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8005074:	f001 fdce 	bl	8006c14 <MX_SPI1_Init>
  MX_I2C1_Init();
 8005078:	f7ff fecc 	bl	8004e14 <MX_I2C1_Init>
  MX_TIM3_Init();
 800507c:	f002 f88e 	bl	800719c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8005080:	f002 f940 	bl	8007304 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8005084:	f002 f83c 	bl	8007100 <MX_TIM2_Init>
  MX_IWDG_Init();
 8005088:	f7ff ff3a 	bl	8004f00 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */


  main_cpp();
 800508c:	f000 f918 	bl	80052c0 <main_cpp>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005090:	f7ff f9ca 	bl	8004428 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005094:	f007 f93e 	bl	800c314 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <main+0x3c>

0800509c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b094      	sub	sp, #80	@ 0x50
 80050a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	2234      	movs	r2, #52	@ 0x34
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f00b faf8 	bl	80106a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050c0:	2300      	movs	r3, #0
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005174 <SystemClock_Config+0xd8>)
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005174 <SystemClock_Config+0xd8>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80050d0:	4b28      	ldr	r3, [pc, #160]	@ (8005174 <SystemClock_Config+0xd8>)
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80050dc:	2300      	movs	r3, #0
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4b25      	ldr	r3, [pc, #148]	@ (8005178 <SystemClock_Config+0xdc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80050e8:	4a23      	ldr	r2, [pc, #140]	@ (8005178 <SystemClock_Config+0xdc>)
 80050ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	4b21      	ldr	r3, [pc, #132]	@ (8005178 <SystemClock_Config+0xdc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050f8:	603b      	str	r3, [r7, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80050fc:	230a      	movs	r3, #10
 80050fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005100:	2301      	movs	r3, #1
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005104:	2310      	movs	r3, #16
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005108:	2301      	movs	r3, #1
 800510a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800510c:	2302      	movs	r3, #2
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005110:	2300      	movs	r3, #0
 8005112:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005114:	2310      	movs	r3, #16
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005118:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800511c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800511e:	2304      	movs	r3, #4
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005122:	2302      	movs	r3, #2
 8005124:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005126:	2302      	movs	r3, #2
 8005128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800512a:	f107 031c 	add.w	r3, r7, #28
 800512e:	4618      	mov	r0, r3
 8005130:	f005 f8c8 	bl	800a2c4 <HAL_RCC_OscConfig>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800513a:	f000 f83b 	bl	80051b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800513e:	230f      	movs	r3, #15
 8005140:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005142:	2302      	movs	r3, #2
 8005144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800514a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800514e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005154:	f107 0308 	add.w	r3, r7, #8
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f004 fd36 	bl	8009bcc <HAL_RCC_ClockConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8005166:	f000 f825 	bl	80051b4 <Error_Handler>
  }
}
 800516a:	bf00      	nop
 800516c:	3750      	adds	r7, #80	@ 0x50
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800
 8005178:	40007000 	.word	0x40007000

0800517c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800518e:	f002 fb31 	bl	80077f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519a:	d102      	bne.n	80051a2 <HAL_TIM_PeriodElapsedCallback+0x26>
	  tim2_fired = true;
 800519c:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40001000 	.word	0x40001000
 80051b0:	20000de8 	.word	0x20000de8

080051b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051b8:	b672      	cpsid	i
}
 80051ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <Error_Handler+0x8>

080051c0 <HAL_GPIO_EXTI_Callback>:
extern GC9A01A tft;


//Interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_11 && g_button)
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d0:	d108      	bne.n	80051e4 <HAL_GPIO_EXTI_Callback+0x24>
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <HAL_GPIO_EXTI_Callback+0x24>
    {
    	g_button->onInterrupt();
 80051da:	4b04      	ldr	r3, [pc, #16]	@ (80051ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd f8aa 	bl	8002338 <_ZN13ButtonHandler11onInterruptEv>
    }
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000e00 	.word	0x20000e00

080051f0 <HAL_SPI_TxCpltCallback>:



extern "C" void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

    if (hspi == &hspi1 && bmeDisplayTaskHandle != nullptr) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0f      	ldr	r2, [pc, #60]	@ (800523c <HAL_SPI_TxCpltCallback+0x4c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d116      	bne.n	8005232 <HAL_SPI_TxCpltCallback+0x42>
 8005204:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <HAL_SPI_TxCpltCallback+0x50>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_SPI_TxCpltCallback+0x42>
        vTaskNotifyGiveFromISR(bmeDisplayTaskHandle, &xHigherPriorityTaskWoken);
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_SPI_TxCpltCallback+0x50>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f107 020c 	add.w	r2, r7, #12
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f009 f9ce 	bl	800e5b8 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_SPI_TxCpltCallback+0x42>
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <HAL_SPI_TxCpltCallback+0x54>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
    }
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e14 	.word	0x20000e14
 8005240:	20000dfc 	.word	0x20000dfc
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vApplicationStackOverflowHook>:

extern "C" void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    // Możesz np. migać diodą, zatrzymać system, wysłać info po UART, itp.
    uartPrint("Stack overflow in task: %s\n", pcTaskName);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4802      	ldr	r0, [pc, #8]	@ (8005260 <vApplicationStackOverflowHook+0x18>)
 8005256:	f000 f8fd 	bl	8005454 <uartPrint>
    while (1);  // Zatrzymaj system
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vApplicationStackOverflowHook+0x12>
 800525e:	bf00      	nop
 8005260:	08012e48 	.word	0x08012e48

08005264 <_ZZ8main_cppENKUlPvE_clES_>:

    led_wifi.start();
    led_wifi.set_freq(100);
    //TASKS
    xTaskCreate(
        [](void *arg) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
            uartPrint("Watchdog task running inline\n");
 800526e:	4806      	ldr	r0, [pc, #24]	@ (8005288 <_ZZ8main_cppENKUlPvE_clES_+0x24>)
 8005270:	f000 f8f0 	bl	8005454 <uartPrint>
            WatchdogManager::instance().watchdogTask();
 8005274:	f002 f934 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 8005278:	4603      	mov	r3, r0
 800527a:	4618      	mov	r0, r3
 800527c:	f002 f9b8 	bl	80075f0 <_ZN15WatchdogManager12watchdogTaskEv>
        },
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	08012e74 	.word	0x08012e74

0800528c <_ZZ8main_cppENUlPvE_4_FUNES_>:
        [](void *arg) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
        },
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	2000      	movs	r0, #0
 8005298:	f7ff ffe4 	bl	8005264 <_ZZ8main_cppENKUlPvE_clES_>
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <_ZZ8main_cppENKUlPvE_cvPFvS_EEv>:
        [](void *arg) {
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
        },
 80052ac:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <_ZZ8main_cppENKUlPvE_cvPFvS_EEv+0x18>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	0800528d 	.word	0x0800528d

080052c0 <main_cpp>:
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af02      	add	r7, sp, #8
    uartMutex = xSemaphoreCreateMutex();
 80052c6:	2001      	movs	r0, #1
 80052c8:	f007 fa22 	bl	800c710 <xQueueCreateMutex>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4a43      	ldr	r2, [pc, #268]	@ (80053dc <main_cpp+0x11c>)
 80052d0:	6013      	str	r3, [r2, #0]
    logQueue = xQueueCreate(10, sizeof(ESPMessage));
 80052d2:	2200      	movs	r2, #0
 80052d4:	f240 2101 	movw	r1, #513	@ 0x201
 80052d8:	200a      	movs	r0, #10
 80052da:	f007 f9a1 	bl	800c620 <xQueueGenericCreate>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a3f      	ldr	r2, [pc, #252]	@ (80053e0 <main_cpp+0x120>)
 80052e2:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(&htim3);
 80052e4:	483f      	ldr	r0, [pc, #252]	@ (80053e4 <main_cpp+0x124>)
 80052e6:	f005 fecd 	bl	800b084 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80052ea:	483f      	ldr	r0, [pc, #252]	@ (80053e8 <main_cpp+0x128>)
 80052ec:	f005 ff32 	bl	800b154 <HAL_TIM_Base_Start_IT>
    HAL_UART_Transmit(&huart2, (uint8_t*)"Start main_cpp\n", 15, HAL_MAX_DELAY);
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	220f      	movs	r2, #15
 80052f6:	493d      	ldr	r1, [pc, #244]	@ (80053ec <main_cpp+0x12c>)
 80052f8:	483d      	ldr	r0, [pc, #244]	@ (80053f0 <main_cpp+0x130>)
 80052fa:	f006 fba1 	bl	800ba40 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"Before BME280_Init\n", 20, HAL_MAX_DELAY);
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	2214      	movs	r2, #20
 8005304:	493b      	ldr	r1, [pc, #236]	@ (80053f4 <main_cpp+0x134>)
 8005306:	483a      	ldr	r0, [pc, #232]	@ (80053f0 <main_cpp+0x130>)
 8005308:	f006 fb9a 	bl	800ba40 <HAL_UART_Transmit>
    BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER, BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
 800530c:	2303      	movs	r3, #3
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2303      	movs	r3, #3
 8005312:	2201      	movs	r2, #1
 8005314:	2101      	movs	r1, #1
 8005316:	4838      	ldr	r0, [pc, #224]	@ (80053f8 <main_cpp+0x138>)
 8005318:	f7fb ff4c 	bl	80011b4 <BME280_Init>
    HAL_UART_Transmit(&huart2, (uint8_t*)"After BME280_Init\n", 19, HAL_MAX_DELAY);
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	2213      	movs	r2, #19
 8005322:	4936      	ldr	r1, [pc, #216]	@ (80053fc <main_cpp+0x13c>)
 8005324:	4832      	ldr	r0, [pc, #200]	@ (80053f0 <main_cpp+0x130>)
 8005326:	f006 fb8b 	bl	800ba40 <HAL_UART_Transmit>
    BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 800532a:	2100      	movs	r1, #0
 800532c:	2006      	movs	r0, #6
 800532e:	f7fb ff1f 	bl	8001170 <BME280_SetConfig>
    HAL_FLASH_Unlock();
 8005332:	f002 ff49 	bl	80081c8 <HAL_FLASH_Unlock>
    EE_Init();  // wewnętrznie robi erase i zapis
 8005336:	f7fd fc23 	bl	8002b80 <EE_Init>
    HAL_FLASH_Lock();
 800533a:	f002 ff67 	bl	800820c <HAL_FLASH_Lock>
    led_wifi.start();
 800533e:	4830      	ldr	r0, [pc, #192]	@ (8005400 <main_cpp+0x140>)
 8005340:	f7ff fe7d 	bl	800503e <_ZN3Led5startEv>
    led_wifi.set_freq(100);
 8005344:	2164      	movs	r1, #100	@ 0x64
 8005346:	482e      	ldr	r0, [pc, #184]	@ (8005400 <main_cpp+0x140>)
 8005348:	f7ff fe68 	bl	800501c <_ZN3Led8set_freqEt>
    xTaskCreate(
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff ffa8 	bl	80052a4 <_ZZ8main_cppENKUlPvE_cvPFvS_EEv>
 8005354:	2300      	movs	r3, #0
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2301      	movs	r3, #1
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005362:	4928      	ldr	r1, [pc, #160]	@ (8005404 <main_cpp+0x144>)
 8005364:	f007 ff4c 	bl	800d200 <xTaskCreate>
        512,
        nullptr,
        tskIDLE_PRIORITY + 1,
        nullptr
    );
    xTaskCreate(
 8005368:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <main_cpp+0x148>)
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	2301      	movs	r3, #1
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005376:	4925      	ldr	r1, [pc, #148]	@ (800540c <main_cpp+0x14c>)
 8005378:	4825      	ldr	r0, [pc, #148]	@ (8005410 <main_cpp+0x150>)
 800537a:	f007 ff41 	bl	800d200 <xTaskCreate>
        512,
        nullptr,
        tskIDLE_PRIORITY + 1,
		&bmeDisplayTaskHandle
    );
    xTaskCreate(
 800537e:	2300      	movs	r3, #0
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2301      	movs	r3, #1
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <main_cpp+0x140>)
 8005388:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800538c:	4921      	ldr	r1, [pc, #132]	@ (8005414 <main_cpp+0x154>)
 800538e:	4822      	ldr	r0, [pc, #136]	@ (8005418 <main_cpp+0x158>)
 8005390:	f007 ff36 	bl	800d200 <xTaskCreate>
        1280,
		&led_wifi,
        tskIDLE_PRIORITY + 1,
        nullptr
    );
    xTaskCreate(
 8005394:	2300      	movs	r3, #0
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	2301      	movs	r3, #1
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2300      	movs	r3, #0
 800539e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053a2:	491e      	ldr	r1, [pc, #120]	@ (800541c <main_cpp+0x15c>)
 80053a4:	481e      	ldr	r0, [pc, #120]	@ (8005420 <main_cpp+0x160>)
 80053a6:	f007 ff2b 	bl	800d200 <xTaskCreate>
        512,
		nullptr,
        tskIDLE_PRIORITY + 1,
        nullptr
    );
    g_button = new ButtonHandler(GPIOC, GPIO_PIN_11, bmeDisplayTaskHandle);
 80053aa:	2014      	movs	r0, #20
 80053ac:	f009 fe6d 	bl	800f08a <_Znwj>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461c      	mov	r4, r3
 80053b4:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <main_cpp+0x148>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053bc:	4919      	ldr	r1, [pc, #100]	@ (8005424 <main_cpp+0x164>)
 80053be:	4620      	mov	r0, r4
 80053c0:	f7fc ff78 	bl	80022b4 <_ZN13ButtonHandlerC1EP12GPIO_TypeDeftP19tskTaskControlBlock>
 80053c4:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <main_cpp+0x168>)
 80053c6:	601c      	str	r4, [r3, #0]
    g_button->start();
 80053c8:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <main_cpp+0x168>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fc ff8f 	bl	80022f0 <_ZN13ButtonHandler5startEv>


    return 0;
 80053d2:	2300      	movs	r3, #0

}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	20000e08 	.word	0x20000e08
 80053e0:	20000e0c 	.word	0x20000e0c
 80053e4:	20000f60 	.word	0x20000f60
 80053e8:	20000f18 	.word	0x20000f18
 80053ec:	08012e94 	.word	0x08012e94
 80053f0:	20000fa8 	.word	0x20000fa8
 80053f4:	08012ea4 	.word	0x08012ea4
 80053f8:	20000d88 	.word	0x20000d88
 80053fc:	08012eb8 	.word	0x08012eb8
 8005400:	20000dec 	.word	0x20000dec
 8005404:	08012ecc 	.word	0x08012ecc
 8005408:	20000dfc 	.word	0x20000dfc
 800540c:	08012ed8 	.word	0x08012ed8
 8005410:	08002a61 	.word	0x08002a61
 8005414:	08012ee4 	.word	0x08012ee4
 8005418:	0800418d 	.word	0x0800418d
 800541c:	08012ef0 	.word	0x08012ef0
 8005420:	08005579 	.word	0x08005579
 8005424:	40020800 	.word	0x40020800
 8005428:	20000e00 	.word	0x20000e00

0800542c <_Z41__static_initialization_and_destruction_0v>:
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
Led led_wifi(GPIOA, GPIO_PIN_4,100);
 8005430:	2364      	movs	r3, #100	@ 0x64
 8005432:	2210      	movs	r2, #16
 8005434:	4902      	ldr	r1, [pc, #8]	@ (8005440 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8005436:	4803      	ldr	r0, [pc, #12]	@ (8005444 <_Z41__static_initialization_and_destruction_0v+0x18>)
 8005438:	f7ff fd7c 	bl	8004f34 <_ZN3LedC1EP12GPIO_TypeDeftt>
}
 800543c:	bf00      	nop
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40020000 	.word	0x40020000
 8005444:	20000dec 	.word	0x20000dec

08005448 <_GLOBAL__sub_I_led_wifi>:
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
 800544c:	f7ff ffee 	bl	800542c <_Z41__static_initialization_and_destruction_0v>
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <uartPrint>:

SemaphoreHandle_t uartMutex = nullptr;

QueueHandle_t logQueue = nullptr;

void uartPrint(const char* format, ...) {
 8005454:	b40f      	push	{r0, r1, r2, r3}
 8005456:	b580      	push	{r7, lr}
 8005458:	b0a2      	sub	sp, #136	@ 0x88
 800545a:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(uartMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800545c:	4b19      	ldr	r3, [pc, #100]	@ (80054c4 <uartPrint+0x70>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2164      	movs	r1, #100	@ 0x64
 8005462:	4618      	mov	r0, r3
 8005464:	f007 fb50 	bl	800cb08 <xQueueSemaphoreTake>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01e      	beq.n	80054b6 <uartPrint+0x62>
        char buffer[128];

        va_list args;
        va_start(args, format);
 8005478:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800547c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        vsnprintf(buffer, sizeof(buffer), format, args);
 8005480:	1d38      	adds	r0, r7, #4
 8005482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005486:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800548a:	2180      	movs	r1, #128	@ 0x80
 800548c:	f00b f8e0 	bl	8010650 <vsniprintf>
        va_end(args);

        HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t*>(buffer), strlen(buffer), HAL_MAX_DELAY);
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fa ff1c 	bl	80002d0 <strlen>
 8005498:	4603      	mov	r3, r0
 800549a:	b29a      	uxth	r2, r3
 800549c:	1d39      	adds	r1, r7, #4
 800549e:	f04f 33ff 	mov.w	r3, #4294967295
 80054a2:	4809      	ldr	r0, [pc, #36]	@ (80054c8 <uartPrint+0x74>)
 80054a4:	f006 facc 	bl	800ba40 <HAL_UART_Transmit>

        xSemaphoreGive(uartMutex);
 80054a8:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <uartPrint+0x70>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	2200      	movs	r2, #0
 80054b0:	2100      	movs	r1, #0
 80054b2:	f007 f945 	bl	800c740 <xQueueGenericSend>
    } else {
        // opcjonalnie: timeout, nie udało się zdobyć mutexa
    }

}
 80054b6:	bf00      	nop
 80054b8:	3788      	adds	r7, #136	@ 0x88
 80054ba:	46bd      	mov	sp, r7
 80054bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c0:	b004      	add	sp, #16
 80054c2:	4770      	bx	lr
 80054c4:	20000e08 	.word	0x20000e08
 80054c8:	20000fa8 	.word	0x20000fa8

080054cc <round2>:
#include "task.h"
#include "queue.h"
#include "semphr.h"

static inline float round2(float val)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	ed87 0a01 	vstr	s0, [r7, #4]
    return (float)((int)(val * 100 + (val >= 0 ? 0.5f : -0.5f))) / 100.0f;
 80054d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80054da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005520 <round2+0x54>
 80054de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80054e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	db02      	blt.n	80054f6 <round2+0x2a>
 80054f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054f4:	e001      	b.n	80054fa <round2+0x2e>
 80054f6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80054fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005506:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005520 <round2+0x54>
 800550a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800550e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005512:	eeb0 0a67 	vmov.f32	s0, s15
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	42c80000 	.word	0x42c80000

08005524 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
 8005528:	bf00      	nop
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	7039      	strb	r1, [r7, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	7138      	strb	r0, [r7, #4]
 8005554:	bf00      	nop
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_Z11Sensor_TaskPv>:

QueueHandle_t weatherQueue = nullptr;



void Sensor_Task(void *argument){
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b0af      	sub	sp, #188	@ 0xbc
 800557c:	af04      	add	r7, sp, #16
 800557e:	6078      	str	r0, [r7, #4]
	uartPrint("Sensor TASK Started!\n");
 8005580:	4856      	ldr	r0, [pc, #344]	@ (80056dc <_Z11Sensor_TaskPv+0x164>)
 8005582:	f7ff ff67 	bl	8005454 <uartPrint>
	WatchdogManager::instance().registerTask("SensorTask", xTaskGetCurrentTaskHandle(), 5);
 8005586:	f001 ffab 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 800558a:	4604      	mov	r4, r0
 800558c:	f008 fcd6 	bl	800df3c <xTaskGetCurrentTaskHandle>
 8005590:	4602      	mov	r2, r0
 8005592:	2305      	movs	r3, #5
 8005594:	4952      	ldr	r1, [pc, #328]	@ (80056e0 <_Z11Sensor_TaskPv+0x168>)
 8005596:	4620      	mov	r0, r4
 8005598:	f001 ffca 	bl	8007530 <_ZN15WatchdogManager12registerTaskEPKcP19tskTaskControlBlockm>
	uartPrint("Stack remaining in %s task: %u\n", "sensor_task", uxTaskGetStackHighWaterMark(nullptr));
 800559c:	2000      	movs	r0, #0
 800559e:	f008 fc5b 	bl	800de58 <uxTaskGetStackHighWaterMark>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	494f      	ldr	r1, [pc, #316]	@ (80056e4 <_Z11Sensor_TaskPv+0x16c>)
 80055a8:	484f      	ldr	r0, [pc, #316]	@ (80056e8 <_Z11Sensor_TaskPv+0x170>)
 80055aa:	f7ff ff53 	bl	8005454 <uartPrint>
	Med_Filter<float, 5> med_temp_filter;
 80055ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f8a8 	bl	8005708 <_ZN10Med_FilterIfLj5EEC1Ev>
	Med_Filter<float, 5> med_hum_filter;
 80055b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f8a3 	bl	8005708 <_ZN10Med_FilterIfLj5EEC1Ev>
	Med_Filter<int32_t, 5> med_pres_filter;
 80055c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f8b8 	bl	800573c <_ZN10Med_FilterIlLj5EEC1Ev>
	weatherQueue = xQueueCreate(1, sizeof(weatherData));
 80055cc:	2200      	movs	r2, #0
 80055ce:	210c      	movs	r1, #12
 80055d0:	2001      	movs	r0, #1
 80055d2:	f007 f825 	bl	800c620 <xQueueGenericCreate>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4a44      	ldr	r2, [pc, #272]	@ (80056ec <_Z11Sensor_TaskPv+0x174>)
 80055da:	6013      	str	r3, [r2, #0]
	configASSERT(weatherQueue != nullptr);
 80055dc:	4b43      	ldr	r3, [pc, #268]	@ (80056ec <_Z11Sensor_TaskPv+0x174>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10c      	bne.n	80055fe <_Z11Sensor_TaskPv+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <_Z11Sensor_TaskPv+0x82>
	for(;;){
        BME280_ReadTemperatureAndPressureAndHuminidity(&wData.temperature, &wData.pres, &wData.humidity);
 80055fe:	4a3c      	ldr	r2, [pc, #240]	@ (80056f0 <_Z11Sensor_TaskPv+0x178>)
 8005600:	493c      	ldr	r1, [pc, #240]	@ (80056f4 <_Z11Sensor_TaskPv+0x17c>)
 8005602:	483d      	ldr	r0, [pc, #244]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005604:	f7fc fa9a 	bl	8001b3c <BME280_ReadTemperatureAndPressureAndHuminidity>
        wData.pres = med_pres_filter.filter(BME280_GetSeaLevelPressure(74.0)/100);
 8005608:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80056fc <_Z11Sensor_TaskPv+0x184>
 800560c:	f7fc fe12 	bl	8002234 <BME280_GetSeaLevelPressure>
 8005610:	4603      	mov	r3, r0
 8005612:	4a3b      	ldr	r2, [pc, #236]	@ (8005700 <_Z11Sensor_TaskPv+0x188>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	461a      	mov	r2, r3
 800561c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f8a3 	bl	800576e <_ZN10Med_FilterIlLj5EE6filterEl>
 8005628:	4603      	mov	r3, r0
 800562a:	4a33      	ldr	r2, [pc, #204]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 800562c:	6093      	str	r3, [r2, #8]
        wData.temperature = round2(med_temp_filter.filter(wData.temperature));
 800562e:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005630:	edd3 7a00 	vldr	s15, [r3]
 8005634:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8005638:	eeb0 0a67 	vmov.f32	s0, s15
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f8ef 	bl	8005820 <_ZN10Med_FilterIfLj5EE6filterEf>
 8005642:	eef0 7a40 	vmov.f32	s15, s0
 8005646:	eeb0 0a67 	vmov.f32	s0, s15
 800564a:	f7ff ff3f 	bl	80054cc <round2>
 800564e:	eef0 7a40 	vmov.f32	s15, s0
 8005652:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005654:	edc3 7a00 	vstr	s15, [r3]
        wData.humidity = round2(med_hum_filter.filter(wData.humidity));
 8005658:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 800565a:	edd3 7a01 	vldr	s15, [r3, #4]
 800565e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005662:	eeb0 0a67 	vmov.f32	s0, s15
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f8da 	bl	8005820 <_ZN10Med_FilterIfLj5EE6filterEf>
 800566c:	eef0 7a40 	vmov.f32	s15, s0
 8005670:	eeb0 0a67 	vmov.f32	s0, s15
 8005674:	f7ff ff2a 	bl	80054cc <round2>
 8005678:	eef0 7a40 	vmov.f32	s15, s0
 800567c:	4b1e      	ldr	r3, [pc, #120]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 800567e:	edc3 7a01 	vstr	s15, [r3, #4]

        char data[70];
        sprintf(data, "temp: %.2f, pressure: %ld, humidity: %.2f\r\n", wData.temperature, wData.pres, wData.humidity);
 8005682:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa ff8e 	bl	80005a8 <__aeabi_f2d>
 800568c:	4604      	mov	r4, r0
 800568e:	460d      	mov	r5, r1
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005692:	689e      	ldr	r6, [r3, #8]
 8005694:	4b18      	ldr	r3, [pc, #96]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	f7fa ff85 	bl	80005a8 <__aeabi_f2d>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	f107 0008 	add.w	r0, r7, #8
 80056a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056aa:	9600      	str	r6, [sp, #0]
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	4914      	ldr	r1, [pc, #80]	@ (8005704 <_Z11Sensor_TaskPv+0x18c>)
 80056b2:	f00a ff39 	bl	8010528 <siprintf>
        //uartPrint(data);

        xQueueOverwrite(weatherQueue, &wData);
 80056b6:	4b0d      	ldr	r3, [pc, #52]	@ (80056ec <_Z11Sensor_TaskPv+0x174>)
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	2302      	movs	r3, #2
 80056bc:	2200      	movs	r2, #0
 80056be:	490e      	ldr	r1, [pc, #56]	@ (80056f8 <_Z11Sensor_TaskPv+0x180>)
 80056c0:	f007 f83e 	bl	800c740 <xQueueGenericSend>
        WatchdogManager::instance().notifyAlive("SensorTask");
 80056c4:	f001 ff0c 	bl	80074e0 <_ZN15WatchdogManager8instanceEv>
 80056c8:	4603      	mov	r3, r0
 80056ca:	4905      	ldr	r1, [pc, #20]	@ (80056e0 <_Z11Sensor_TaskPv+0x168>)
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 ff5b 	bl	8007588 <_ZN15WatchdogManager11notifyAliveEPKc>
        vTaskDelay(pdMS_TO_TICKS(2000));
 80056d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80056d6:	f007 ff6f 	bl	800d5b8 <vTaskDelay>

    }
 80056da:	e790      	b.n	80055fe <_Z11Sensor_TaskPv+0x86>
 80056dc:	08012efc 	.word	0x08012efc
 80056e0:	08012f14 	.word	0x08012f14
 80056e4:	08012f20 	.word	0x08012f20
 80056e8:	08012f2c 	.word	0x08012f2c
 80056ec:	20000e10 	.word	0x20000e10
 80056f0:	20000034 	.word	0x20000034
 80056f4:	20000038 	.word	0x20000038
 80056f8:	20000030 	.word	0x20000030
 80056fc:	42940000 	.word	0x42940000
 8005700:	51eb851f 	.word	0x51eb851f
 8005704:	08012f4c 	.word	0x08012f4c

08005708 <_ZN10Med_FilterIfLj5EEC1Ev>:
class Med_Filter {
    static_assert(std::is_arithmetic<T>::value, "Med_Filter requires a numeric type");
    static_assert(Sz % 2 == 1, "Size must be odd");

public:
    Med_Filter() : _filled(false), _idx(0) {
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
        _buffer.fill(0);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3308      	adds	r3, #8
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	60fa      	str	r2, [r7, #12]
 8005726:	f107 020c 	add.w	r2, r7, #12
 800572a:	4611      	mov	r1, r2
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f8d4 	bl	80058da <_ZNSt5arrayIfLj5EE4fillERKf>
    }
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_ZN10Med_FilterIlLj5EEC1Ev>:
    Med_Filter() : _filled(false), _idx(0) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	605a      	str	r2, [r3, #4]
        _buffer.fill(0);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3308      	adds	r3, #8
 8005754:	2200      	movs	r2, #0
 8005756:	60fa      	str	r2, [r7, #12]
 8005758:	f107 020c 	add.w	r2, r7, #12
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f8ce 	bl	8005900 <_ZNSt5arrayIlLj5EE4fillERKl>
    }
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <_ZN10Med_FilterIlLj5EE6filterEl>:

    T filter(T value) {
 800576e:	b580      	push	{r7, lr}
 8005770:	b08a      	sub	sp, #40	@ 0x28
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
        _buffer[_idx++] = value;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 0008 	add.w	r0, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6051      	str	r1, [r2, #4]
 8005788:	4619      	mov	r1, r3
 800578a:	f000 f8cc 	bl	8005926 <_ZNSt5arrayIlLj5EEixEj>
 800578e:	4602      	mov	r2, r0
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6013      	str	r3, [r2, #0]
        if (_idx >= Sz) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d905      	bls.n	80057a8 <_ZN10Med_FilterIlLj5EE6filterEl+0x3a>
            _idx = 0;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	605a      	str	r2, [r3, #4]
            _filled = true;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
        }

        size_t count = _filled ? Sz : _idx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <_ZN10Med_FilterIlLj5EE6filterEl+0x46>
 80057b0:	2305      	movs	r3, #5
 80057b2:	e001      	b.n	80057b8 <_ZN10Med_FilterIlLj5EE6filterEl+0x4a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	623b      	str	r3, [r7, #32]
        T tmp[Sz];
        for (size_t i = 0; i < count; ++i)
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057be:	e010      	b.n	80057e2 <_ZN10Med_FilterIlLj5EE6filterEl+0x74>
            tmp[i] = _buffer[i];
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3308      	adds	r3, #8
 80057c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f8ad 	bl	8005926 <_ZNSt5arrayIlLj5EEixEj>
 80057cc:	4603      	mov	r3, r0
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	3328      	adds	r3, #40	@ 0x28
 80057d6:	443b      	add	r3, r7
 80057d8:	f843 2c1c 	str.w	r2, [r3, #-28]
        for (size_t i = 0; i < count; ++i)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	3301      	adds	r3, #1
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d3ea      	bcc.n	80057c0 <_ZN10Med_FilterIlLj5EE6filterEl+0x52>

        std::nth_element(tmp, tmp + count / 2, tmp + count);
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	f107 020c 	add.w	r2, r7, #12
 80057f4:	18d1      	adds	r1, r2, r3
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	f107 020c 	add.w	r2, r7, #12
 80057fe:	441a      	add	r2, r3
 8005800:	f107 030c 	add.w	r3, r7, #12
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f89d 	bl	8005944 <_ZSt11nth_elementIPlEvT_S1_S1_>
        return tmp[count / 2];
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	3328      	adds	r3, #40	@ 0x28
 8005812:	443b      	add	r3, r7
 8005814:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    }
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN10Med_FilterIfLj5EE6filterEf>:
    T filter(T value) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	ed87 0a00 	vstr	s0, [r7]
        _buffer[_idx++] = value;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f103 0008 	add.w	r0, r3, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6051      	str	r1, [r2, #4]
 800583c:	4619      	mov	r1, r3
 800583e:	f000 f8a7 	bl	8005990 <_ZNSt5arrayIfLj5EEixEj>
 8005842:	4602      	mov	r2, r0
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6013      	str	r3, [r2, #0]
        if (_idx >= Sz) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d905      	bls.n	800585c <_ZN10Med_FilterIfLj5EE6filterEf+0x3c>
            _idx = 0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
            _filled = true;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
        size_t count = _filled ? Sz : _idx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <_ZN10Med_FilterIfLj5EE6filterEf+0x48>
 8005864:	2305      	movs	r3, #5
 8005866:	e001      	b.n	800586c <_ZN10Med_FilterIfLj5EE6filterEf+0x4c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	623b      	str	r3, [r7, #32]
        for (size_t i = 0; i < count; ++i)
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
 8005872:	e010      	b.n	8005896 <_ZN10Med_FilterIfLj5EE6filterEf+0x76>
            tmp[i] = _buffer[i];
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3308      	adds	r3, #8
 8005878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f888 	bl	8005990 <_ZNSt5arrayIfLj5EEixEj>
 8005880:	4603      	mov	r3, r0
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	3328      	adds	r3, #40	@ 0x28
 800588a:	443b      	add	r3, r7
 800588c:	3b1c      	subs	r3, #28
 800588e:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < count; ++i)
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	3301      	adds	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
 8005896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3ea      	bcc.n	8005874 <_ZN10Med_FilterIfLj5EE6filterEf+0x54>
        std::nth_element(tmp, tmp + count / 2, tmp + count);
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f107 020c 	add.w	r2, r7, #12
 80058a8:	18d1      	adds	r1, r2, r3
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	f107 020c 	add.w	r2, r7, #12
 80058b2:	441a      	add	r2, r3
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f878 	bl	80059ae <_ZSt11nth_elementIPfEvT_S1_S1_>
        return tmp[count / 2];
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	3328      	adds	r3, #40	@ 0x28
 80058c6:	443b      	add	r3, r7
 80058c8:	3b1c      	subs	r3, #28
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	ee07 3a90 	vmov	s15, r3
    }
 80058d0:	eeb0 0a67 	vmov.f32	s0, s15
 80058d4:	3728      	adds	r7, #40	@ 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_ZNSt5arrayIfLj5EE4fillERKf>:
      fill(const value_type& __u)
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f888 	bl	80059fa <_ZNSt5arrayIfLj5EE5beginEv>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
      size() const noexcept { return _Nm; }
 80058ee:	2305      	movs	r3, #5
      { std::fill_n(begin(), size(), __u); }
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	f000 f88e 	bl	8005a14 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZNSt5arrayIlLj5EE4fillERKl>:
      fill(const value_type& __u)
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f898 	bl	8005a40 <_ZNSt5arrayIlLj5EE5beginEv>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]
      size() const noexcept { return _Nm; }
 8005914:	2305      	movs	r3, #5
      { std::fill_n(begin(), size(), __u); }
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	f000 f89e 	bl	8005a5a <_ZSt6fill_nIPljlET_S1_T0_RKT1_>
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <_ZNSt5arrayIlLj5EEixEj>:
      operator[](size_type __n) noexcept
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
      }
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZSt11nth_elementIPlEvT_S1_S1_>:
   *  holds that `*j < *i` is false.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 8005944:	b5b0      	push	{r4, r5, r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __nth);
      __glibcxx_requires_valid_range(__nth, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      if (__first == __last || __nth == __last)
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d017      	beq.n	8005988 <_ZSt11nth_elementIPlEvT_S1_S1_+0x44>
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d013      	beq.n	8005988 <_ZSt11nth_elementIPlEvT_S1_S1_+0x44>
	return;

      std::__introselect(__first, __nth, __last,
			 std::__lg(__last - __first) * 2,
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	109b      	asrs	r3, r3, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f88c 	bl	8005a86 <_ZSt4__lgIiET_S0_>
 800596e:	4603      	mov	r3, r0
      std::__introselect(__first, __nth, __last,
 8005970:	005c      	lsls	r4, r3, #1
			 __gnu_cxx::__ops::__iter_less_iter());
 8005972:	f7ff fdd7 	bl	8005524 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      std::__introselect(__first, __nth, __last,
 8005976:	f88d 5000 	strb.w	r5, [sp]
 800597a:	4623      	mov	r3, r4
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f88e 	bl	8005aa2 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_>
 8005986:	e000      	b.n	800598a <_ZSt11nth_elementIPlEvT_S1_S1_+0x46>
	return;
 8005988:	bf00      	nop
    }
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bdb0      	pop	{r4, r5, r7, pc}

08005990 <_ZNSt5arrayIfLj5EEixEj>:
      operator[](size_type __n) noexcept
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
      }
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <_ZSt11nth_elementIPfEvT_S1_S1_>:
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 80059ae:	b5b0      	push	{r4, r5, r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af02      	add	r7, sp, #8
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
      if (__first == __last || __nth == __last)
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d017      	beq.n	80059f2 <_ZSt11nth_elementIPfEvT_S1_S1_+0x44>
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d013      	beq.n	80059f2 <_ZSt11nth_elementIPfEvT_S1_S1_+0x44>
			 std::__lg(__last - __first) * 2,
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	109b      	asrs	r3, r3, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f857 	bl	8005a86 <_ZSt4__lgIiET_S0_>
 80059d8:	4603      	mov	r3, r0
      std::__introselect(__first, __nth, __last,
 80059da:	005c      	lsls	r4, r3, #1
			 __gnu_cxx::__ops::__iter_less_iter());
 80059dc:	f7ff fda2 	bl	8005524 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      std::__introselect(__first, __nth, __last,
 80059e0:	f88d 5000 	strb.w	r5, [sp]
 80059e4:	4623      	mov	r3, r4
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f88f 	bl	8005b0e <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_>
 80059f0:	e000      	b.n	80059f4 <_ZSt11nth_elementIPfEvT_S1_S1_+0x46>
	return;
 80059f2:	bf00      	nop
    }
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bdb0      	pop	{r4, r5, r7, pc}

080059fa <_ZNSt5arrayIfLj5EE5beginEv>:
      begin() noexcept
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 8005a06:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005a14:	b5b0      	push	{r4, r5, r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8005a20:	68fc      	ldr	r4, [r7, #12]
 8005a22:	68b8      	ldr	r0, [r7, #8]
 8005a24:	f7ff fd9d 	bl	8005562 <_ZSt17__size_to_integerj>
 8005a28:	4601      	mov	r1, r0
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a2a:	bf00      	nop
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 f8a2 	bl	8005b7a <_ZSt10__fill_n_aIPfjfET_S1_T0_RKT1_St26random_access_iterator_tag>
 8005a36:	4603      	mov	r3, r0
			       std::__iterator_category(__first));
    }
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bdb0      	pop	{r4, r5, r7, pc}

08005a40 <_ZNSt5arrayIlLj5EE5beginEv>:
      begin() noexcept
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8005a4c:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <_ZSt6fill_nIPljlET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005a5a:	b5b0      	push	{r4, r5, r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8005a66:	68fc      	ldr	r4, [r7, #12]
 8005a68:	68b8      	ldr	r0, [r7, #8]
 8005a6a:	f7ff fd7a 	bl	8005562 <_ZSt17__size_to_integerj>
 8005a6e:	4601      	mov	r1, r0
 8005a70:	bf00      	nop
 8005a72:	462b      	mov	r3, r5
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f89c 	bl	8005bb4 <_ZSt10__fill_n_aIPljlET_S1_T0_RKT1_St26random_access_iterator_tag>
 8005a7c:	4603      	mov	r3, r0
    }
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bdb0      	pop	{r4, r5, r7, pc}

08005a86 <_ZSt4__lgIiET_S0_>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp
    __lg(_Tp __n)
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
    {
#if __cplusplus >= 201402L
      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f8ac 	bl	8005bee <_ZSt11__bit_widthIjEiT_>
 8005a96:	4603      	mov	r3, r0
 8005a98:	3b01      	subs	r3, #1
		    ? __builtin_clzll(+__n)
		    : (sizeof(+__n) == sizeof(long)
			 ? __builtin_clzl(+__n)
			 : __builtin_clz(+__n)));
#endif
    }
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_>:
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 8005aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
      while (__last - __first > 3)
 8005ab0:	e020      	b.n	8005af4 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x52>
	  if (__depth_limit == 0)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x2e>
	      std::__heap_select(__first, __nth + 1, __last, __comp);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	4633      	mov	r3, r6
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f8a4 	bl	8005c0e <_ZSt13__heap_selectIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>
	      std::iter_swap(__first, __nth);
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f8cb 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
	      return;
 8005ace:	e01b      	b.n	8005b08 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x66>
	  --__depth_limit;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	603b      	str	r3, [r7, #0]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8cf 	bl	8005c7e <_ZSt27__unguarded_partition_pivotIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>
 8005ae0:	6178      	str	r0, [r7, #20]
	  if (__cut <= __nth)
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d802      	bhi.n	8005af0 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x4e>
	    __first = __cut;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e001      	b.n	8005af4 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x52>
	    __last = __cut;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	607b      	str	r3, [r7, #4]
      while (__last - __first > 3)
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	dcd9      	bgt.n	8005ab2 <_ZSt13__introselectIPliN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x10>
      std::__insertion_sort(__first, __last, __comp);
 8005afe:	4622      	mov	r2, r4
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f8e2 	bl	8005ccc <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b0e <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_>:
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
 8005b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	603b      	str	r3, [r7, #0]
      while (__last - __first > 3)
 8005b1c:	e020      	b.n	8005b60 <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x52>
	  if (__depth_limit == 0)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x2e>
	      std::__heap_select(__first, __nth + 1, __last, __comp);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1d19      	adds	r1, r3, #4
 8005b28:	4633      	mov	r3, r6
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f90e 	bl	8005d4e <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>
	      std::iter_swap(__first, __nth);
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f935 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
	      return;
 8005b3a:	e01b      	b.n	8005b74 <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x66>
	  --__depth_limit;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	603b      	str	r3, [r7, #0]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8005b42:	462a      	mov	r2, r5
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f939 	bl	8005dbe <_ZSt27__unguarded_partition_pivotIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>
 8005b4c:	6178      	str	r0, [r7, #20]
	  if (__cut <= __nth)
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d802      	bhi.n	8005b5c <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x4e>
	    __first = __cut;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e001      	b.n	8005b60 <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x52>
	    __last = __cut;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	607b      	str	r3, [r7, #4]
      while (__last - __first > 3)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	dcd9      	bgt.n	8005b1e <_ZSt13__introselectIPfiN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_T1_+0x10>
      std::__insertion_sort(__first, __last, __comp);
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f94c 	bl	8005e0c <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>
    }
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b7a <_ZSt10__fill_n_aIPfjfET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <_ZSt10__fill_n_aIPfjfET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e00c      	b.n	8005bac <_ZSt10__fill_n_aIPfjfET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f975 	bl	8005e8e <_ZSt8__fill_aIPffEvT_S1_RKT0_>
      return __first + __n;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4413      	add	r3, r2
    }
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_ZSt10__fill_n_aIPljlET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <_ZSt10__fill_n_aIPljlET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	e00c      	b.n	8005be6 <_ZSt10__fill_n_aIPljlET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f967 	bl	8005eac <_ZSt8__fill_aIPllEvT_S1_RKT0_>
      return __first + __n;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4413      	add	r3, r2
    }
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <_ZSt11__bit_widthIjEiT_>:
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	60fb      	str	r3, [r7, #12]
      return _Nd - std::__countl_zero(__x);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f965 	bl	8005eca <_ZSt13__countl_zeroIjEiT_>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f1c3 0320 	rsb	r3, r3, #32
    }
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_ZSt13__heap_selectIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f96e 	bl	8005f04 <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e011      	b.n	8005c52 <_ZSt13__heap_selectIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x44>
	if (__comp(__i, __first))
 8005c2e:	463b      	mov	r3, r7
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f9a0 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <_ZSt13__heap_selectIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8005c40:	463b      	mov	r3, r7
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f9ac 	bl	8005fa4 <_ZSt10__pop_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d3e9      	bcc.n	8005c2e <_ZSt13__heap_selectIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x20>
    }
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9c2 	bl	8005ffa <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_ZSt27__unguarded_partition_pivotIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8005c7e:	b5b0      	push	{r4, r5, r7, lr}
 8005c80:	b088      	sub	sp, #32
 8005c82:	af02      	add	r7, sp, #8
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	109b      	asrs	r3, r3, #2
 8005c92:	0fda      	lsrs	r2, r3, #31
 8005c94:	4413      	add	r3, r2
 8005c96:	105b      	asrs	r3, r3, #1
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1d19      	adds	r1, r3, #4
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	f88d 4000 	strb.w	r4, [sp]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f9c2 	bl	8006038 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1d18      	adds	r0, r3, #4
 8005cb8:	462b      	mov	r3, r5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	f000 fa10 	bl	80060e2 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>
 8005cc2:	4603      	mov	r3, r0
    }
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bdb0      	pop	{r4, r5, r7, pc}

08005ccc <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8005ccc:	b5b0      	push	{r4, r5, r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d032      	beq.n	8005d46 <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x7a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e029      	b.n	8005d3c <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x70>
	  if (__comp(__i, __first))
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f943 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x5c>
		__val = _GLIBCXX_MOVE(*__i);
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f000 fa27 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005d00:	4603      	mov	r3, r0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa28 	bl	8006164 <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005d14:	f107 0310 	add.w	r3, r7, #16
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fa18 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e006      	b.n	8005d36 <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x6a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fc0f 	bl	800554c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8005d2e:	4621      	mov	r1, r4
 8005d30:	6978      	ldr	r0, [r7, #20]
 8005d32:	f000 fa2f 	bl	8006194 <_ZSt25__unguarded_linear_insertIPlN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d1d1      	bne.n	8005ce8 <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x1c>
 8005d44:	e000      	b.n	8005d48 <_ZSt16__insertion_sortIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x7c>
      if (__first == __last) return;
 8005d46:	bf00      	nop
    }
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bdb0      	pop	{r4, r5, r7, pc}

08005d4e <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa4a 	bl	80061fc <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e011      	b.n	8005d92 <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x44>
	if (__comp(__i, __first))
 8005d6e:	463b      	mov	r3, r7
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fa7e 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8005d80:	463b      	mov	r3, r7
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa8f 	bl	80062aa <_ZSt10__pop_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d3e9      	bcc.n	8005d6e <_ZSt13__heap_selectIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_T0_+0x20>
    }
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 faa7 	bl	8006304 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZSt27__unguarded_partition_pivotIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8005dbe:	b5b0      	push	{r4, r5, r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	109b      	asrs	r3, r3, #2
 8005dd2:	0fda      	lsrs	r2, r3, #31
 8005dd4:	4413      	add	r3, r2
 8005dd6:	105b      	asrs	r3, r3, #1
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1d19      	adds	r1, r3, #4
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	3b04      	subs	r3, #4
 8005de8:	f88d 4000 	strb.w	r4, [sp]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 faa7 	bl	8006342 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1d18      	adds	r0, r3, #4
 8005df8:	462b      	mov	r3, r5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	f000 faf5 	bl	80063ec <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>
 8005e02:	4603      	mov	r3, r0
    }
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}

08005e0c <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8005e0c:	b5b0      	push	{r4, r5, r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d032      	beq.n	8005e86 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x7a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3304      	adds	r3, #4
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e029      	b.n	8005e7c <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x70>
	  if (__comp(__i, __first))
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fa21 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d016      	beq.n	8005e68 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x5c>
		__val = _GLIBCXX_MOVE(*__i);
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f000 fb0c 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8005e40:	4603      	mov	r3, r0
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fb0d 	bl	800646e <_ZSt13move_backwardIPfS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005e54:	f107 0310 	add.w	r3, r7, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fafd 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e006      	b.n	8005e76 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x6a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f7ff fb6f 	bl	800554c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8005e6e:	4621      	mov	r1, r4
 8005e70:	6978      	ldr	r0, [r7, #20]
 8005e72:	f000 fb14 	bl	800649e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1d1      	bne.n	8005e28 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x1c>
 8005e84:	e000      	b.n	8005e88 <_ZSt16__insertion_sortIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_T0_+0x7c>
      if (__first == __last) return;
 8005e86:	bf00      	nop
    }
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bdb0      	pop	{r4, r5, r7, pc}

08005e8e <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fb31 	bl	8006506 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <_ZSt8__fill_aIPllEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fb3d 	bl	800653c <_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <_ZSt13__countl_zeroIjEiT_>:
    __countl_zero(_Tp __x) noexcept
 8005eca:	b480      	push	{r7}
 8005ecc:	b089      	sub	sp, #36	@ 0x24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
 8005ed2:	2320      	movs	r3, #32
 8005ed4:	61bb      	str	r3, [r7, #24]
      if (__x == 0)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <_ZSt13__countl_zeroIjEiT_+0x16>
        return _Nd;
 8005edc:	2320      	movs	r3, #32
 8005ede:	e00b      	b.n	8005ef8 <_ZSt13__countl_zeroIjEiT_+0x2e>
      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
 8005ee0:	2340      	movs	r3, #64	@ 0x40
 8005ee2:	61fb      	str	r3, [r7, #28]
      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
 8005ee4:	2320      	movs	r3, #32
 8005ee6:	617b      	str	r3, [r7, #20]
      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	613b      	str	r3, [r7, #16]
	  constexpr int __diff = _Nd_u - _Nd;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
	  return __builtin_clz(__x) - __diff;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	fab3 f383 	clz	r3, r3
 8005ef6:	bf00      	nop
    }
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3724      	adds	r7, #36	@ 0x24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b08b      	sub	sp, #44	@ 0x2c
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	  _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	  _DistanceType;

      if (__last - __first < 2)
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	dd29      	ble.n	8005f6e <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x6a>
	return;

      const _DistanceType __len = __last - __first;
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	109b      	asrs	r3, r3, #2
 8005f22:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	3b02      	subs	r3, #2
 8005f28:	0fda      	lsrs	r2, r3, #31
 8005f2a:	4413      	add	r3, r2
 8005f2c:	105b      	asrs	r3, r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f908 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	617b      	str	r3, [r7, #20]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f900 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f88d 4000 	strb.w	r4, [sp]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fb09 	bl	8006572 <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
			     __comp);
	  if (__parent == 0)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x6e>
	    return;
	  __parent--;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
      while (true)
 8005f6c:	e7e0      	b.n	8005f30 <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x2c>
	return;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <_ZSt11__make_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x70>
	    return;
 8005f72:	bf00      	nop
	}
    }
 8005f74:	3724      	adds	r7, #36	@ 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}

08005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	bfb4      	ite	lt
 8005f92:	2301      	movlt	r3, #1
 8005f94:	2300      	movge	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <_ZSt10__pop_heapIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005fa4:	b5b0      	push	{r4, r5, r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8cb 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8c5 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	109b      	asrs	r3, r3, #2
 8005fd4:	461c      	mov	r4, r3
			 _GLIBCXX_MOVE(__value), __comp);
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f8b7 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8005fe0:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f88d 5000 	strb.w	r5, [sp]
 8005fe8:	4622      	mov	r2, r4
 8005fea:	2100      	movs	r1, #0
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fac0 	bl	8006572 <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
    }
 8005ff2:	bf00      	nop
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bdb0      	pop	{r4, r5, r7, pc}

08005ffa <_ZSt4swapIlENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8a2 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 800600a:	4603      	mov	r3, r0
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006010:	6838      	ldr	r0, [r7, #0]
 8006012:	f000 f89c 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006016:	4603      	mov	r3, r0
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f893 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006028:	4603      	mov	r3, r0
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	601a      	str	r2, [r3, #0]
    }
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	f107 0018 	add.w	r0, r7, #24
 800604e:	f7ff ff94 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x62>
	  if (__comp(__b, __c))
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	f107 0018 	add.w	r0, r7, #24
 8006060:	f7ff ff8b 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fdf9 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 8006072:	e032      	b.n	80060da <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	  else if (__comp(__a, __c))
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	f107 0018 	add.w	r0, r7, #24
 800607c:	f7ff ff7d 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d004      	beq.n	8006090 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x58>
	    std::iter_swap(__result, __c);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fdeb 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 800608e:	e024      	b.n	80060da <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fde6 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 8006098:	e01f      	b.n	80060da <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__a, __c))
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	f107 0018 	add.w	r0, r7, #24
 80060a2:	f7ff ff6a 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x7e>
	std::iter_swap(__result, __a);
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fdd8 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 80060b4:	e011      	b.n	80060da <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__b, __c))
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	f107 0018 	add.w	r0, r7, #24
 80060be:	f7ff ff5c 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x9a>
	std::iter_swap(__result, __c);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fdca 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 80060d0:	e003      	b.n	80060da <_ZSt22__move_median_to_firstIPlN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	std::iter_swap(__result, __b);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff fdc5 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
    }
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 80060f0:	e002      	b.n	80060f8 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x16>
	    ++__first;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 80060f8:	463b      	mov	r3, r7
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff ff3b 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f3      	bne.n	80060f2 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x10>
	  --__last;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3b04      	subs	r3, #4
 800610e:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8006110:	e002      	b.n	8006118 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x36>
	    --__last;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3b04      	subs	r3, #4
 8006116:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8006118:	463b      	mov	r3, r7
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff2b 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f3      	bne.n	8006112 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x30>
	  if (!(__first < __last))
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d301      	bcc.n	8006136 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x54>
	    return __first;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	e007      	b.n	8006146 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x64>
	  std::iter_swap(__first, __last);
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fd93 	bl	8005c64 <_ZSt9iter_swapIPlS0_EvT_T0_>
	  ++__first;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3304      	adds	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8006144:	e7d8      	b.n	80060f8 <_ZSt21__unguarded_partitionIPlN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x16>
    }
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <_ZSt13move_backwardIPlS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fa80 	bl	8006676 <_ZSt12__miter_baseIPlET_S1_>
 8006176:	4604      	mov	r4, r0
 8006178:	68b8      	ldr	r0, [r7, #8]
 800617a:	f000 fa7c 	bl	8006676 <_ZSt12__miter_baseIPlET_S1_>
 800617e:	4603      	mov	r3, r0
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4619      	mov	r1, r3
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fa81 	bl	800668c <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>
 800618a:	4603      	mov	r3, r0
    }
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bd90      	pop	{r4, r7, pc}

08006194 <_ZSt25__unguarded_linear_insertIPlN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ffd5 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 80061a4:	4603      	mov	r3, r0
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60bb      	str	r3, [r7, #8]
      _RandomAccessIterator __next = __last;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]
      --__next;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 80061b4:	e00b      	b.n	80061ce <_ZSt25__unguarded_linear_insertIPlN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x3a>
	  *__last = _GLIBCXX_MOVE(*__next);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ffc9 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 80061bc:	4603      	mov	r3, r0
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
	  __last = __next;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	607b      	str	r3, [r7, #4]
	  --__next;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b04      	subs	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 80061ce:	f107 0108 	add.w	r1, r7, #8
 80061d2:	463b      	mov	r3, r7
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fa7b 	bl	80066d2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIlPlEEbRT_T0_>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e9      	bne.n	80061b6 <_ZSt25__unguarded_linear_insertIPlN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x22>
      *__last = _GLIBCXX_MOVE(__val);
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ffb1 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 80061ec:	4603      	mov	r3, r0
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
    }
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b089      	sub	sp, #36	@ 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b04      	cmp	r3, #4
 8006210:	dd2b      	ble.n	800626a <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x6e>
      const _DistanceType __len = __last - __first;
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	109b      	asrs	r3, r3, #2
 800621a:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	3b02      	subs	r3, #2
 8006220:	0fda      	lsrs	r2, r3, #31
 8006222:	4413      	add	r3, r2
 8006224:	105b      	asrs	r3, r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 f911 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006236:	4603      	mov	r3, r0
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	617b      	str	r3, [r7, #20]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f909 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006246:	4603      	mov	r3, r0
 8006248:	edd3 7a00 	vldr	s15, [r3]
 800624c:	4623      	mov	r3, r4
 800624e:	eeb0 0a67 	vmov.f32	s0, s15
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	69f9      	ldr	r1, [r7, #28]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fa50 	bl	80066fc <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
	  if (__parent == 0)
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x72>
	  __parent--;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3b01      	subs	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
      while (true)
 8006268:	e7de      	b.n	8006228 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x2c>
	return;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <_ZSt11__make_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_RT0_+0x74>
	    return;
 800626e:	bf00      	nop
    }
 8006270:	3724      	adds	r7, #36	@ 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}

08006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	ed93 7a00 	vldr	s14, [r3]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	edd3 7a00 	vldr	s15, [r3]
 800628e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	bf4c      	ite	mi
 8006298:	2301      	movmi	r3, #1
 800629a:	2300      	movpl	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZSt10__pop_heapIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80062aa:	b5b0      	push	{r4, r5, r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8cd 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80062be:	4603      	mov	r3, r0
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f8c7 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80062ca:	4603      	mov	r3, r0
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
			 _DistanceType(__last - __first),
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	109b      	asrs	r3, r3, #2
 80062da:	461c      	mov	r4, r3
			 _GLIBCXX_MOVE(__value), __comp);
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f8b9 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80062e6:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80062e8:	edd3 7a00 	vldr	s15, [r3]
 80062ec:	462b      	mov	r3, r5
 80062ee:	eeb0 0a67 	vmov.f32	s0, s15
 80062f2:	4622      	mov	r2, r4
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa00 	bl	80066fc <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>
    }
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bdb0      	pop	{r4, r5, r7, pc}

08006304 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8a2 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006314:	4603      	mov	r3, r0
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800631a:	6838      	ldr	r0, [r7, #0]
 800631c:	f000 f89c 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006320:	4603      	mov	r3, r0
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006328:	f107 030c 	add.w	r3, r7, #12
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f893 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006332:	4603      	mov	r3, r0
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	601a      	str	r2, [r3, #0]
    }
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	f107 0018 	add.w	r0, r7, #24
 8006358:	f7ff ff8d 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d020      	beq.n	80063a4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x62>
	  if (__comp(__b, __c))
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	f107 0018 	add.w	r0, r7, #24
 800636a:	f7ff ff84 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fd14 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 800637c:	e032      	b.n	80063e4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	  else if (__comp(__a, __c))
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	f107 0018 	add.w	r0, r7, #24
 8006386:	f7ff ff76 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x58>
	    std::iter_swap(__result, __c);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fd06 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 8006398:	e024      	b.n	80063e4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fd01 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 80063a2:	e01f      	b.n	80063e4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__a, __c))
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	f107 0018 	add.w	r0, r7, #24
 80063ac:	f7ff ff63 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x7e>
	std::iter_swap(__result, __a);
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff fcf3 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 80063be:	e011      	b.n	80063e4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
      else if (__comp(__b, __c))
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	f107 0018 	add.w	r0, r7, #24
 80063c8:	f7ff ff55 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0x9a>
	std::iter_swap(__result, __c);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fce5 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 80063da:	e003      	b.n	80063e4 <_ZSt22__move_median_to_firstIPfN9__gnu_cxx5__ops15_Iter_less_iterEEvT_S4_S4_S4_T0_+0xa2>
	std::iter_swap(__result, __b);
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fce0 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
    }
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 80063fa:	e002      	b.n	8006402 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x16>
	    ++__first;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3304      	adds	r3, #4
 8006400:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8006402:	463b      	mov	r3, r7
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff34 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f3      	bne.n	80063fc <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x10>
	  --__last;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3b04      	subs	r3, #4
 8006418:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 800641a:	e002      	b.n	8006422 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x36>
	    --__last;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3b04      	subs	r3, #4
 8006420:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8006422:	463b      	mov	r3, r7
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff ff24 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f3      	bne.n	800641c <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x30>
	  if (!(__first < __last))
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d301      	bcc.n	8006440 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x54>
	    return __first;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	e007      	b.n	8006450 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x64>
	  std::iter_swap(__first, __last);
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fcae 	bl	8005da4 <_ZSt9iter_swapIPfS0_EvT_T0_>
	  ++__first;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3304      	adds	r3, #4
 800644c:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 800644e:	e7d8      	b.n	8006402 <_ZSt21__unguarded_partitionIPfN9__gnu_cxx5__ops15_Iter_less_iterEET_S4_S4_S4_T0_+0x16>
    }
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <_ZSt13move_backwardIPfS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800646e:	b590      	push	{r4, r7, lr}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f9c3 	bl	8006806 <_ZSt12__miter_baseIPfET_S1_>
 8006480:	4604      	mov	r4, r0
 8006482:	68b8      	ldr	r0, [r7, #8]
 8006484:	f000 f9bf 	bl	8006806 <_ZSt12__miter_baseIPfET_S1_>
 8006488:	4603      	mov	r3, r0
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4619      	mov	r1, r3
 800648e:	4620      	mov	r0, r4
 8006490:	f000 f9c4 	bl	800681c <_ZSt22__copy_move_backward_aILb1EPfS0_ET1_T0_S2_S1_>
 8006494:	4603      	mov	r3, r0
    }
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}

0800649e <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ffd5 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80064ae:	4603      	mov	r3, r0
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60bb      	str	r3, [r7, #8]
      _RandomAccessIterator __next = __last;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]
      --__next;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b04      	subs	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 80064be:	e00b      	b.n	80064d8 <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x3a>
	  *__last = _GLIBCXX_MOVE(*__next);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ffc9 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80064c6:	4603      	mov	r3, r0
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
	  __last = __next;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	607b      	str	r3, [r7, #4]
	  --__next;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3b04      	subs	r3, #4
 80064d6:	60fb      	str	r3, [r7, #12]
      while (__comp(__val, __next))
 80064d8:	f107 0108 	add.w	r1, r7, #8
 80064dc:	463b      	mov	r3, r7
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f9be 	bl	8006862 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfPfEEbRT_T0_>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e9      	bne.n	80064c0 <_ZSt25__unguarded_linear_insertIPfN9__gnu_cxx5__ops14_Val_less_iterEEvT_T0_+0x22>
      *__last = _GLIBCXX_MOVE(__val);
 80064ec:	f107 0308 	add.w	r3, r7, #8
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ffb1 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
    }
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8006518:	e005      	b.n	8006526 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x20>
	*__first = __tmp;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3304      	adds	r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d1f5      	bne.n	800651a <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800654e:	e005      	b.n	800655c <_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x20>
	*__first = __tmp;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3304      	adds	r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d1f5      	bne.n	8006550 <_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8006572:	b590      	push	{r4, r7, lr}
 8006574:	b08b      	sub	sp, #44	@ 0x2c
 8006576:	af02      	add	r7, sp, #8
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	603b      	str	r3, [r7, #0]
      const _Distance __topIndex = __holeIndex;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8006588:	e029      	b.n	80065de <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x6c>
	  __secondChild = 2 * (__secondChild + 1);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065a0:	3b01      	subs	r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
	  if (__comp(__first + __secondChild,
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80065ae:	f7ff fce4 	bl	8005f7a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPlS3_EEbT_T0_>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x4c>
	    __secondChild--;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fdc1 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 80065cc:	4601      	mov	r1, r0
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	680a      	ldr	r2, [r1, #0]
 80065d8:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	0fda      	lsrs	r2, r3, #31
 80065e4:	4413      	add	r3, r2
 80065e6:	105b      	asrs	r3, r3, #1
 80065e8:	461a      	mov	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	dbcc      	blt.n	800658a <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x18>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d120      	bne.n	800663c <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xca>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3b02      	subs	r3, #2
 80065fe:	0fda      	lsrs	r2, r3, #31
 8006600:	4413      	add	r3, r2
 8006602:	105b      	asrs	r3, r3, #1
 8006604:	461a      	mov	r2, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4293      	cmp	r3, r2
 800660a:	d117      	bne.n	800663c <_ZSt13__adjust_heapIPlilN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xca>
	  __secondChild = 2 * (__secondChild + 1);
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	3301      	adds	r3, #1
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800661a:	3b01      	subs	r3, #1
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fd93 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006628:	4601      	mov	r1, r0
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	680a      	ldr	r2, [r1, #0]
 8006634:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	3b01      	subs	r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 800663c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8006640:	f000 f929 	bl	8006896 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4621      	mov	r1, r4
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe ff72 	bl	8005534 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8006650:	463b      	mov	r3, r7
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fd7b 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006658:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f91f 	bl	80068ac <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>
    }
 800666e:	bf00      	nop
 8006670:	3724      	adds	r7, #36	@ 0x24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd90      	pop	{r4, r7, pc}

08006676 <_ZSt12__miter_baseIPlET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <_ZSt22__copy_move_backward_aILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800668c:	b5b0      	push	{r4, r5, r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f94f 	bl	800693c <_ZSt12__niter_baseIPlET_S1_>
 800669e:	4604      	mov	r4, r0
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f000 f94b 	bl	800693c <_ZSt12__niter_baseIPlET_S1_>
 80066a6:	4605      	mov	r5, r0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f946 	bl	800693c <_ZSt12__niter_baseIPlET_S1_>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	4629      	mov	r1, r5
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 f94b 	bl	8006952 <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>
 80066bc:	4602      	mov	r2, r0
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f955 	bl	8006972 <_ZSt12__niter_wrapIPlET_RKS1_S1_>
 80066c8:	4603      	mov	r3, r0
    }
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bdb0      	pop	{r4, r5, r7, pc}

080066d2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIlPlEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	bfb4      	ite	lt
 80066ea:	2301      	movlt	r3, #1
 80066ec:	2300      	movge	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b08b      	sub	sp, #44	@ 0x2c
 8006700:	af00      	add	r7, sp, #0
 8006702:	6178      	str	r0, [r7, #20]
 8006704:	6139      	str	r1, [r7, #16]
 8006706:	60fa      	str	r2, [r7, #12]
 8006708:	ed87 0a02 	vstr	s0, [r7, #8]
 800670c:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	623b      	str	r3, [r7, #32]
      _Distance __secondChild = __holeIndex;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__secondChild < (__len - 1) / 2)
 8006716:	e028      	b.n	800676a <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x6e>
	  __secondChild = 2 * (__secondChild + 1);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	3301      	adds	r3, #1
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__comp(__first + __secondChild,
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800672e:	3b01      	subs	r3, #1
 8006730:	009b      	lsls	r3, r3, #2
	  if (__comp(__first + __secondChild,
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	441a      	add	r2, r3
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fd9c 	bl	8006276 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPfS3_EEbT_T0_>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x4e>
	    __secondChild--;
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	3b01      	subs	r3, #1
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fe80 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006758:	4601      	mov	r1, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	680a      	ldr	r2, [r1, #0]
 8006764:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b01      	subs	r3, #1
 800676e:	0fda      	lsrs	r2, r3, #31
 8006770:	4413      	add	r3, r2
 8006772:	105b      	asrs	r3, r3, #1
 8006774:	461a      	mov	r2, r3
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	4293      	cmp	r3, r2
 800677a:	dbcd      	blt.n	8006718 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d120      	bne.n	80067c8 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xcc>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b02      	subs	r3, #2
 800678a:	0fda      	lsrs	r2, r3, #31
 800678c:	4413      	add	r3, r2
 800678e:	105b      	asrs	r3, r3, #1
 8006790:	461a      	mov	r2, r3
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	4293      	cmp	r3, r2
 8006796:	d117      	bne.n	80067c8 <_ZSt13__adjust_heapIPfifN9__gnu_cxx5__ops15_Iter_less_iterEEvT_T0_S5_T1_T2_+0xcc>
	  __secondChild = 2 * (__secondChild + 1);
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	3b01      	subs	r3, #1
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fe52 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80067b4:	4601      	mov	r1, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4413      	add	r3, r2
 80067be:	680a      	ldr	r2, [r1, #0]
 80067c0:	601a      	str	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	3b01      	subs	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f863 	bl	8006896 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 80067d0:	f107 031c 	add.w	r3, r7, #28
 80067d4:	4621      	mov	r1, r4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe feac 	bl	8005534 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fe39 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80067e6:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80067e8:	edd3 7a00 	vldr	s15, [r3]
 80067ec:	f107 031c 	add.w	r3, r7, #28
 80067f0:	eeb0 0a67 	vmov.f32	s0, s15
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	6939      	ldr	r1, [r7, #16]
 80067f8:	6978      	ldr	r0, [r7, #20]
 80067fa:	f000 f8c6 	bl	800698a <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>
    }
 80067fe:	bf00      	nop
 8006800:	372c      	adds	r7, #44	@ 0x2c
 8006802:	46bd      	mov	sp, r7
 8006804:	bd90      	pop	{r4, r7, pc}

08006806 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <_ZSt22__copy_move_backward_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800681c:	b5b0      	push	{r4, r5, r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f8fa 	bl	8006a22 <_ZSt12__niter_baseIPfET_S1_>
 800682e:	4604      	mov	r4, r0
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	f000 f8f6 	bl	8006a22 <_ZSt12__niter_baseIPfET_S1_>
 8006836:	4605      	mov	r5, r0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f8f1 	bl	8006a22 <_ZSt12__niter_baseIPfET_S1_>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	4629      	mov	r1, r5
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f8f6 	bl	8006a38 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800684c:	4602      	mov	r2, r0
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f900 	bl	8006a58 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8006858:	4603      	mov	r3, r0
    }
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bdb0      	pop	{r4, r5, r7, pc}

08006862 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfPfEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	ed93 7a00 	vldr	s14, [r3]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	edd3 7a00 	vldr	s15, [r3]
 800687a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800687e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006882:	bf4c      	ite	mi
 8006884:	2301      	movmi	r3, #1
 8006886:	2300      	movpl	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
      _Distance __parent = (__holeIndex - 1) / 2;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	3b01      	subs	r3, #1
 80068be:	0fda      	lsrs	r2, r3, #31
 80068c0:	4413      	add	r3, r2
 80068c2:	105b      	asrs	r3, r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80068c6:	e015      	b.n	80068f4 <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x48>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fc3c 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 80068d6:	4601      	mov	r1, r0
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	680a      	ldr	r2, [r1, #0]
 80068e2:	601a      	str	r2, [r3, #0]
	  __holeIndex = __parent;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	0fda      	lsrs	r2, r3, #31
 80068ee:	4413      	add	r3, r2
 80068f0:	105b      	asrs	r3, r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	dd0d      	ble.n	8006918 <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x6c>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	463a      	mov	r2, r7
 8006906:	4619      	mov	r1, r3
 8006908:	6a38      	ldr	r0, [r7, #32]
 800690a:	f000 f8b1 	bl	8006a70 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPllEEbT_RT0_>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x6c>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x6e>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1d4      	bne.n	80068c8 <_ZSt11__push_heapIPlilN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x1c>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800691e:	463b      	mov	r3, r7
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fc14 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006926:	4601      	mov	r1, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	680a      	ldr	r2, [r1, #0]
 8006932:	601a      	str	r2, [r3, #0]
    }
 8006934:	bf00      	nop
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZSt12__niter_baseIPlET_S1_>:
    __niter_base(_Iterator __it)
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_ZSt23__copy_move_backward_a1ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f899 	bl	8006a9a <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>
 8006968:	4603      	mov	r3, r0
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <_ZSt12__niter_wrapIPlET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800698a:	b580      	push	{r7, lr}
 800698c:	b088      	sub	sp, #32
 800698e:	af00      	add	r7, sp, #0
 8006990:	6178      	str	r0, [r7, #20]
 8006992:	6139      	str	r1, [r7, #16]
 8006994:	60fa      	str	r2, [r7, #12]
 8006996:	ed87 0a02 	vstr	s0, [r7, #8]
 800699a:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	0fda      	lsrs	r2, r3, #31
 80069a2:	4413      	add	r3, r2
 80069a4:	105b      	asrs	r3, r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80069a8:	e015      	b.n	80069d6 <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x4c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fd50 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80069b8:	4601      	mov	r1, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	680a      	ldr	r2, [r1, #0]
 80069c4:	601a      	str	r2, [r3, #0]
	  __holeIndex = __parent;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	0fda      	lsrs	r2, r3, #31
 80069d0:	4413      	add	r3, r2
 80069d2:	105b      	asrs	r3, r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	429a      	cmp	r2, r3
 80069dc:	dd0e      	ble.n	80069fc <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x72>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f107 0208 	add.w	r2, r7, #8
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f864 	bl	8006aba <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPffEEbT_RT0_>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x72>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x74>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1d3      	bne.n	80069aa <_ZSt11__push_heapIPfifN9__gnu_cxx5__ops14_Iter_less_valEEvT_T0_S5_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fd26 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	680a      	ldr	r2, [r1, #0]
 8006a18:	601a      	str	r2, [r3, #0]
    }
 8006a1a:	bf00      	nop
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f850 	bl	8006aee <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPllEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	bfb4      	ite	lt
 8006a88:	2301      	movlt	r3, #1
 8006a8a:	2300      	movge	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZSt23__copy_move_backward_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f82f 	bl	8006b0e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIllEEPT0_PT_S6_S4_>
 8006ab0:	4603      	mov	r3, r0
    }
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <_ZNK9__gnu_cxx5__ops14_Iter_less_valclIPffEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	ed93 7a00 	vldr	s14, [r3]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	edd3 7a00 	vldr	s15, [r3]
 8006ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ada:	bf4c      	ite	mi
 8006adc:	2301      	movmi	r3, #1
 8006ade:	2300      	movpl	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f836 	bl	8006b70 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIffEEPT0_PT_S6_S4_>
 8006b04:	4603      	mov	r3, r0
    }
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIllEEPT0_PT_S6_S4_>:
	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	109b      	asrs	r3, r3, #2
 8006b22:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	bfcc      	ite	gt
 8006b2a:	2301      	movgt	r3, #1
 8006b2c:	2300      	movle	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIllEEPT0_PT_S6_S4_+0x3e>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	425b      	negs	r3, r3
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	18d0      	adds	r0, r2, r3
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	461a      	mov	r2, r3
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	f009 fd91 	bl	801066c <memmove>
 8006b4a:	e008      	b.n	8006b5e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIllEEPT0_PT_S6_S4_+0x50>
	  else if (_Num == 1)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d105      	bne.n	8006b5e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIllEEPT0_PT_S6_S4_+0x50>
	      __assign_one(__result - 1, __first);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f83a 	bl	8006bd2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIllEEvPT_PT0_>
	  return __result - _Num;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	425b      	negs	r3, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4413      	add	r3, r2
	}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIffEEPT0_PT_S6_S4_>:
	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	109b      	asrs	r3, r3, #2
 8006b84:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	bfcc      	ite	gt
 8006b8c:	2301      	movgt	r3, #1
 8006b8e:	2300      	movle	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIffEEPT0_PT_S6_S4_+0x3e>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	425b      	negs	r3, r3
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	18d0      	adds	r0, r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	f009 fd60 	bl	801066c <memmove>
 8006bac:	e008      	b.n	8006bc0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIffEEPT0_PT_S6_S4_+0x50>
	  else if (_Num == 1)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d105      	bne.n	8006bc0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIffEEPT0_PT_S6_S4_+0x50>
	      __assign_one(__result - 1, __first);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f819 	bl	8006bf2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIffEEvPT_PT0_>
	  return __result - _Num;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	425b      	negs	r3, r3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4413      	add	r3, r2
	}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIllEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
	{ *__to = std::move(*__from); }
 8006bdc:	6838      	ldr	r0, [r7, #0]
 8006bde:	f7ff fab6 	bl	800614e <_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_>
 8006be2:	4603      	mov	r3, r0
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE12__assign_oneIffEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	{ *__to = std::move(*__from); }
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f7ff fc2b 	bl	8006458 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006c18:	4b17      	ldr	r3, [pc, #92]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c1a:	4a18      	ldr	r2, [pc, #96]	@ (8006c7c <MX_SPI1_Init+0x68>)
 8006c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006c1e:	4b16      	ldr	r3, [pc, #88]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006c26:	4b14      	ldr	r3, [pc, #80]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c2c:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c32:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c46:	4b0c      	ldr	r3, [pc, #48]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006c52:	4b09      	ldr	r3, [pc, #36]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c58:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006c5e:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c60:	220a      	movs	r2, #10
 8006c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006c64:	4804      	ldr	r0, [pc, #16]	@ (8006c78 <MX_SPI1_Init+0x64>)
 8006c66:	f003 fdcb 	bl	800a800 <HAL_SPI_Init>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006c70:	f7fe faa0 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006c74:	bf00      	nop
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000e14 	.word	0x20000e14
 8006c7c:	40013000 	.word	0x40013000

08006c80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	@ 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c88:	f107 0314 	add.w	r3, r7, #20
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	609a      	str	r2, [r3, #8]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a30      	ldr	r2, [pc, #192]	@ (8006d60 <HAL_SPI_MspInit+0xe0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d159      	bne.n	8006d56 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006caa:	4a2e      	ldr	r2, [pc, #184]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006cac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	4b28      	ldr	r3, [pc, #160]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	4a27      	ldr	r2, [pc, #156]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cce:	4b25      	ldr	r3, [pc, #148]	@ (8006d64 <HAL_SPI_MspInit+0xe4>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006cda:	23a0      	movs	r3, #160	@ 0xa0
 8006cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006cea:	2305      	movs	r3, #5
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	481c      	ldr	r0, [pc, #112]	@ (8006d68 <HAL_SPI_MspInit+0xe8>)
 8006cf6:	f001 fcfb 	bl	80086f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8006cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d70 <HAL_SPI_MspInit+0xf0>)
 8006cfe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006d00:	4b1a      	ldr	r3, [pc, #104]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d02:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8006d06:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d08:	4b18      	ldr	r3, [pc, #96]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d0a:	2240      	movs	r2, #64	@ 0x40
 8006d0c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d0e:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d14:	4b15      	ldr	r3, [pc, #84]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d1c:	4b13      	ldr	r3, [pc, #76]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d22:	4b12      	ldr	r3, [pc, #72]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006d28:	4b10      	ldr	r3, [pc, #64]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d34:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006d3a:	480c      	ldr	r0, [pc, #48]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d3c:	f000 fe80 	bl	8007a40 <HAL_DMA_Init>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8006d46:	f7fe fa35 	bl	80051b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a07      	ldr	r2, [pc, #28]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d4e:	649a      	str	r2, [r3, #72]	@ 0x48
 8006d50:	4a06      	ldr	r2, [pc, #24]	@ (8006d6c <HAL_SPI_MspInit+0xec>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006d56:	bf00      	nop
 8006d58:	3728      	adds	r7, #40	@ 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40013000 	.word	0x40013000
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40020000 	.word	0x40020000
 8006d6c:	20000e6c 	.word	0x20000e6c
 8006d70:	40026458 	.word	0x40026458

08006d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d82:	4a11      	ldr	r2, [pc, #68]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d96:	2300      	movs	r3, #0
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da6:	4b08      	ldr	r3, [pc, #32]	@ (8006dc8 <HAL_MspInit+0x54>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006db2:	2200      	movs	r2, #0
 8006db4:	210f      	movs	r1, #15
 8006db6:	f06f 0001 	mvn.w	r0, #1
 8006dba:	f000 fe17 	bl	80079ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800

08006dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08e      	sub	sp, #56	@ 0x38
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	4b33      	ldr	r3, [pc, #204]	@ (8006eb0 <HAL_InitTick+0xe4>)
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	4a32      	ldr	r2, [pc, #200]	@ (8006eb0 <HAL_InitTick+0xe4>)
 8006de6:	f043 0310 	orr.w	r3, r3, #16
 8006dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dec:	4b30      	ldr	r3, [pc, #192]	@ (8006eb0 <HAL_InitTick+0xe4>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006df8:	f107 0210 	add.w	r2, r7, #16
 8006dfc:	f107 0314 	add.w	r3, r7, #20
 8006e00:	4611      	mov	r1, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f002 fffc 	bl	8009e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006e12:	f002 ffcd 	bl	8009db0 <HAL_RCC_GetPCLK1Freq>
 8006e16:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e18:	e004      	b.n	8006e24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006e1a:	f002 ffc9 	bl	8009db0 <HAL_RCC_GetPCLK1Freq>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	4a23      	ldr	r2, [pc, #140]	@ (8006eb4 <HAL_InitTick+0xe8>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	0c9b      	lsrs	r3, r3, #18
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006e32:	4b21      	ldr	r3, [pc, #132]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e34:	4a21      	ldr	r2, [pc, #132]	@ (8006ebc <HAL_InitTick+0xf0>)
 8006e36:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006e38:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006e40:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006e46:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e52:	4b19      	ldr	r3, [pc, #100]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006e58:	4817      	ldr	r0, [pc, #92]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e5a:	f004 f8c3 	bl	800afe4 <HAL_TIM_Base_Init>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006e64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006e6c:	4812      	ldr	r0, [pc, #72]	@ (8006eb8 <HAL_InitTick+0xec>)
 8006e6e:	f004 f971 	bl	800b154 <HAL_TIM_Base_Start_IT>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006e78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006e80:	2036      	movs	r0, #54	@ 0x36
 8006e82:	f000 fdcf 	bl	8007a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b0f      	cmp	r3, #15
 8006e8a:	d808      	bhi.n	8006e9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	2036      	movs	r0, #54	@ 0x36
 8006e92:	f000 fdab 	bl	80079ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e96:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec0 <HAL_InitTick+0xf4>)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e002      	b.n	8006ea4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	@ 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	431bde83 	.word	0x431bde83
 8006eb8:	20000ecc 	.word	0x20000ecc
 8006ebc:	40001000 	.word	0x40001000
 8006ec0:	20000040 	.word	0x20000040

08006ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <NMI_Handler+0x4>

08006ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <HardFault_Handler+0x4>

08006ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <MemManage_Handler+0x4>

08006edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <BusFault_Handler+0x4>

08006ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ee8:	bf00      	nop
 8006eea:	e7fd      	b.n	8006ee8 <UsageFault_Handler+0x4>

08006eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f00:	4802      	ldr	r0, [pc, #8]	@ (8006f0c <TIM2_IRQHandler+0x10>)
 8006f02:	f004 f997 	bl	800b234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006f06:	bf00      	nop
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000f18 	.word	0x20000f18

08006f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006f14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006f18:	f001 fdca 	bl	8008ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006f1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006f20:	f001 fdc6 	bl	8008ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f24:	bf00      	nop
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006f2c:	4802      	ldr	r0, [pc, #8]	@ (8006f38 <TIM6_DAC_IRQHandler+0x10>)
 8006f2e:	f004 f981 	bl	800b234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006f32:	bf00      	nop
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000ecc 	.word	0x20000ecc

08006f3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006f40:	4802      	ldr	r0, [pc, #8]	@ (8006f4c <DMA2_Stream3_IRQHandler+0x10>)
 8006f42:	f000 fe83 	bl	8007c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000e6c 	.word	0x20000e6c

08006f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return 1;
 8006f54:	2301      	movs	r3, #1
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <_kill>:

int _kill(int pid, int sig)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f6a:	f009 fcb3 	bl	80108d4 <__errno>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2216      	movs	r2, #22
 8006f72:	601a      	str	r2, [r3, #0]
  return -1;
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <_exit>:

void _exit (int status)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f88:	f04f 31ff 	mov.w	r1, #4294967295
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff ffe7 	bl	8006f60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <_exit+0x12>

08006f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e00a      	b.n	8006fbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006fa8:	f3af 8000 	nop.w
 8006fac:	4601      	mov	r1, r0
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	60ba      	str	r2, [r7, #8]
 8006fb4:	b2ca      	uxtb	r2, r1
 8006fb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	dbf0      	blt.n	8006fa8 <_read+0x12>
  }

  return len;
 8006fc6:	687b      	ldr	r3, [r7, #4]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e009      	b.n	8006ff6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	60ba      	str	r2, [r7, #8]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	dbf1      	blt.n	8006fe2 <_write+0x12>
  }
  return len;
 8006ffe:	687b      	ldr	r3, [r7, #4]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_close>:

int _close(int file)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007030:	605a      	str	r2, [r3, #4]
  return 0;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <_isatty>:

int _isatty(int file)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007048:	2301      	movs	r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007078:	4a14      	ldr	r2, [pc, #80]	@ (80070cc <_sbrk+0x5c>)
 800707a:	4b15      	ldr	r3, [pc, #84]	@ (80070d0 <_sbrk+0x60>)
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007084:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <_sbrk+0x64>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800708c:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <_sbrk+0x64>)
 800708e:	4a12      	ldr	r2, [pc, #72]	@ (80070d8 <_sbrk+0x68>)
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007092:	4b10      	ldr	r3, [pc, #64]	@ (80070d4 <_sbrk+0x64>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	429a      	cmp	r2, r3
 800709e:	d207      	bcs.n	80070b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070a0:	f009 fc18 	bl	80108d4 <__errno>
 80070a4:	4603      	mov	r3, r0
 80070a6:	220c      	movs	r2, #12
 80070a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070aa:	f04f 33ff 	mov.w	r3, #4294967295
 80070ae:	e009      	b.n	80070c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070b0:	4b08      	ldr	r3, [pc, #32]	@ (80070d4 <_sbrk+0x64>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070b6:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <_sbrk+0x64>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	4a05      	ldr	r2, [pc, #20]	@ (80070d4 <_sbrk+0x64>)
 80070c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20020000 	.word	0x20020000
 80070d0:	00000400 	.word	0x00000400
 80070d4:	20000f14 	.word	0x20000f14
 80070d8:	20007188 	.word	0x20007188

080070dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070e0:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <SystemInit+0x20>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	4a05      	ldr	r2, [pc, #20]	@ (80070fc <SystemInit+0x20>)
 80070e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070f0:	bf00      	nop
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	e000ed00 	.word	0xe000ed00

08007100 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	609a      	str	r2, [r3, #8]
 8007112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007114:	463b      	mov	r3, r7
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800711c:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <MX_TIM2_Init+0x94>)
 800711e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16799;
 8007124:	4b1b      	ldr	r3, [pc, #108]	@ (8007194 <MX_TIM2_Init+0x94>)
 8007126:	f244 129f 	movw	r2, #16799	@ 0x419f
 800712a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800712c:	4b19      	ldr	r3, [pc, #100]	@ (8007194 <MX_TIM2_Init+0x94>)
 800712e:	2200      	movs	r2, #0
 8007130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 74999;
 8007132:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <MX_TIM2_Init+0x94>)
 8007134:	4a18      	ldr	r2, [pc, #96]	@ (8007198 <MX_TIM2_Init+0x98>)
 8007136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007138:	4b16      	ldr	r3, [pc, #88]	@ (8007194 <MX_TIM2_Init+0x94>)
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800713e:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <MX_TIM2_Init+0x94>)
 8007140:	2200      	movs	r2, #0
 8007142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007144:	4813      	ldr	r0, [pc, #76]	@ (8007194 <MX_TIM2_Init+0x94>)
 8007146:	f003 ff4d 	bl	800afe4 <HAL_TIM_Base_Init>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007150:	f7fe f830 	bl	80051b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4619      	mov	r1, r3
 8007160:	480c      	ldr	r0, [pc, #48]	@ (8007194 <MX_TIM2_Init+0x94>)
 8007162:	f004 f957 	bl	800b414 <HAL_TIM_ConfigClockSource>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800716c:	f7fe f822 	bl	80051b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007170:	2300      	movs	r3, #0
 8007172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007174:	2300      	movs	r3, #0
 8007176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007178:	463b      	mov	r3, r7
 800717a:	4619      	mov	r1, r3
 800717c:	4805      	ldr	r0, [pc, #20]	@ (8007194 <MX_TIM2_Init+0x94>)
 800717e:	f004 fb7f 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007188:	f7fe f814 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800718c:	bf00      	nop
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000f18 	.word	0x20000f18
 8007198:	000124f7 	.word	0x000124f7

0800719c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071a2:	f107 0308 	add.w	r3, r7, #8
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	609a      	str	r2, [r3, #8]
 80071ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071b0:	463b      	mov	r3, r7
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <MX_TIM3_Init+0x98>)
 80071bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80071be:	4b1c      	ldr	r3, [pc, #112]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071c0:	2253      	movs	r2, #83	@ 0x53
 80071c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80071ca:	4b19      	ldr	r3, [pc, #100]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071d2:	4b17      	ldr	r3, [pc, #92]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071da:	2200      	movs	r2, #0
 80071dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80071de:	4814      	ldr	r0, [pc, #80]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071e0:	f003 ff00 	bl	800afe4 <HAL_TIM_Base_Init>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80071ea:	f7fd ffe3 	bl	80051b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4619      	mov	r1, r3
 80071fa:	480d      	ldr	r0, [pc, #52]	@ (8007230 <MX_TIM3_Init+0x94>)
 80071fc:	f004 f90a 	bl	800b414 <HAL_TIM_ConfigClockSource>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007206:	f7fd ffd5 	bl	80051b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800720a:	2300      	movs	r3, #0
 800720c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007212:	463b      	mov	r3, r7
 8007214:	4619      	mov	r1, r3
 8007216:	4806      	ldr	r0, [pc, #24]	@ (8007230 <MX_TIM3_Init+0x94>)
 8007218:	f004 fb32 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007222:	f7fd ffc7 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007226:	bf00      	nop
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000f60 	.word	0x20000f60
 8007234:	40000400 	.word	0x40000400

08007238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d116      	bne.n	8007278 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	4b16      	ldr	r3, [pc, #88]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	6413      	str	r3, [r2, #64]	@ 0x40
 800725a:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007266:	2200      	movs	r2, #0
 8007268:	2105      	movs	r1, #5
 800726a:	201c      	movs	r0, #28
 800726c:	f000 fbbe 	bl	80079ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007270:	201c      	movs	r0, #28
 8007272:	f000 fbd7 	bl	8007a24 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007276:	e012      	b.n	800729e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a0b      	ldr	r2, [pc, #44]	@ (80072ac <HAL_TIM_Base_MspInit+0x74>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10d      	bne.n	800729e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007282:	2300      	movs	r3, #0
 8007284:	60bb      	str	r3, [r7, #8]
 8007286:	4b08      	ldr	r3, [pc, #32]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	4a07      	ldr	r2, [pc, #28]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	6413      	str	r3, [r2, #64]	@ 0x40
 8007292:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <HAL_TIM_Base_MspInit+0x70>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	60bb      	str	r3, [r7, #8]
 800729c:	68bb      	ldr	r3, [r7, #8]
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800
 80072ac:	40000400 	.word	0x40000400

080072b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80072b4:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072b6:	4a12      	ldr	r2, [pc, #72]	@ (8007300 <MX_USART2_UART_Init+0x50>)
 80072b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80072ba:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80072c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80072c2:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80072d4:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072d6:	220c      	movs	r2, #12
 80072d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072da:	4b08      	ldr	r3, [pc, #32]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80072e0:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80072e6:	4805      	ldr	r0, [pc, #20]	@ (80072fc <MX_USART2_UART_Init+0x4c>)
 80072e8:	f004 fb5a 	bl	800b9a0 <HAL_UART_Init>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80072f2:	f7fd ff5f 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000fa8 	.word	0x20000fa8
 8007300:	40004400 	.word	0x40004400

08007304 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007308:	4b11      	ldr	r3, [pc, #68]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 800730a:	4a12      	ldr	r2, [pc, #72]	@ (8007354 <MX_USART3_UART_Init+0x50>)
 800730c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800730e:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 8007310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007316:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 8007318:	2200      	movs	r2, #0
 800731a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800731c:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 800731e:	2200      	movs	r2, #0
 8007320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 8007324:	2200      	movs	r2, #0
 8007326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007328:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 800732a:	220c      	movs	r2, #12
 800732c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800732e:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 8007330:	2200      	movs	r2, #0
 8007332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007334:	4b06      	ldr	r3, [pc, #24]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 8007336:	2200      	movs	r2, #0
 8007338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800733a:	4805      	ldr	r0, [pc, #20]	@ (8007350 <MX_USART3_UART_Init+0x4c>)
 800733c:	f004 fb30 	bl	800b9a0 <HAL_UART_Init>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007346:	f7fd ff35 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000ff0 	.word	0x20000ff0
 8007354:	40004800 	.word	0x40004800

08007358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	@ 0x30
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007360:	f107 031c 	add.w	r3, r7, #28
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	605a      	str	r2, [r3, #4]
 800736a:	609a      	str	r2, [r3, #8]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a41      	ldr	r2, [pc, #260]	@ (800747c <HAL_UART_MspInit+0x124>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d12c      	bne.n	80073d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	4b40      	ldr	r3, [pc, #256]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007382:	4a3f      	ldr	r2, [pc, #252]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	6413      	str	r3, [r2, #64]	@ 0x40
 800738a:	4b3d      	ldr	r3, [pc, #244]	@ (8007480 <HAL_UART_MspInit+0x128>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	4b39      	ldr	r3, [pc, #228]	@ (8007480 <HAL_UART_MspInit+0x128>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739e:	4a38      	ldr	r2, [pc, #224]	@ (8007480 <HAL_UART_MspInit+0x128>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80073a6:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <HAL_UART_MspInit+0x128>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80073b2:	230c      	movs	r3, #12
 80073b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b6:	2302      	movs	r3, #2
 80073b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073be:	2303      	movs	r3, #3
 80073c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80073c2:	2307      	movs	r3, #7
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c6:	f107 031c 	add.w	r3, r7, #28
 80073ca:	4619      	mov	r1, r3
 80073cc:	482d      	ldr	r0, [pc, #180]	@ (8007484 <HAL_UART_MspInit+0x12c>)
 80073ce:	f001 f98f 	bl	80086f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80073d2:	e04f      	b.n	8007474 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007488 <HAL_UART_MspInit+0x130>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d14a      	bne.n	8007474 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b27      	ldr	r3, [pc, #156]	@ (8007480 <HAL_UART_MspInit+0x128>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	4a26      	ldr	r2, [pc, #152]	@ (8007480 <HAL_UART_MspInit+0x128>)
 80073e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ee:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <HAL_UART_MspInit+0x128>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b20      	ldr	r3, [pc, #128]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	4a1f      	ldr	r2, [pc, #124]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	6313      	str	r3, [r2, #48]	@ 0x30
 800740a:	4b1d      	ldr	r3, [pc, #116]	@ (8007480 <HAL_UART_MspInit+0x128>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <HAL_UART_MspInit+0x128>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	4a18      	ldr	r2, [pc, #96]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	6313      	str	r3, [r2, #48]	@ 0x30
 8007426:	4b16      	ldr	r3, [pc, #88]	@ (8007480 <HAL_UART_MspInit+0x128>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007432:	2320      	movs	r3, #32
 8007434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007436:	2302      	movs	r3, #2
 8007438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	2300      	movs	r3, #0
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800743e:	2303      	movs	r3, #3
 8007440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007442:	2307      	movs	r3, #7
 8007444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007446:	f107 031c 	add.w	r3, r7, #28
 800744a:	4619      	mov	r1, r3
 800744c:	480f      	ldr	r0, [pc, #60]	@ (800748c <HAL_UART_MspInit+0x134>)
 800744e:	f001 f94f 	bl	80086f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007458:	2302      	movs	r3, #2
 800745a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745c:	2300      	movs	r3, #0
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007460:	2303      	movs	r3, #3
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007464:	2307      	movs	r3, #7
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007468:	f107 031c 	add.w	r3, r7, #28
 800746c:	4619      	mov	r1, r3
 800746e:	4808      	ldr	r0, [pc, #32]	@ (8007490 <HAL_UART_MspInit+0x138>)
 8007470:	f001 f93e 	bl	80086f0 <HAL_GPIO_Init>
}
 8007474:	bf00      	nop
 8007476:	3730      	adds	r7, #48	@ 0x30
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40004400 	.word	0x40004400
 8007480:	40023800 	.word	0x40023800
 8007484:	40020000 	.word	0x40020000
 8007488:	40004800 	.word	0x40004800
 800748c:	40020800 	.word	0x40020800
 8007490:	40020400 	.word	0x40020400

08007494 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007498:	f3bf 8f4f 	dsb	sy
}
 800749c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800749e:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <__NVIC_SystemReset+0x24>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80074a6:	4904      	ldr	r1, [pc, #16]	@ (80074b8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80074a8:	4b04      	ldr	r3, [pc, #16]	@ (80074bc <__NVIC_SystemReset+0x28>)
 80074aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80074ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80074ae:	f3bf 8f4f 	dsb	sy
}
 80074b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <__NVIC_SystemReset+0x20>
 80074b8:	e000ed00 	.word	0xe000ed00
 80074bc:	05fa0004 	.word	0x05fa0004

080074c0 <_ZN15WatchdogManagerC1Ev>:
    void watchdogTask();
    std::array<TaskInfo, MAX_WATCHDOG_TASKS> tasks;
    uint32_t taskCount = 0;

private:
    WatchdogManager() = default;
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <_ZN15WatchdogManager8instanceEv>:

extern IWDG_HandleTypeDef hiwdg;

extern uint32_t idleCounter;

WatchdogManager& WatchdogManager::instance() {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
    static WatchdogManager instance;
 80074e4:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <_ZN15WatchdogManager8instanceEv+0x48>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f3bf 8f5b 	dmb	ish
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <_ZN15WatchdogManager8instanceEv+0x40>
 80074fe:	480a      	ldr	r0, [pc, #40]	@ (8007528 <_ZN15WatchdogManager8instanceEv+0x48>)
 8007500:	f007 fdb4 	bl	800f06c <__cxa_guard_acquire>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <_ZN15WatchdogManager8instanceEv+0x40>
 8007514:	4805      	ldr	r0, [pc, #20]	@ (800752c <_ZN15WatchdogManager8instanceEv+0x4c>)
 8007516:	f7ff ffd3 	bl	80074c0 <_ZN15WatchdogManagerC1Ev>
 800751a:	4803      	ldr	r0, [pc, #12]	@ (8007528 <_ZN15WatchdogManager8instanceEv+0x48>)
 800751c:	f007 fdb2 	bl	800f084 <__cxa_guard_release>
    return instance;
 8007520:	4b02      	ldr	r3, [pc, #8]	@ (800752c <_ZN15WatchdogManager8instanceEv+0x4c>)
}
 8007522:	4618      	mov	r0, r3
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200010fc 	.word	0x200010fc
 800752c:	20001038 	.word	0x20001038

08007530 <_ZN15WatchdogManager12registerTaskEPKcP19tskTaskControlBlockm>:

void WatchdogManager::registerTask(const char* name, TaskHandle_t handle, uint32_t maxSilentTicks) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
    if (taskCount < MAX_WATCHDOG_TASKS) {
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007544:	2b07      	cmp	r3, #7
 8007546:	d81b      	bhi.n	8007580 <_ZN15WatchdogManager12registerTaskEPKcP19tskTaskControlBlockm+0x50>
        tasks[taskCount] = {
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7fc ff3c 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 8007558:	4603      	mov	r3, r0
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	611a      	str	r2, [r3, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	615a      	str	r2, [r3, #20]
            .aliveCounter = 0,
            .maxSilentTicks = maxSilentTicks,
            .missedTicks = 0,
            .lastSeenCounter = 0
        };
        taskCount++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <_ZN15WatchdogManager11notifyAliveEPKc>:

void WatchdogManager::notifyAlive(const char* name) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e01f      	b.n	80075d8 <_ZN15WatchdogManager11notifyAliveEPKc+0x50>
        if (strcmp(tasks[i].name, name) == 0) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	4618      	mov	r0, r3
 800759e:	f7fc ff17 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80075a2:	4603      	mov	r3, r0
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7f8 fe31 	bl	8000210 <strcmp>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <_ZN15WatchdogManager11notifyAliveEPKc+0x4a>
            tasks[i].aliveCounter++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fc ff04 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80075c8:	4603      	mov	r3, r0
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	3201      	adds	r2, #1
 80075ce:	609a      	str	r2, [r3, #8]
            //uartPrint("Notify from task:%s\r\n", name);
            break;
 80075d0:	e009      	b.n	80075e6 <_ZN15WatchdogManager11notifyAliveEPKc+0x5e>
    for (uint32_t i = 0; i < taskCount; i++) {
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3d9      	bcc.n	8007598 <_ZN15WatchdogManager11notifyAliveEPKc+0x10>
        }
    }
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <_ZN15WatchdogManager12watchdogTaskEv>:

void WatchdogManager::watchdogTask() {
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b089      	sub	sp, #36	@ 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    const TickType_t delay = pdMS_TO_TICKS(1000);
 80075f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80075fc:	617b      	str	r3, [r7, #20]
    uartPrint("watchdogTask: this = %p\n", this);
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	484f      	ldr	r0, [pc, #316]	@ (8007740 <_ZN15WatchdogManager12watchdogTaskEv+0x150>)
 8007602:	f7fd ff27 	bl	8005454 <uartPrint>
    uint8_t counter = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	77fb      	strb	r3, [r7, #31]
    while (true) {
        vTaskDelay(delay);
 800760a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800760e:	f005 ffd3 	bl	800d5b8 <vTaskDelay>
        uint32_t lastIdleCount = idleCounter;
 8007612:	4b4c      	ldr	r3, [pc, #304]	@ (8007744 <_ZN15WatchdogManager12watchdogTaskEv+0x154>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	613b      	str	r3, [r7, #16]
        idleCounter = 0;
 8007618:	4b4a      	ldr	r3, [pc, #296]	@ (8007744 <_ZN15WatchdogManager12watchdogTaskEv+0x154>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
        if(counter >= 10){
 800761e:	7ffb      	ldrb	r3, [r7, #31]
 8007620:	2b09      	cmp	r3, #9
 8007622:	d920      	bls.n	8007666 <_ZN15WatchdogManager12watchdogTaskEv+0x76>
        	counter = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	77fb      	strb	r3, [r7, #31]
            float idlePercent = (float)lastIdleCount / MAX_IDLE_COUNT * 100.0f;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007632:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007748 <_ZN15WatchdogManager12watchdogTaskEv+0x158>
 8007636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800763a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800774c <_ZN15WatchdogManager12watchdogTaskEv+0x15c>
 800763e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007642:	edc7 7a03 	vstr	s15, [r7, #12]
            float cpuLoad = 100.0f - idlePercent;
 8007646:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800774c <_ZN15WatchdogManager12watchdogTaskEv+0x15c>
 800764a:	edd7 7a03 	vldr	s15, [r7, #12]
 800764e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007652:	edc7 7a02 	vstr	s15, [r7, #8]

            uartPrint("CPU Load: %.1f%%\r\n", cpuLoad);
 8007656:	68b8      	ldr	r0, [r7, #8]
 8007658:	f7f8 ffa6 	bl	80005a8 <__aeabi_f2d>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	483b      	ldr	r0, [pc, #236]	@ (8007750 <_ZN15WatchdogManager12watchdogTaskEv+0x160>)
 8007662:	f7fd fef7 	bl	8005454 <uartPrint>
        }
        ++counter;
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	3301      	adds	r3, #1
 800766a:	77fb      	strb	r3, [r7, #31]


        for (uint32_t i = 0; i < taskCount; i++) {
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	e05c      	b.n	800772c <_ZN15WatchdogManager12watchdogTaskEv+0x13c>
            if (tasks[i].aliveCounter == tasks[i].lastSeenCounter) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69b9      	ldr	r1, [r7, #24]
 8007676:	4618      	mov	r0, r3
 8007678:	f7fc feaa 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 800767c:	4603      	mov	r3, r0
 800767e:	689c      	ldr	r4, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	4618      	mov	r0, r3
 8007686:	f7fc fea3 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 800768a:	4603      	mov	r3, r0
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	429c      	cmp	r4, r3
 8007690:	bf0c      	ite	eq
 8007692:	2301      	moveq	r3, #1
 8007694:	2300      	movne	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02e      	beq.n	80076fa <_ZN15WatchdogManager12watchdogTaskEv+0x10a>
                tasks[i].missedTicks++;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fc fe95 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80076a6:	4603      	mov	r3, r0
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	3201      	adds	r2, #1
 80076ac:	611a      	str	r2, [r3, #16]
                if (tasks[i].missedTicks >= tasks[i].maxSilentTicks) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69b9      	ldr	r1, [r7, #24]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fc fe8c 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80076b8:	4603      	mov	r3, r0
 80076ba:	691c      	ldr	r4, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fc fe85 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80076c6:	4603      	mov	r3, r0
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	429c      	cmp	r4, r3
 80076cc:	bf2c      	ite	cs
 80076ce:	2301      	movcs	r3, #1
 80076d0:	2300      	movcc	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d018      	beq.n	800770a <_ZN15WatchdogManager12watchdogTaskEv+0x11a>
                    printf("Watchdog timeout: %s not responding\r\n", tasks[i].name);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fc fe77 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 80076e2:	4603      	mov	r3, r0
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	481a      	ldr	r0, [pc, #104]	@ (8007754 <_ZN15WatchdogManager12watchdogTaskEv+0x164>)
 80076ea:	f008 fed5 	bl	8010498 <iprintf>
                    vTaskDelay(1000);
 80076ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80076f2:	f005 ff61 	bl	800d5b8 <vTaskDelay>
                    NVIC_SystemReset();  // Reset MCU
 80076f6:	f7ff fecd 	bl	8007494 <__NVIC_SystemReset>
                }
            } else {
                tasks[i].missedTicks = 0;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fc fe66 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 8007704:	4603      	mov	r3, r0
 8007706:	2200      	movs	r2, #0
 8007708:	611a      	str	r2, [r3, #16]
            }
            tasks[i].lastSeenCounter = tasks[i].aliveCounter;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69b9      	ldr	r1, [r7, #24]
 800770e:	4618      	mov	r0, r3
 8007710:	f7fc fe5e 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 8007714:	4604      	mov	r4, r0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69b9      	ldr	r1, [r7, #24]
 800771a:	4618      	mov	r0, r3
 800771c:	f7fc fe58 	bl	80043d0 <_ZNSt5arrayIN15WatchdogManager8TaskInfoELj8EEixEj>
 8007720:	4602      	mov	r2, r0
 8007722:	68a3      	ldr	r3, [r4, #8]
 8007724:	6153      	str	r3, [r2, #20]
        for (uint32_t i = 0; i < taskCount; i++) {
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	3301      	adds	r3, #1
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	429a      	cmp	r2, r3
 8007736:	d39c      	bcc.n	8007672 <_ZN15WatchdogManager12watchdogTaskEv+0x82>
        }
        HAL_IWDG_Refresh(&hiwdg);
 8007738:	4807      	ldr	r0, [pc, #28]	@ (8007758 <_ZN15WatchdogManager12watchdogTaskEv+0x168>)
 800773a:	f002 fa37 	bl	8009bac <HAL_IWDG_Refresh>
    }
 800773e:	e764      	b.n	800760a <_ZN15WatchdogManager12watchdogTaskEv+0x1a>
 8007740:	08012f78 	.word	0x08012f78
 8007744:	20000e04 	.word	0x20000e04
 8007748:	4d000444 	.word	0x4d000444
 800774c:	42c80000 	.word	0x42c80000
 8007750:	08012f94 	.word	0x08012f94
 8007754:	08012fa8 	.word	0x08012fa8
 8007758:	20000ddc 	.word	0x20000ddc

0800775c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800775c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007794 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007760:	f7ff fcbc 	bl	80070dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007764:	480c      	ldr	r0, [pc, #48]	@ (8007798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007766:	490d      	ldr	r1, [pc, #52]	@ (800779c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007768:	4a0d      	ldr	r2, [pc, #52]	@ (80077a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800776a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800776c:	e002      	b.n	8007774 <LoopCopyDataInit>

0800776e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800776e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007772:	3304      	adds	r3, #4

08007774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007778:	d3f9      	bcc.n	800776e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800777a:	4a0a      	ldr	r2, [pc, #40]	@ (80077a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800777c:	4c0a      	ldr	r4, [pc, #40]	@ (80077a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800777e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007780:	e001      	b.n	8007786 <LoopFillZerobss>

08007782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007784:	3204      	adds	r2, #4

08007786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007788:	d3fb      	bcc.n	8007782 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800778a:	f009 f8a9 	bl	80108e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800778e:	f7fd fc65 	bl	800505c <main>
  bx  lr    
 8007792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800779c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80077a0:	08015784 	.word	0x08015784
  ldr r2, =_sbss
 80077a4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80077a8:	20007188 	.word	0x20007188

080077ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80077ac:	e7fe      	b.n	80077ac <ADC_IRQHandler>
	...

080077b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077b4:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <HAL_Init+0x40>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a0d      	ldr	r2, [pc, #52]	@ (80077f0 <HAL_Init+0x40>)
 80077ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80077be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077c0:	4b0b      	ldr	r3, [pc, #44]	@ (80077f0 <HAL_Init+0x40>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <HAL_Init+0x40>)
 80077c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077cc:	4b08      	ldr	r3, [pc, #32]	@ (80077f0 <HAL_Init+0x40>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a07      	ldr	r2, [pc, #28]	@ (80077f0 <HAL_Init+0x40>)
 80077d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077d8:	2003      	movs	r0, #3
 80077da:	f000 f8fc 	bl	80079d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077de:	200f      	movs	r0, #15
 80077e0:	f7ff faf4 	bl	8006dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077e4:	f7ff fac6 	bl	8006d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40023c00 	.word	0x40023c00

080077f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <HAL_IncTick+0x20>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <HAL_IncTick+0x24>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4413      	add	r3, r2
 8007804:	4a04      	ldr	r2, [pc, #16]	@ (8007818 <HAL_IncTick+0x24>)
 8007806:	6013      	str	r3, [r2, #0]
}
 8007808:	bf00      	nop
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000044 	.word	0x20000044
 8007818:	20001100 	.word	0x20001100

0800781c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return uwTick;
 8007820:	4b03      	ldr	r3, [pc, #12]	@ (8007830 <HAL_GetTick+0x14>)
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20001100 	.word	0x20001100

08007834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800783c:	f7ff ffee 	bl	800781c <HAL_GetTick>
 8007840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d005      	beq.n	800785a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800784e:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <HAL_Delay+0x44>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800785a:	bf00      	nop
 800785c:	f7ff ffde 	bl	800781c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d8f7      	bhi.n	800785c <HAL_Delay+0x28>
  {
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000044 	.word	0x20000044

0800787c <__NVIC_SetPriorityGrouping>:
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <__NVIC_SetPriorityGrouping+0x44>)
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007898:	4013      	ands	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078ae:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <__NVIC_SetPriorityGrouping+0x44>)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	60d3      	str	r3, [r2, #12]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	e000ed00 	.word	0xe000ed00

080078c4 <__NVIC_GetPriorityGrouping>:
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078c8:	4b04      	ldr	r3, [pc, #16]	@ (80078dc <__NVIC_GetPriorityGrouping+0x18>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	f003 0307 	and.w	r3, r3, #7
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	e000ed00 	.word	0xe000ed00

080078e0 <__NVIC_EnableIRQ>:
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	db0b      	blt.n	800790a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	f003 021f 	and.w	r2, r3, #31
 80078f8:	4907      	ldr	r1, [pc, #28]	@ (8007918 <__NVIC_EnableIRQ+0x38>)
 80078fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	2001      	movs	r0, #1
 8007902:	fa00 f202 	lsl.w	r2, r0, r2
 8007906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	e000e100 	.word	0xe000e100

0800791c <__NVIC_SetPriority>:
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792c:	2b00      	cmp	r3, #0
 800792e:	db0a      	blt.n	8007946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	490c      	ldr	r1, [pc, #48]	@ (8007968 <__NVIC_SetPriority+0x4c>)
 8007936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	440b      	add	r3, r1
 8007940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007944:	e00a      	b.n	800795c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4908      	ldr	r1, [pc, #32]	@ (800796c <__NVIC_SetPriority+0x50>)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	3b04      	subs	r3, #4
 8007954:	0112      	lsls	r2, r2, #4
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	440b      	add	r3, r1
 800795a:	761a      	strb	r2, [r3, #24]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	e000e100 	.word	0xe000e100
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <NVIC_EncodePriority>:
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	@ 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f1c3 0307 	rsb	r3, r3, #7
 800798a:	2b04      	cmp	r3, #4
 800798c:	bf28      	it	cs
 800798e:	2304      	movcs	r3, #4
 8007990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3304      	adds	r3, #4
 8007996:	2b06      	cmp	r3, #6
 8007998:	d902      	bls.n	80079a0 <NVIC_EncodePriority+0x30>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	3b03      	subs	r3, #3
 800799e:	e000      	b.n	80079a2 <NVIC_EncodePriority+0x32>
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43da      	mvns	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	401a      	ands	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079b8:	f04f 31ff 	mov.w	r1, #4294967295
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	43d9      	mvns	r1, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c8:	4313      	orrs	r3, r2
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3724      	adds	r7, #36	@ 0x24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ff4c 	bl	800787c <__NVIC_SetPriorityGrouping>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079fe:	f7ff ff61 	bl	80078c4 <__NVIC_GetPriorityGrouping>
 8007a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f7ff ffb1 	bl	8007970 <NVIC_EncodePriority>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff80 	bl	800791c <__NVIC_SetPriority>
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ff54 	bl	80078e0 <__NVIC_EnableIRQ>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7ff fee6 	bl	800781c <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e099      	b.n	8007b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a7c:	e00f      	b.n	8007a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a7e:	f7ff fecd 	bl	800781c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b05      	cmp	r3, #5
 8007a8a:	d908      	bls.n	8007a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e078      	b.n	8007b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e8      	bne.n	8007a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4b38      	ldr	r3, [pc, #224]	@ (8007b98 <HAL_DMA_Init+0x158>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d107      	bne.n	8007b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	4313      	orrs	r3, r2
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d117      	bne.n	8007b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00e      	beq.n	8007b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fa6f 	bl	8008028 <DMA_CheckFifoParam>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2240      	movs	r2, #64	@ 0x40
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e016      	b.n	8007b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa26 	bl	8007fbc <DMA_CalcBaseAndBitshift>
 8007b70:	4603      	mov	r3, r0
 8007b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b78:	223f      	movs	r2, #63	@ 0x3f
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	f010803f 	.word	0xf010803f

08007b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_DMA_Start_IT+0x26>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e040      	b.n	8007c44 <HAL_DMA_Start_IT+0xa8>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d12f      	bne.n	8007c36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f9b8 	bl	8007f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf4:	223f      	movs	r2, #63	@ 0x3f
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0216 	orr.w	r2, r2, #22
 8007c0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0208 	orr.w	r2, r2, #8
 8007c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e005      	b.n	8007c42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
 8007c40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c58:	4b8e      	ldr	r3, [pc, #568]	@ (8007e94 <HAL_DMA_IRQHandler+0x248>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8007e98 <HAL_DMA_IRQHandler+0x24c>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	0a9b      	lsrs	r3, r3, #10
 8007c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c76:	2208      	movs	r2, #8
 8007c78:	409a      	lsls	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01a      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d013      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0204 	bic.w	r2, r2, #4
 8007c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	f043 0201 	orr.w	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d012      	beq.n	8007cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00b      	beq.n	8007cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cda:	2201      	movs	r2, #1
 8007cdc:	409a      	lsls	r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d012      	beq.n	8007d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d10:	2204      	movs	r2, #4
 8007d12:	409a      	lsls	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d28:	2210      	movs	r2, #16
 8007d2a:	409a      	lsls	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d043      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d03c      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d46:	2210      	movs	r2, #16
 8007d48:	409a      	lsls	r2, r3
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d018      	beq.n	8007d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d108      	bne.n	8007d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d024      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	e01f      	b.n	8007dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01b      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
 8007d8c:	e016      	b.n	8007dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d107      	bne.n	8007dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0208 	bic.w	r2, r2, #8
 8007daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 808f 	beq.w	8007eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8087 	beq.w	8007eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de2:	2220      	movs	r2, #32
 8007de4:	409a      	lsls	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d136      	bne.n	8007e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0216 	bic.w	r2, r2, #22
 8007e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695a      	ldr	r2, [r3, #20]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <HAL_DMA_IRQHandler+0x1da>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0208 	bic.w	r2, r2, #8
 8007e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3a:	223f      	movs	r2, #63	@ 0x3f
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d07e      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
        }
        return;
 8007e62:	e079      	b.n	8007f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01d      	beq.n	8007eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10d      	bne.n	8007e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d031      	beq.n	8007eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
 8007e90:	e02c      	b.n	8007eec <HAL_DMA_IRQHandler+0x2a0>
 8007e92:	bf00      	nop
 8007e94:	2000003c 	.word	0x2000003c
 8007e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d023      	beq.n	8007eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
 8007eac:	e01e      	b.n	8007eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10f      	bne.n	8007edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0210 	bic.w	r2, r2, #16
 8007eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d032      	beq.n	8007f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d022      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2205      	movs	r2, #5
 8007f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0201 	bic.w	r2, r2, #1
 8007f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d307      	bcc.n	8007f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f2      	bne.n	8007f18 <HAL_DMA_IRQHandler+0x2cc>
 8007f32:	e000      	b.n	8007f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
 8007f56:	e000      	b.n	8007f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007f58:	bf00      	nop
    }
  }
}
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b40      	cmp	r3, #64	@ 0x40
 8007f8c:	d108      	bne.n	8007fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007f9e:	e007      	b.n	8007fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	60da      	str	r2, [r3, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	3b10      	subs	r3, #16
 8007fcc:	4a14      	ldr	r2, [pc, #80]	@ (8008020 <DMA_CalcBaseAndBitshift+0x64>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	091b      	lsrs	r3, r3, #4
 8007fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007fd6:	4a13      	ldr	r2, [pc, #76]	@ (8008024 <DMA_CalcBaseAndBitshift+0x68>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d909      	bls.n	8007ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	1d1a      	adds	r2, r3, #4
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ffc:	e007      	b.n	800800e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	aaaaaaab 	.word	0xaaaaaaab
 8008024:	080153d4 	.word	0x080153d4

08008028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11f      	bne.n	8008082 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b03      	cmp	r3, #3
 8008046:	d856      	bhi.n	80080f6 <DMA_CheckFifoParam+0xce>
 8008048:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <DMA_CheckFifoParam+0x28>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008061 	.word	0x08008061
 8008054:	08008073 	.word	0x08008073
 8008058:	08008061 	.word	0x08008061
 800805c:	080080f7 	.word	0x080080f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d046      	beq.n	80080fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008070:	e043      	b.n	80080fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800807a:	d140      	bne.n	80080fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008080:	e03d      	b.n	80080fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808a:	d121      	bne.n	80080d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d837      	bhi.n	8008102 <DMA_CheckFifoParam+0xda>
 8008092:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <DMA_CheckFifoParam+0x70>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080af 	.word	0x080080af
 80080a0:	080080a9 	.word	0x080080a9
 80080a4:	080080c1 	.word	0x080080c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
      break;
 80080ac:	e030      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d025      	beq.n	8008106 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080be:	e022      	b.n	8008106 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80080c8:	d11f      	bne.n	800810a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80080ce:	e01c      	b.n	800810a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d903      	bls.n	80080de <DMA_CheckFifoParam+0xb6>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d003      	beq.n	80080e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80080dc:	e018      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
      break;
 80080e2:	e015      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e00b      	b.n	800810e <DMA_CheckFifoParam+0xe6>
      break;
 80080f6:	bf00      	nop
 80080f8:	e00a      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;
 80080fa:	bf00      	nop
 80080fc:	e008      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;
 80080fe:	bf00      	nop
 8008100:	e006      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;
 8008102:	bf00      	nop
 8008104:	e004      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;
 8008106:	bf00      	nop
 8008108:	e002      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;   
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <DMA_CheckFifoParam+0xe8>
      break;
 800810e:	bf00      	nop
    }
  } 
  
  return status; 
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008132:	4b23      	ldr	r3, [pc, #140]	@ (80081c0 <HAL_FLASH_Program+0xa0>)
 8008134:	7e1b      	ldrb	r3, [r3, #24]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_FLASH_Program+0x1e>
 800813a:	2302      	movs	r3, #2
 800813c:	e03b      	b.n	80081b6 <HAL_FLASH_Program+0x96>
 800813e:	4b20      	ldr	r3, [pc, #128]	@ (80081c0 <HAL_FLASH_Program+0xa0>)
 8008140:	2201      	movs	r2, #1
 8008142:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008144:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008148:	f000 f870 	bl	800822c <FLASH_WaitForLastOperation>
 800814c:	4603      	mov	r3, r0
 800814e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d12b      	bne.n	80081ae <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800815c:	783b      	ldrb	r3, [r7, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	68b8      	ldr	r0, [r7, #8]
 8008162:	f000 f91b 	bl	800839c <FLASH_Program_Byte>
 8008166:	e016      	b.n	8008196 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d105      	bne.n	800817a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800816e:	883b      	ldrh	r3, [r7, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	68b8      	ldr	r0, [r7, #8]
 8008174:	f000 f8ee 	bl	8008354 <FLASH_Program_HalfWord>
 8008178:	e00d      	b.n	8008196 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d105      	bne.n	800818c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	68b8      	ldr	r0, [r7, #8]
 8008186:	f000 f8c3 	bl	8008310 <FLASH_Program_Word>
 800818a:	e004      	b.n	8008196 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800818c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008190:	68b8      	ldr	r0, [r7, #8]
 8008192:	f000 f88b 	bl	80082ac <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008196:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800819a:	f000 f847 	bl	800822c <FLASH_WaitForLastOperation>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80081a2:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <HAL_FLASH_Program+0xa4>)
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	4a07      	ldr	r2, [pc, #28]	@ (80081c4 <HAL_FLASH_Program+0xa4>)
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80081ae:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <HAL_FLASH_Program+0xa0>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	761a      	strb	r2, [r3, #24]

  return status;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20001104 	.word	0x20001104
 80081c4:	40023c00 	.word	0x40023c00

080081c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <HAL_FLASH_Unlock+0x38>)
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da0b      	bge.n	80081f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80081da:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <HAL_FLASH_Unlock+0x38>)
 80081dc:	4a09      	ldr	r2, [pc, #36]	@ (8008204 <HAL_FLASH_Unlock+0x3c>)
 80081de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80081e0:	4b07      	ldr	r3, [pc, #28]	@ (8008200 <HAL_FLASH_Unlock+0x38>)
 80081e2:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <HAL_FLASH_Unlock+0x40>)
 80081e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80081e6:	4b06      	ldr	r3, [pc, #24]	@ (8008200 <HAL_FLASH_Unlock+0x38>)
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da01      	bge.n	80081f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80081f2:	79fb      	ldrb	r3, [r7, #7]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40023c00 	.word	0x40023c00
 8008204:	45670123 	.word	0x45670123
 8008208:	cdef89ab 	.word	0xcdef89ab

0800820c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_FLASH_Lock+0x1c>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_FLASH_Lock+0x1c>)
 8008216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800821a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	40023c00 	.word	0x40023c00

0800822c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <FLASH_WaitForLastOperation+0x78>)
 800823a:	2200      	movs	r2, #0
 800823c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800823e:	f7ff faed 	bl	800781c <HAL_GetTick>
 8008242:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8008244:	e010      	b.n	8008268 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d00c      	beq.n	8008268 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <FLASH_WaitForLastOperation+0x38>
 8008254:	f7ff fae2 	bl	800781c <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d201      	bcs.n	8008268 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e019      	b.n	800829c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8008268:	4b0f      	ldr	r3, [pc, #60]	@ (80082a8 <FLASH_WaitForLastOperation+0x7c>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e8      	bne.n	8008246 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <FLASH_WaitForLastOperation+0x7c>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008280:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <FLASH_WaitForLastOperation+0x7c>)
 8008282:	2201      	movs	r2, #1
 8008284:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008286:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <FLASH_WaitForLastOperation+0x7c>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008292:	f000 f8a5 	bl	80083e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800829a:	2300      	movs	r3, #0

}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20001104 	.word	0x20001104
 80082a8:	40023c00 	.word	0x40023c00

080082ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80082b8:	4b14      	ldr	r3, [pc, #80]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	4a13      	ldr	r2, [pc, #76]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80082c4:	4b11      	ldr	r3, [pc, #68]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	4a10      	ldr	r2, [pc, #64]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80082ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a0d      	ldr	r2, [pc, #52]	@ (800830c <FLASH_Program_DoubleWord+0x60>)
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80082e2:	f3bf 8f6f 	isb	sy
}
 80082e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80082e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	000a      	movs	r2, r1
 80082f6:	2300      	movs	r3, #0
 80082f8:	68f9      	ldr	r1, [r7, #12]
 80082fa:	3104      	adds	r1, #4
 80082fc:	4613      	mov	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40023c00 	.word	0x40023c00

08008310 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800831a:	4b0d      	ldr	r3, [pc, #52]	@ (8008350 <FLASH_Program_Word+0x40>)
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	4a0c      	ldr	r2, [pc, #48]	@ (8008350 <FLASH_Program_Word+0x40>)
 8008320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008324:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008326:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <FLASH_Program_Word+0x40>)
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <FLASH_Program_Word+0x40>)
 800832c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008332:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <FLASH_Program_Word+0x40>)
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	4a06      	ldr	r2, [pc, #24]	@ (8008350 <FLASH_Program_Word+0x40>)
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	601a      	str	r2, [r3, #0]
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40023c00 	.word	0x40023c00

08008354 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008360:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4a0c      	ldr	r2, [pc, #48]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 8008366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800836a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4a09      	ldr	r2, [pc, #36]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 8008372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008378:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	4a06      	ldr	r2, [pc, #24]	@ (8008398 <FLASH_Program_HalfWord+0x44>)
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	887a      	ldrh	r2, [r7, #2]
 8008388:	801a      	strh	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40023c00 	.word	0x40023c00

0800839c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083a8:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	4a0b      	ldr	r2, [pc, #44]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083b6:	4a09      	ldr	r2, [pc, #36]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80083bc:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	4a06      	ldr	r2, [pc, #24]	@ (80083dc <FLASH_Program_Byte+0x40>)
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	701a      	strb	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40023c00 	.word	0x40023c00

080083e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80083e4:	4b2f      	ldr	r3, [pc, #188]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80083f0:	4b2d      	ldr	r3, [pc, #180]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f043 0310 	orr.w	r3, r3, #16
 80083f8:	4a2b      	ldr	r2, [pc, #172]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 80083fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80083fc:	4b29      	ldr	r3, [pc, #164]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 80083fe:	2210      	movs	r2, #16
 8008400:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008402:	4b28      	ldr	r3, [pc, #160]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d008      	beq.n	8008420 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800840e:	4b26      	ldr	r3, [pc, #152]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	4a24      	ldr	r2, [pc, #144]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008418:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800841a:	4b22      	ldr	r3, [pc, #136]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 800841c:	2220      	movs	r2, #32
 800841e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008420:	4b20      	ldr	r3, [pc, #128]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800842c:	4b1e      	ldr	r3, [pc, #120]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f043 0304 	orr.w	r3, r3, #4
 8008434:	4a1c      	ldr	r2, [pc, #112]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008436:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008438:	4b1a      	ldr	r3, [pc, #104]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 800843a:	2240      	movs	r2, #64	@ 0x40
 800843c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800843e:	4b19      	ldr	r3, [pc, #100]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800844a:	4b17      	ldr	r3, [pc, #92]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f043 0302 	orr.w	r3, r3, #2
 8008452:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008454:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008456:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008458:	2280      	movs	r2, #128	@ 0x80
 800845a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800845c:	4b11      	ldr	r3, [pc, #68]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008468:	4b0f      	ldr	r3, [pc, #60]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	4a0d      	ldr	r2, [pc, #52]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008472:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8008474:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800847a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800847c:	4b09      	ldr	r3, [pc, #36]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008488:	4b07      	ldr	r3, [pc, #28]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	f043 0320 	orr.w	r3, r3, #32
 8008490:	4a05      	ldr	r2, [pc, #20]	@ (80084a8 <FLASH_SetErrorCode+0xc8>)
 8008492:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008494:	4b03      	ldr	r3, [pc, #12]	@ (80084a4 <FLASH_SetErrorCode+0xc4>)
 8008496:	2202      	movs	r2, #2
 8008498:	60da      	str	r2, [r3, #12]
  }
}
 800849a:	bf00      	nop
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40023c00 	.word	0x40023c00
 80084a8:	20001104 	.word	0x20001104

080084ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80084be:	4b31      	ldr	r3, [pc, #196]	@ (8008584 <HAL_FLASHEx_Erase+0xd8>)
 80084c0:	7e1b      	ldrb	r3, [r3, #24]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_FLASHEx_Erase+0x1e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e058      	b.n	800857c <HAL_FLASHEx_Erase+0xd0>
 80084ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008584 <HAL_FLASHEx_Erase+0xd8>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80084d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80084d4:	f7ff feaa 	bl	800822c <FLASH_WaitForLastOperation>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d148      	bne.n	8008574 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d115      	bne.n	800851e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f000 f844 	bl	800858c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008504:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008508:	f7ff fe90 	bl	800822c <FLASH_WaitForLastOperation>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008510:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <HAL_FLASHEx_Erase+0xdc>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	4a1c      	ldr	r2, [pc, #112]	@ (8008588 <HAL_FLASHEx_Erase+0xdc>)
 8008516:	f023 0304 	bic.w	r3, r3, #4
 800851a:	6113      	str	r3, [r2, #16]
 800851c:	e028      	b.n	8008570 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	60bb      	str	r3, [r7, #8]
 8008524:	e01c      	b.n	8008560 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	4619      	mov	r1, r3
 800852e:	68b8      	ldr	r0, [r7, #8]
 8008530:	f000 f850 	bl	80085d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008534:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008538:	f7ff fe78 	bl	800822c <FLASH_WaitForLastOperation>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008540:	4b11      	ldr	r3, [pc, #68]	@ (8008588 <HAL_FLASHEx_Erase+0xdc>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4a10      	ldr	r2, [pc, #64]	@ (8008588 <HAL_FLASHEx_Erase+0xdc>)
 8008546:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800854a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	601a      	str	r2, [r3, #0]
          break;
 8008558:	e00a      	b.n	8008570 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	3301      	adds	r3, #1
 800855e:	60bb      	str	r3, [r7, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	4413      	add	r3, r2
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d3da      	bcc.n	8008526 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008570:	f000 f878 	bl	8008664 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008574:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <HAL_FLASHEx_Erase+0xd8>)
 8008576:	2200      	movs	r2, #0
 8008578:	761a      	strb	r2, [r3, #24]

  return status;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20001104 	.word	0x20001104
 8008588:	40023c00 	.word	0x40023c00

0800858c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008598:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <FLASH_MassErase+0x44>)
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <FLASH_MassErase+0x44>)
 800859e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80085a4:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <FLASH_MassErase+0x44>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	4a09      	ldr	r2, [pc, #36]	@ (80085d0 <FLASH_MassErase+0x44>)
 80085aa:	f043 0304 	orr.w	r3, r3, #4
 80085ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80085b0:	4b07      	ldr	r3, [pc, #28]	@ (80085d0 <FLASH_MassErase+0x44>)
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	4313      	orrs	r3, r2
 80085ba:	4a05      	ldr	r2, [pc, #20]	@ (80085d0 <FLASH_MassErase+0x44>)
 80085bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c0:	6113      	str	r3, [r2, #16]
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40023c00 	.word	0x40023c00

080085d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	e010      	b.n	8008612 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d103      	bne.n	80085fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80085f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e009      	b.n	8008612 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d103      	bne.n	800860c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e002      	b.n	8008612 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800860c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008610:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008612:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	4a12      	ldr	r2, [pc, #72]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800861e:	4b10      	ldr	r3, [pc, #64]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008620:	691a      	ldr	r2, [r3, #16]
 8008622:	490f      	ldr	r1, [pc, #60]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800862a:	4b0d      	ldr	r3, [pc, #52]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	4a0c      	ldr	r2, [pc, #48]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008630:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008634:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008636:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008638:	691a      	ldr	r2, [r3, #16]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4313      	orrs	r3, r2
 8008640:	4a07      	ldr	r2, [pc, #28]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <FLASH_Erase_Sector+0x8c>)
 800864e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008652:	6113      	str	r3, [r2, #16]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	40023c00 	.word	0x40023c00

08008664 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008668:	4b20      	ldr	r3, [pc, #128]	@ (80086ec <FLASH_FlushCaches+0x88>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008670:	2b00      	cmp	r3, #0
 8008672:	d017      	beq.n	80086a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008674:	4b1d      	ldr	r3, [pc, #116]	@ (80086ec <FLASH_FlushCaches+0x88>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1c      	ldr	r2, [pc, #112]	@ (80086ec <FLASH_FlushCaches+0x88>)
 800867a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800867e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008680:	4b1a      	ldr	r3, [pc, #104]	@ (80086ec <FLASH_FlushCaches+0x88>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a19      	ldr	r2, [pc, #100]	@ (80086ec <FLASH_FlushCaches+0x88>)
 8008686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	4b17      	ldr	r3, [pc, #92]	@ (80086ec <FLASH_FlushCaches+0x88>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a16      	ldr	r2, [pc, #88]	@ (80086ec <FLASH_FlushCaches+0x88>)
 8008692:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008696:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008698:	4b14      	ldr	r3, [pc, #80]	@ (80086ec <FLASH_FlushCaches+0x88>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a13      	ldr	r2, [pc, #76]	@ (80086ec <FLASH_FlushCaches+0x88>)
 800869e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80086a4:	4b11      	ldr	r3, [pc, #68]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d017      	beq.n	80086e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80086b0:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a0d      	ldr	r2, [pc, #52]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80086bc:	4b0b      	ldr	r3, [pc, #44]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	4b08      	ldr	r3, [pc, #32]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a07      	ldr	r2, [pc, #28]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a04      	ldr	r2, [pc, #16]	@ (80086ec <FLASH_FlushCaches+0x88>)
 80086da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086de:	6013      	str	r3, [r2, #0]
  }
}
 80086e0:	bf00      	nop
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40023c00 	.word	0x40023c00

080086f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b089      	sub	sp, #36	@ 0x24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e165      	b.n	80089d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800870c:	2201      	movs	r2, #1
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	4013      	ands	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	429a      	cmp	r2, r3
 8008726:	f040 8154 	bne.w	80089d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	2b01      	cmp	r3, #1
 8008734:	d005      	beq.n	8008742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800873e:	2b02      	cmp	r3, #2
 8008740:	d130      	bne.n	80087a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	2203      	movs	r2, #3
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	4313      	orrs	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008778:	2201      	movs	r2, #1
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	091b      	lsrs	r3, r3, #4
 800878e:	f003 0201 	and.w	r2, r3, #1
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4313      	orrs	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d017      	beq.n	80087e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	2203      	movs	r2, #3
 80087bc:	fa02 f303 	lsl.w	r3, r2, r3
 80087c0:	43db      	mvns	r3, r3
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	4013      	ands	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d123      	bne.n	8008834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	08da      	lsrs	r2, r3, #3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3208      	adds	r2, #8
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	220f      	movs	r2, #15
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	43db      	mvns	r3, r3
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	4013      	ands	r3, r2
 800880e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	4313      	orrs	r3, r2
 8008824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	08da      	lsrs	r2, r3, #3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3208      	adds	r2, #8
 800882e:	69b9      	ldr	r1, [r7, #24]
 8008830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	2203      	movs	r2, #3
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	43db      	mvns	r3, r3
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	4013      	ands	r3, r2
 800884a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 0203 	and.w	r2, r3, #3
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	4313      	orrs	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80ae 	beq.w	80089d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	4b5d      	ldr	r3, [pc, #372]	@ (80089f0 <HAL_GPIO_Init+0x300>)
 800887c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887e:	4a5c      	ldr	r2, [pc, #368]	@ (80089f0 <HAL_GPIO_Init+0x300>)
 8008880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008884:	6453      	str	r3, [r2, #68]	@ 0x44
 8008886:	4b5a      	ldr	r3, [pc, #360]	@ (80089f0 <HAL_GPIO_Init+0x300>)
 8008888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800888a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008892:	4a58      	ldr	r2, [pc, #352]	@ (80089f4 <HAL_GPIO_Init+0x304>)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	089b      	lsrs	r3, r3, #2
 8008898:	3302      	adds	r3, #2
 800889a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	220f      	movs	r2, #15
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	43db      	mvns	r3, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	4013      	ands	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a4f      	ldr	r2, [pc, #316]	@ (80089f8 <HAL_GPIO_Init+0x308>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d025      	beq.n	800890a <HAL_GPIO_Init+0x21a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a4e      	ldr	r2, [pc, #312]	@ (80089fc <HAL_GPIO_Init+0x30c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01f      	beq.n	8008906 <HAL_GPIO_Init+0x216>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a4d      	ldr	r2, [pc, #308]	@ (8008a00 <HAL_GPIO_Init+0x310>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d019      	beq.n	8008902 <HAL_GPIO_Init+0x212>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a4c      	ldr	r2, [pc, #304]	@ (8008a04 <HAL_GPIO_Init+0x314>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_GPIO_Init+0x20e>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008a08 <HAL_GPIO_Init+0x318>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00d      	beq.n	80088fa <HAL_GPIO_Init+0x20a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a4a      	ldr	r2, [pc, #296]	@ (8008a0c <HAL_GPIO_Init+0x31c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d007      	beq.n	80088f6 <HAL_GPIO_Init+0x206>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a49      	ldr	r2, [pc, #292]	@ (8008a10 <HAL_GPIO_Init+0x320>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d101      	bne.n	80088f2 <HAL_GPIO_Init+0x202>
 80088ee:	2306      	movs	r3, #6
 80088f0:	e00c      	b.n	800890c <HAL_GPIO_Init+0x21c>
 80088f2:	2307      	movs	r3, #7
 80088f4:	e00a      	b.n	800890c <HAL_GPIO_Init+0x21c>
 80088f6:	2305      	movs	r3, #5
 80088f8:	e008      	b.n	800890c <HAL_GPIO_Init+0x21c>
 80088fa:	2304      	movs	r3, #4
 80088fc:	e006      	b.n	800890c <HAL_GPIO_Init+0x21c>
 80088fe:	2303      	movs	r3, #3
 8008900:	e004      	b.n	800890c <HAL_GPIO_Init+0x21c>
 8008902:	2302      	movs	r3, #2
 8008904:	e002      	b.n	800890c <HAL_GPIO_Init+0x21c>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <HAL_GPIO_Init+0x21c>
 800890a:	2300      	movs	r3, #0
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	f002 0203 	and.w	r2, r2, #3
 8008912:	0092      	lsls	r2, r2, #2
 8008914:	4093      	lsls	r3, r2
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800891c:	4935      	ldr	r1, [pc, #212]	@ (80089f4 <HAL_GPIO_Init+0x304>)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	3302      	adds	r3, #2
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800892a:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	43db      	mvns	r3, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4013      	ands	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800894e:	4a31      	ldr	r2, [pc, #196]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008954:	4b2f      	ldr	r3, [pc, #188]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	43db      	mvns	r3, r3
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	4013      	ands	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008978:	4a26      	ldr	r2, [pc, #152]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800897e:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80089a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80089a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4013      	ands	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80089cc:	4a11      	ldr	r2, [pc, #68]	@ (8008a14 <HAL_GPIO_Init+0x324>)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	3301      	adds	r3, #1
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	f67f ae96 	bls.w	800870c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80089e0:	bf00      	nop
 80089e2:	bf00      	nop
 80089e4:	3724      	adds	r7, #36	@ 0x24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	40023800 	.word	0x40023800
 80089f4:	40013800 	.word	0x40013800
 80089f8:	40020000 	.word	0x40020000
 80089fc:	40020400 	.word	0x40020400
 8008a00:	40020800 	.word	0x40020800
 8008a04:	40020c00 	.word	0x40020c00
 8008a08:	40021000 	.word	0x40021000
 8008a0c:	40021400 	.word	0x40021400
 8008a10:	40021800 	.word	0x40021800
 8008a14:	40013c00 	.word	0x40013c00

08008a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	887b      	ldrh	r3, [r7, #2]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a30:	2301      	movs	r3, #1
 8008a32:	73fb      	strb	r3, [r7, #15]
 8008a34:	e001      	b.n	8008a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	807b      	strh	r3, [r7, #2]
 8008a54:	4613      	mov	r3, r2
 8008a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a58:	787b      	ldrb	r3, [r7, #1]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a5e:	887a      	ldrh	r2, [r7, #2]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a64:	e003      	b.n	8008a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a66:	887b      	ldrh	r3, [r7, #2]
 8008a68:	041a      	lsls	r2, r3, #16
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	619a      	str	r2, [r3, #24]
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a8c:	887a      	ldrh	r2, [r7, #2]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4013      	ands	r3, r2
 8008a92:	041a      	lsls	r2, r3, #16
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	43d9      	mvns	r1, r3
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	619a      	str	r2, [r3, #24]
}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008aba:	4b08      	ldr	r3, [pc, #32]	@ (8008adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d006      	beq.n	8008ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ac6:	4a05      	ldr	r2, [pc, #20]	@ (8008adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fc fb76 	bl	80051c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40013c00 	.word	0x40013c00

08008ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e12b      	b.n	8008d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fc f9b2 	bl	8004e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2224      	movs	r2, #36	@ 0x24
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b44:	f001 f934 	bl	8009db0 <HAL_RCC_GetPCLK1Freq>
 8008b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4a81      	ldr	r2, [pc, #516]	@ (8008d54 <HAL_I2C_Init+0x274>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d807      	bhi.n	8008b64 <HAL_I2C_Init+0x84>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4a80      	ldr	r2, [pc, #512]	@ (8008d58 <HAL_I2C_Init+0x278>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	bf94      	ite	ls
 8008b5c:	2301      	movls	r3, #1
 8008b5e:	2300      	movhi	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	e006      	b.n	8008b72 <HAL_I2C_Init+0x92>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4a7d      	ldr	r2, [pc, #500]	@ (8008d5c <HAL_I2C_Init+0x27c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	bf94      	ite	ls
 8008b6c:	2301      	movls	r3, #1
 8008b6e:	2300      	movhi	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e0e7      	b.n	8008d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4a78      	ldr	r2, [pc, #480]	@ (8008d60 <HAL_I2C_Init+0x280>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	0c9b      	lsrs	r3, r3, #18
 8008b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8008d54 <HAL_I2C_Init+0x274>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d802      	bhi.n	8008bb4 <HAL_I2C_Init+0xd4>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	e009      	b.n	8008bc8 <HAL_I2C_Init+0xe8>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	4a69      	ldr	r2, [pc, #420]	@ (8008d64 <HAL_I2C_Init+0x284>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	099b      	lsrs	r3, r3, #6
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	495c      	ldr	r1, [pc, #368]	@ (8008d54 <HAL_I2C_Init+0x274>)
 8008be4:	428b      	cmp	r3, r1
 8008be6:	d819      	bhi.n	8008c1c <HAL_I2C_Init+0x13c>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	1e59      	subs	r1, r3, #1
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bf6:	1c59      	adds	r1, r3, #1
 8008bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008bfc:	400b      	ands	r3, r1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <HAL_I2C_Init+0x138>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1e59      	subs	r1, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c10:	3301      	adds	r3, #1
 8008c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c16:	e051      	b.n	8008cbc <HAL_I2C_Init+0x1dc>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	e04f      	b.n	8008cbc <HAL_I2C_Init+0x1dc>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d111      	bne.n	8008c48 <HAL_I2C_Init+0x168>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1e58      	subs	r0, r3, #1
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6859      	ldr	r1, [r3, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	440b      	add	r3, r1
 8008c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c36:	3301      	adds	r3, #1
 8008c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bf0c      	ite	eq
 8008c40:	2301      	moveq	r3, #1
 8008c42:	2300      	movne	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	e012      	b.n	8008c6e <HAL_I2C_Init+0x18e>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	1e58      	subs	r0, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6859      	ldr	r1, [r3, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	0099      	lsls	r1, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c5e:	3301      	adds	r3, #1
 8008c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf0c      	ite	eq
 8008c68:	2301      	moveq	r3, #1
 8008c6a:	2300      	movne	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_I2C_Init+0x196>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e022      	b.n	8008cbc <HAL_I2C_Init+0x1dc>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10e      	bne.n	8008c9c <HAL_I2C_Init+0x1bc>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1e58      	subs	r0, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6859      	ldr	r1, [r3, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	440b      	add	r3, r1
 8008c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c90:	3301      	adds	r3, #1
 8008c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9a:	e00f      	b.n	8008cbc <HAL_I2C_Init+0x1dc>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1e58      	subs	r0, r3, #1
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6859      	ldr	r1, [r3, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	0099      	lsls	r1, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	6809      	ldr	r1, [r1, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69da      	ldr	r2, [r3, #28]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6911      	ldr	r1, [r2, #16]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68d2      	ldr	r2, [r2, #12]
 8008cf6:	4311      	orrs	r1, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695a      	ldr	r2, [r3, #20]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	000186a0 	.word	0x000186a0
 8008d58:	001e847f 	.word	0x001e847f
 8008d5c:	003d08ff 	.word	0x003d08ff
 8008d60:	431bde83 	.word	0x431bde83
 8008d64:	10624dd3 	.word	0x10624dd3

08008d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	817b      	strh	r3, [r7, #10]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	813b      	strh	r3, [r7, #8]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d82:	f7fe fd4b 	bl	800781c <HAL_GetTick>
 8008d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	f040 80d9 	bne.w	8008f48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2319      	movs	r3, #25
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	496d      	ldr	r1, [pc, #436]	@ (8008f54 <HAL_I2C_Mem_Write+0x1ec>)
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fc8b 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008dac:	2302      	movs	r3, #2
 8008dae:	e0cc      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_I2C_Mem_Write+0x56>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e0c5      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d007      	beq.n	8008de4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0201 	orr.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2221      	movs	r2, #33	@ 0x21
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2240      	movs	r2, #64	@ 0x40
 8008e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a3a      	ldr	r2, [r7, #32]
 8008e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a4d      	ldr	r2, [pc, #308]	@ (8008f58 <HAL_I2C_Mem_Write+0x1f0>)
 8008e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e26:	88f8      	ldrh	r0, [r7, #6]
 8008e28:	893a      	ldrh	r2, [r7, #8]
 8008e2a:	8979      	ldrh	r1, [r7, #10]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4603      	mov	r3, r0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fac2 	bl	80093c0 <I2C_RequestMemoryWrite>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d052      	beq.n	8008ee8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e081      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fd50 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00d      	beq.n	8008e72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d107      	bne.n	8008e6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e06b      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d11b      	bne.n	8008ee8 <HAL_I2C_Mem_Write+0x180>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d017      	beq.n	8008ee8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1aa      	bne.n	8008e46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 fd43 	bl	8009980 <I2C_WaitOnBTFFlagUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00d      	beq.n	8008f1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d107      	bne.n	8008f18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e016      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e000      	b.n	8008f4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	00100002 	.word	0x00100002
 8008f58:	ffff0000 	.word	0xffff0000

08008f5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08c      	sub	sp, #48	@ 0x30
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	817b      	strh	r3, [r7, #10]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	813b      	strh	r3, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f76:	f7fe fc51 	bl	800781c <HAL_GetTick>
 8008f7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	f040 8214 	bne.w	80093b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	2319      	movs	r3, #25
 8008f90:	2201      	movs	r2, #1
 8008f92:	497b      	ldr	r1, [pc, #492]	@ (8009180 <HAL_I2C_Mem_Read+0x224>)
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fb91 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e207      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_I2C_Mem_Read+0x56>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e200      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d007      	beq.n	8008fd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2222      	movs	r2, #34	@ 0x22
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2240      	movs	r2, #64	@ 0x40
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a5b      	ldr	r2, [pc, #364]	@ (8009184 <HAL_I2C_Mem_Read+0x228>)
 8009018:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800901a:	88f8      	ldrh	r0, [r7, #6]
 800901c:	893a      	ldrh	r2, [r7, #8]
 800901e:	8979      	ldrh	r1, [r7, #10]
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4603      	mov	r3, r0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fa5e 	bl	80094ec <I2C_RequestMemoryRead>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e1bc      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d113      	bne.n	800906a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009042:	2300      	movs	r3, #0
 8009044:	623b      	str	r3, [r7, #32]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	623b      	str	r3, [r7, #32]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	623b      	str	r3, [r7, #32]
 8009056:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e190      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800906e:	2b01      	cmp	r3, #1
 8009070:	d11b      	bne.n	80090aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	61fb      	str	r3, [r7, #28]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e170      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d11b      	bne.n	80090ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090d2:	2300      	movs	r3, #0
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	e150      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009100:	e144      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009106:	2b03      	cmp	r3, #3
 8009108:	f200 80f1 	bhi.w	80092ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009110:	2b01      	cmp	r3, #1
 8009112:	d123      	bne.n	800915c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009116:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fc79 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e145      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691a      	ldr	r2, [r3, #16]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800915a:	e117      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009160:	2b02      	cmp	r3, #2
 8009162:	d14e      	bne.n	8009202 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916a:	2200      	movs	r2, #0
 800916c:	4906      	ldr	r1, [pc, #24]	@ (8009188 <HAL_I2C_Mem_Read+0x22c>)
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 faa4 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d008      	beq.n	800918c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e11a      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
 800917e:	bf00      	nop
 8009180:	00100002 	.word	0x00100002
 8009184:	ffff0000 	.word	0xffff0000
 8009188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800919a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691a      	ldr	r2, [r3, #16]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009200:	e0c4      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	2200      	movs	r2, #0
 800920a:	496c      	ldr	r1, [pc, #432]	@ (80093bc <HAL_I2C_Mem_Read+0x460>)
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 fa55 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e0cb      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800922a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009254:	b29b      	uxth	r3, r3
 8009256:	3b01      	subs	r3, #1
 8009258:	b29a      	uxth	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009264:	2200      	movs	r2, #0
 8009266:	4955      	ldr	r1, [pc, #340]	@ (80093bc <HAL_I2C_Mem_Read+0x460>)
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fa27 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e09d      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	b2d2      	uxtb	r2, r2
 80092c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092ec:	e04e      	b.n	800938c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fb8c 	bl	8009a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e058      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931e:	3b01      	subs	r3, #1
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	f003 0304 	and.w	r3, r3, #4
 800933e:	2b04      	cmp	r3, #4
 8009340:	d124      	bne.n	800938c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009346:	2b03      	cmp	r3, #3
 8009348:	d107      	bne.n	800935a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009358:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	f47f aeb6 	bne.w	8009102 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e000      	b.n	80093b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80093b2:	2302      	movs	r3, #2
  }
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3728      	adds	r7, #40	@ 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	00010004 	.word	0x00010004

080093c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	817b      	strh	r3, [r7, #10]
 80093d2:	460b      	mov	r3, r1
 80093d4:	813b      	strh	r3, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f960 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009410:	d103      	bne.n	800941a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e05f      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800941e:	897b      	ldrh	r3, [r7, #10]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800942c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	6a3a      	ldr	r2, [r7, #32]
 8009432:	492d      	ldr	r1, [pc, #180]	@ (80094e8 <I2C_RequestMemoryWrite+0x128>)
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f9bb 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e04c      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 fa46 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	2b04      	cmp	r3, #4
 8009470:	d107      	bne.n	8009482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e02b      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d105      	bne.n	8009498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	611a      	str	r2, [r3, #16]
 8009496:	e021      	b.n	80094dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009498:	893b      	ldrh	r3, [r7, #8]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a8:	6a39      	ldr	r1, [r7, #32]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fa20 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d107      	bne.n	80094ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e005      	b.n	80094de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	00010002 	.word	0x00010002

080094ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	817b      	strh	r3, [r7, #10]
 80094fe:	460b      	mov	r3, r1
 8009500:	813b      	strh	r3, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2200      	movs	r2, #0
 800952e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f8c2 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954c:	d103      	bne.n	8009556 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e0aa      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800955a:	897b      	ldrh	r3, [r7, #10]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	4952      	ldr	r1, [pc, #328]	@ (80096b8 <I2C_RequestMemoryRead+0x1cc>)
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f91d 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e097      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009598:	6a39      	ldr	r1, [r7, #32]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f9a8 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d107      	bne.n	80095be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e076      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d105      	bne.n	80095d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c8:	893b      	ldrh	r3, [r7, #8]
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	611a      	str	r2, [r3, #16]
 80095d2:	e021      	b.n	8009618 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095d4:	893b      	ldrh	r3, [r7, #8]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b29b      	uxth	r3, r3
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e4:	6a39      	ldr	r1, [r7, #32]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f982 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00d      	beq.n	800960e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d107      	bne.n	800960a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e050      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961a:	6a39      	ldr	r1, [r7, #32]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f967 	bl	80098f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00d      	beq.n	8009644 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	2b04      	cmp	r3, #4
 800962e:	d107      	bne.n	8009640 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800963e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e035      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	2200      	movs	r2, #0
 800965c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f82b 	bl	80096bc <I2C_WaitOnFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00d      	beq.n	8009688 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800967a:	d103      	bne.n	8009684 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e013      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009688:	897b      	ldrh	r3, [r7, #10]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	6a3a      	ldr	r2, [r7, #32]
 800969c:	4906      	ldr	r1, [pc, #24]	@ (80096b8 <I2C_RequestMemoryRead+0x1cc>)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f886 	bl	80097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	00010002 	.word	0x00010002

080096bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096cc:	e048      	b.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d044      	beq.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fe f8a1 	bl	800781c <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d139      	bne.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d10d      	bne.n	8009712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	43da      	mvns	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4013      	ands	r3, r2
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf0c      	ite	eq
 8009708:	2301      	moveq	r3, #1
 800970a:	2300      	movne	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	e00c      	b.n	800972c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	43da      	mvns	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	4013      	ands	r3, r2
 800971e:	b29b      	uxth	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf0c      	ite	eq
 8009724:	2301      	moveq	r3, #1
 8009726:	2300      	movne	r3, #0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	461a      	mov	r2, r3
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	429a      	cmp	r2, r3
 8009730:	d116      	bne.n	8009760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974c:	f043 0220 	orr.w	r2, r3, #32
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e023      	b.n	80097a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	0c1b      	lsrs	r3, r3, #16
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b01      	cmp	r3, #1
 8009768:	d10d      	bne.n	8009786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	43da      	mvns	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4013      	ands	r3, r2
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf0c      	ite	eq
 800977c:	2301      	moveq	r3, #1
 800977e:	2300      	movne	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	461a      	mov	r2, r3
 8009784:	e00c      	b.n	80097a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	43da      	mvns	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4013      	ands	r3, r2
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	bf0c      	ite	eq
 8009798:	2301      	moveq	r3, #1
 800979a:	2300      	movne	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d093      	beq.n	80096ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097be:	e071      	b.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ce:	d123      	bne.n	8009818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009804:	f043 0204 	orr.w	r2, r3, #4
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e067      	b.n	80098e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981e:	d041      	beq.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009820:	f7fd fffc 	bl	800781c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	429a      	cmp	r2, r3
 800982e:	d302      	bcc.n	8009836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d136      	bne.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	d10c      	bne.n	800985a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	43da      	mvns	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4013      	ands	r3, r2
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	bf14      	ite	ne
 8009852:	2301      	movne	r3, #1
 8009854:	2300      	moveq	r3, #0
 8009856:	b2db      	uxtb	r3, r3
 8009858:	e00b      	b.n	8009872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	43da      	mvns	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4013      	ands	r3, r2
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009890:	f043 0220 	orr.w	r2, r3, #32
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e021      	b.n	80098e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d10c      	bne.n	80098c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	43da      	mvns	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4013      	ands	r3, r2
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bf14      	ite	ne
 80098c0:	2301      	movne	r3, #1
 80098c2:	2300      	moveq	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	e00b      	b.n	80098e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	43da      	mvns	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4013      	ands	r3, r2
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bf14      	ite	ne
 80098da:	2301      	movne	r3, #1
 80098dc:	2300      	moveq	r3, #0
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f47f af6d 	bne.w	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098fc:	e034      	b.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f8e3 	bl	8009aca <I2C_IsAcknowledgeFailed>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e034      	b.n	8009978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d028      	beq.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fd ff81 	bl	800781c <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11d      	bne.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d016      	beq.n	8009968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	f043 0220 	orr.w	r2, r3, #32
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e007      	b.n	8009978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009972:	2b80      	cmp	r3, #128	@ 0x80
 8009974:	d1c3      	bne.n	80098fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800998c:	e034      	b.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f89b 	bl	8009aca <I2C_IsAcknowledgeFailed>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e034      	b.n	8009a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d028      	beq.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a6:	f7fd ff39 	bl	800781c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d302      	bcc.n	80099bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11d      	bne.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d016      	beq.n	80099f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	f043 0220 	orr.w	r2, r3, #32
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e007      	b.n	8009a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d1c3      	bne.n	800998e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a1c:	e049      	b.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d119      	bne.n	8009a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0210 	mvn.w	r2, #16
 8009a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e030      	b.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a60:	f7fd fedc 	bl	800781c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d11d      	bne.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b40      	cmp	r3, #64	@ 0x40
 8009a82:	d016      	beq.n	8009ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9e:	f043 0220 	orr.w	r2, r3, #32
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e007      	b.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009abc:	2b40      	cmp	r3, #64	@ 0x40
 8009abe:	d1ae      	bne.n	8009a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae0:	d11b      	bne.n	8009b1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009aea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b06:	f043 0204 	orr.w	r2, r3, #4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e034      	b.n	8009ba4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8009b42:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f245 5255 	movw	r2, #21845	@ 0x5555
 8009b4c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6852      	ldr	r2, [r2, #4]
 8009b56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6892      	ldr	r2, [r2, #8]
 8009b60:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009b62:	f7fd fe5b 	bl	800781c <HAL_GetTick>
 8009b66:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b68:	e00f      	b.n	8009b8a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009b6a:	f7fd fe57 	bl	800781c <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b31      	cmp	r3, #49	@ 0x31
 8009b76:	d908      	bls.n	8009b8a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e00c      	b.n	8009ba4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0303 	and.w	r3, r3, #3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e8      	bne.n	8009b6a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009bbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e0cc      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009be0:	4b68      	ldr	r3, [pc, #416]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d90c      	bls.n	8009c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bee:	4b65      	ldr	r3, [pc, #404]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bf6:	4b63      	ldr	r3, [pc, #396]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d001      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0b8      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d020      	beq.n	8009c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c20:	4b59      	ldr	r3, [pc, #356]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	4a58      	ldr	r2, [pc, #352]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c38:	4b53      	ldr	r3, [pc, #332]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	4a52      	ldr	r2, [pc, #328]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c44:	4b50      	ldr	r3, [pc, #320]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	494d      	ldr	r1, [pc, #308]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d044      	beq.n	8009cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d107      	bne.n	8009c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c6a:	4b47      	ldr	r3, [pc, #284]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d119      	bne.n	8009caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e07f      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d003      	beq.n	8009c8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d107      	bne.n	8009c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d109      	bne.n	8009caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e06f      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e067      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009caa:	4b37      	ldr	r3, [pc, #220]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f023 0203 	bic.w	r2, r3, #3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	4934      	ldr	r1, [pc, #208]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009cbc:	f7fd fdae 	bl	800781c <HAL_GetTick>
 8009cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc2:	e00a      	b.n	8009cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cc4:	f7fd fdaa 	bl	800781c <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e04f      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cda:	4b2b      	ldr	r3, [pc, #172]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f003 020c 	and.w	r2, r3, #12
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d1eb      	bne.n	8009cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cec:	4b25      	ldr	r3, [pc, #148]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d20c      	bcs.n	8009d14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cfa:	4b22      	ldr	r3, [pc, #136]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d02:	4b20      	ldr	r3, [pc, #128]	@ (8009d84 <HAL_RCC_ClockConfig+0x1b8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d001      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e032      	b.n	8009d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d008      	beq.n	8009d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d20:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	4916      	ldr	r1, [pc, #88]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d3e:	4b12      	ldr	r3, [pc, #72]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	490e      	ldr	r1, [pc, #56]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009d52:	f000 f887 	bl	8009e64 <HAL_RCC_GetSysClockFreq>
 8009d56:	4602      	mov	r2, r0
 8009d58:	4b0b      	ldr	r3, [pc, #44]	@ (8009d88 <HAL_RCC_ClockConfig+0x1bc>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	091b      	lsrs	r3, r3, #4
 8009d5e:	f003 030f 	and.w	r3, r3, #15
 8009d62:	490a      	ldr	r1, [pc, #40]	@ (8009d8c <HAL_RCC_ClockConfig+0x1c0>)
 8009d64:	5ccb      	ldrb	r3, [r1, r3]
 8009d66:	fa22 f303 	lsr.w	r3, r2, r3
 8009d6a:	4a09      	ldr	r2, [pc, #36]	@ (8009d90 <HAL_RCC_ClockConfig+0x1c4>)
 8009d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009d6e:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <HAL_RCC_ClockConfig+0x1c8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fd f82a 	bl	8006dcc <HAL_InitTick>

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	40023c00 	.word	0x40023c00
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	080130e0 	.word	0x080130e0
 8009d90:	2000003c 	.word	0x2000003c
 8009d94:	20000040 	.word	0x20000040

08009d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d9c:	4b03      	ldr	r3, [pc, #12]	@ (8009dac <HAL_RCC_GetHCLKFreq+0x14>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	2000003c 	.word	0x2000003c

08009db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009db4:	f7ff fff0 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8009db8:	4602      	mov	r2, r0
 8009dba:	4b05      	ldr	r3, [pc, #20]	@ (8009dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	0a9b      	lsrs	r3, r3, #10
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	4903      	ldr	r1, [pc, #12]	@ (8009dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dc6:	5ccb      	ldrb	r3, [r1, r3]
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	40023800 	.word	0x40023800
 8009dd4:	080130f0 	.word	0x080130f0

08009dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ddc:	f7ff ffdc 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8009de0:	4602      	mov	r2, r0
 8009de2:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	0b5b      	lsrs	r3, r3, #13
 8009de8:	f003 0307 	and.w	r3, r3, #7
 8009dec:	4903      	ldr	r1, [pc, #12]	@ (8009dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dee:	5ccb      	ldrb	r3, [r1, r3]
 8009df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	080130f0 	.word	0x080130f0

08009e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	220f      	movs	r2, #15
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009e10:	4b12      	ldr	r3, [pc, #72]	@ (8009e5c <HAL_RCC_GetClockConfig+0x5c>)
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f003 0203 	and.w	r2, r3, #3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e5c <HAL_RCC_GetClockConfig+0x5c>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009e28:	4b0c      	ldr	r3, [pc, #48]	@ (8009e5c <HAL_RCC_GetClockConfig+0x5c>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009e34:	4b09      	ldr	r3, [pc, #36]	@ (8009e5c <HAL_RCC_GetClockConfig+0x5c>)
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	08db      	lsrs	r3, r3, #3
 8009e3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e42:	4b07      	ldr	r3, [pc, #28]	@ (8009e60 <HAL_RCC_GetClockConfig+0x60>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 020f 	and.w	r2, r3, #15
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	601a      	str	r2, [r3, #0]
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	40023c00 	.word	0x40023c00

08009e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e68:	b0ae      	sub	sp, #184	@ 0xb8
 8009e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e8a:	4bcb      	ldr	r3, [pc, #812]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f003 030c 	and.w	r3, r3, #12
 8009e92:	2b0c      	cmp	r3, #12
 8009e94:	f200 8206 	bhi.w	800a2a4 <HAL_RCC_GetSysClockFreq+0x440>
 8009e98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9e:	bf00      	nop
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	0800a2a5 	.word	0x0800a2a5
 8009ea8:	0800a2a5 	.word	0x0800a2a5
 8009eac:	0800a2a5 	.word	0x0800a2a5
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	0800a2a5 	.word	0x0800a2a5
 8009eb8:	0800a2a5 	.word	0x0800a2a5
 8009ebc:	0800a2a5 	.word	0x0800a2a5
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	0800a2a5 	.word	0x0800a2a5
 8009ec8:	0800a2a5 	.word	0x0800a2a5
 8009ecc:	0800a2a5 	.word	0x0800a2a5
 8009ed0:	0800a0d5 	.word	0x0800a0d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ed4:	4bb9      	ldr	r3, [pc, #740]	@ (800a1bc <HAL_RCC_GetSysClockFreq+0x358>)
 8009ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009eda:	e1e7      	b.n	800a2ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009edc:	4bb8      	ldr	r3, [pc, #736]	@ (800a1c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009ee2:	e1e3      	b.n	800a2ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ee4:	4bb4      	ldr	r3, [pc, #720]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ef0:	4bb1      	ldr	r3, [pc, #708]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d071      	beq.n	8009fe0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009efc:	4bae      	ldr	r3, [pc, #696]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	099b      	lsrs	r3, r3, #6
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f08:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f04f 0000 	mov.w	r0, #0
 8009f2a:	f04f 0100 	mov.w	r1, #0
 8009f2e:	0159      	lsls	r1, r3, #5
 8009f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f34:	0150      	lsls	r0, r2, #5
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	1a51      	subs	r1, r2, r1
 8009f3e:	6439      	str	r1, [r7, #64]	@ 0x40
 8009f40:	4629      	mov	r1, r5
 8009f42:	eb63 0301 	sbc.w	r3, r3, r1
 8009f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f48:	f04f 0200 	mov.w	r2, #0
 8009f4c:	f04f 0300 	mov.w	r3, #0
 8009f50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009f54:	4649      	mov	r1, r9
 8009f56:	018b      	lsls	r3, r1, #6
 8009f58:	4641      	mov	r1, r8
 8009f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f5e:	4641      	mov	r1, r8
 8009f60:	018a      	lsls	r2, r1, #6
 8009f62:	4641      	mov	r1, r8
 8009f64:	1a51      	subs	r1, r2, r1
 8009f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009f68:	4649      	mov	r1, r9
 8009f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	f04f 0300 	mov.w	r3, #0
 8009f78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	00cb      	lsls	r3, r1, #3
 8009f80:	4641      	mov	r1, r8
 8009f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f86:	4641      	mov	r1, r8
 8009f88:	00ca      	lsls	r2, r1, #3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4622      	mov	r2, r4
 8009f92:	189b      	adds	r3, r3, r2
 8009f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f96:	462b      	mov	r3, r5
 8009f98:	460a      	mov	r2, r1
 8009f9a:	eb42 0303 	adc.w	r3, r2, r3
 8009f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009fac:	4629      	mov	r1, r5
 8009fae:	024b      	lsls	r3, r1, #9
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	024a      	lsls	r2, r1, #9
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009fcc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009fd0:	f7f6 fe8a 	bl	8000ce8 <__aeabi_uldivmod>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4613      	mov	r3, r2
 8009fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fde:	e067      	b.n	800a0b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fe0:	4b75      	ldr	r3, [pc, #468]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	099b      	lsrs	r3, r3, #6
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ffe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f04f 0000 	mov.w	r0, #0
 800a00a:	f04f 0100 	mov.w	r1, #0
 800a00e:	0159      	lsls	r1, r3, #5
 800a010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a014:	0150      	lsls	r0, r2, #5
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4621      	mov	r1, r4
 800a01c:	1a51      	subs	r1, r2, r1
 800a01e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a020:	4629      	mov	r1, r5
 800a022:	eb63 0301 	sbc.w	r3, r3, r1
 800a026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a028:	f04f 0200 	mov.w	r2, #0
 800a02c:	f04f 0300 	mov.w	r3, #0
 800a030:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800a034:	4649      	mov	r1, r9
 800a036:	018b      	lsls	r3, r1, #6
 800a038:	4641      	mov	r1, r8
 800a03a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a03e:	4641      	mov	r1, r8
 800a040:	018a      	lsls	r2, r1, #6
 800a042:	4641      	mov	r1, r8
 800a044:	ebb2 0a01 	subs.w	sl, r2, r1
 800a048:	4649      	mov	r1, r9
 800a04a:	eb63 0b01 	sbc.w	fp, r3, r1
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a05a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a05e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a062:	4692      	mov	sl, r2
 800a064:	469b      	mov	fp, r3
 800a066:	4623      	mov	r3, r4
 800a068:	eb1a 0303 	adds.w	r3, sl, r3
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	462b      	mov	r3, r5
 800a070:	eb4b 0303 	adc.w	r3, fp, r3
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a082:	4629      	mov	r1, r5
 800a084:	028b      	lsls	r3, r1, #10
 800a086:	4621      	mov	r1, r4
 800a088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a08c:	4621      	mov	r1, r4
 800a08e:	028a      	lsls	r2, r1, #10
 800a090:	4610      	mov	r0, r2
 800a092:	4619      	mov	r1, r3
 800a094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a098:	2200      	movs	r2, #0
 800a09a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a09c:	677a      	str	r2, [r7, #116]	@ 0x74
 800a09e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a0a2:	f7f6 fe21 	bl	8000ce8 <__aeabi_uldivmod>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a0b0:	4b41      	ldr	r3, [pc, #260]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	0c1b      	lsrs	r3, r3, #16
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800a0c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a0d2:	e0eb      	b.n	800a2ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0d4:	4b38      	ldr	r3, [pc, #224]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0e0:	4b35      	ldr	r3, [pc, #212]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d06b      	beq.n	800a1c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0ec:	4b32      	ldr	r3, [pc, #200]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	099b      	lsrs	r3, r3, #6
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800a100:	2300      	movs	r3, #0
 800a102:	667b      	str	r3, [r7, #100]	@ 0x64
 800a104:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f04f 0000 	mov.w	r0, #0
 800a110:	f04f 0100 	mov.w	r1, #0
 800a114:	0159      	lsls	r1, r3, #5
 800a116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a11a:	0150      	lsls	r0, r2, #5
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4621      	mov	r1, r4
 800a122:	1a51      	subs	r1, r2, r1
 800a124:	61b9      	str	r1, [r7, #24]
 800a126:	4629      	mov	r1, r5
 800a128:	eb63 0301 	sbc.w	r3, r3, r1
 800a12c:	61fb      	str	r3, [r7, #28]
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a13a:	4659      	mov	r1, fp
 800a13c:	018b      	lsls	r3, r1, #6
 800a13e:	4651      	mov	r1, sl
 800a140:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a144:	4651      	mov	r1, sl
 800a146:	018a      	lsls	r2, r1, #6
 800a148:	4651      	mov	r1, sl
 800a14a:	ebb2 0801 	subs.w	r8, r2, r1
 800a14e:	4659      	mov	r1, fp
 800a150:	eb63 0901 	sbc.w	r9, r3, r1
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a160:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a164:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a168:	4690      	mov	r8, r2
 800a16a:	4699      	mov	r9, r3
 800a16c:	4623      	mov	r3, r4
 800a16e:	eb18 0303 	adds.w	r3, r8, r3
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	462b      	mov	r3, r5
 800a176:	eb49 0303 	adc.w	r3, r9, r3
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	f04f 0300 	mov.w	r3, #0
 800a184:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a188:	4629      	mov	r1, r5
 800a18a:	024b      	lsls	r3, r1, #9
 800a18c:	4621      	mov	r1, r4
 800a18e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a192:	4621      	mov	r1, r4
 800a194:	024a      	lsls	r2, r1, #9
 800a196:	4610      	mov	r0, r2
 800a198:	4619      	mov	r1, r3
 800a19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a19e:	2200      	movs	r2, #0
 800a1a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a1a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a1a8:	f7f6 fd9e 	bl	8000ce8 <__aeabi_uldivmod>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1b6:	e065      	b.n	800a284 <HAL_RCC_GetSysClockFreq+0x420>
 800a1b8:	40023800 	.word	0x40023800
 800a1bc:	00f42400 	.word	0x00f42400
 800a1c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1c4:	4b3d      	ldr	r3, [pc, #244]	@ (800a2bc <HAL_RCC_GetSysClockFreq+0x458>)
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	099b      	lsrs	r3, r3, #6
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a1d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800a1de:	4642      	mov	r2, r8
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f04f 0100 	mov.w	r1, #0
 800a1ea:	0159      	lsls	r1, r3, #5
 800a1ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1f0:	0150      	lsls	r0, r2, #5
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	1a51      	subs	r1, r2, r1
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	eb63 0301 	sbc.w	r3, r3, r1
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a210:	4659      	mov	r1, fp
 800a212:	018b      	lsls	r3, r1, #6
 800a214:	4651      	mov	r1, sl
 800a216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a21a:	4651      	mov	r1, sl
 800a21c:	018a      	lsls	r2, r1, #6
 800a21e:	4651      	mov	r1, sl
 800a220:	1a54      	subs	r4, r2, r1
 800a222:	4659      	mov	r1, fp
 800a224:	eb63 0501 	sbc.w	r5, r3, r1
 800a228:	f04f 0200 	mov.w	r2, #0
 800a22c:	f04f 0300 	mov.w	r3, #0
 800a230:	00eb      	lsls	r3, r5, #3
 800a232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a236:	00e2      	lsls	r2, r4, #3
 800a238:	4614      	mov	r4, r2
 800a23a:	461d      	mov	r5, r3
 800a23c:	4643      	mov	r3, r8
 800a23e:	18e3      	adds	r3, r4, r3
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	464b      	mov	r3, r9
 800a244:	eb45 0303 	adc.w	r3, r5, r3
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	f04f 0300 	mov.w	r3, #0
 800a252:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a256:	4629      	mov	r1, r5
 800a258:	028b      	lsls	r3, r1, #10
 800a25a:	4621      	mov	r1, r4
 800a25c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a260:	4621      	mov	r1, r4
 800a262:	028a      	lsls	r2, r1, #10
 800a264:	4610      	mov	r0, r2
 800a266:	4619      	mov	r1, r3
 800a268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a26c:	2200      	movs	r2, #0
 800a26e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a270:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a272:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a276:	f7f6 fd37 	bl	8000ce8 <__aeabi_uldivmod>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4613      	mov	r3, r2
 800a280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a284:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <HAL_RCC_GetSysClockFreq+0x458>)
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	0f1b      	lsrs	r3, r3, #28
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800a292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a2a2:	e003      	b.n	800a2ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a2a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a2aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	37b8      	adds	r7, #184	@ 0xb8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40023800 	.word	0x40023800
 800a2c0:	00f42400 	.word	0x00f42400

0800a2c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e28d      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 8083 	beq.w	800a3ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a2e4:	4b94      	ldr	r3, [pc, #592]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f003 030c 	and.w	r3, r3, #12
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d019      	beq.n	800a324 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a2f0:	4b91      	ldr	r3, [pc, #580]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 030c 	and.w	r3, r3, #12
        || \
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d106      	bne.n	800a30a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a2fc:	4b8e      	ldr	r3, [pc, #568]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a308:	d00c      	beq.n	800a324 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a30a:	4b8b      	ldr	r3, [pc, #556]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a312:	2b0c      	cmp	r3, #12
 800a314:	d112      	bne.n	800a33c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a316:	4b88      	ldr	r3, [pc, #544]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a31e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a322:	d10b      	bne.n	800a33c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a324:	4b84      	ldr	r3, [pc, #528]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d05b      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x124>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d157      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e25a      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a344:	d106      	bne.n	800a354 <HAL_RCC_OscConfig+0x90>
 800a346:	4b7c      	ldr	r3, [pc, #496]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a7b      	ldr	r2, [pc, #492]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a34c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e01d      	b.n	800a390 <HAL_RCC_OscConfig+0xcc>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a35c:	d10c      	bne.n	800a378 <HAL_RCC_OscConfig+0xb4>
 800a35e:	4b76      	ldr	r3, [pc, #472]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a75      	ldr	r2, [pc, #468]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	4b73      	ldr	r3, [pc, #460]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a72      	ldr	r2, [pc, #456]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	e00b      	b.n	800a390 <HAL_RCC_OscConfig+0xcc>
 800a378:	4b6f      	ldr	r3, [pc, #444]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a6e      	ldr	r2, [pc, #440]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a37e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	4b6c      	ldr	r3, [pc, #432]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a6b      	ldr	r2, [pc, #428]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a38a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a38e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d013      	beq.n	800a3c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a398:	f7fd fa40 	bl	800781c <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3a0:	f7fd fa3c 	bl	800781c <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b64      	cmp	r3, #100	@ 0x64
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e21f      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3b2:	4b61      	ldr	r3, [pc, #388]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0f0      	beq.n	800a3a0 <HAL_RCC_OscConfig+0xdc>
 800a3be:	e014      	b.n	800a3ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c0:	f7fd fa2c 	bl	800781c <HAL_GetTick>
 800a3c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3c6:	e008      	b.n	800a3da <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3c8:	f7fd fa28 	bl	800781c <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	2b64      	cmp	r3, #100	@ 0x64
 800a3d4:	d901      	bls.n	800a3da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e20b      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3da:	4b57      	ldr	r3, [pc, #348]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1f0      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x104>
 800a3e6:	e000      	b.n	800a3ea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d06f      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a3f6:	4b50      	ldr	r3, [pc, #320]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f003 030c 	and.w	r3, r3, #12
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d017      	beq.n	800a432 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a402:	4b4d      	ldr	r3, [pc, #308]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f003 030c 	and.w	r3, r3, #12
        || \
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	d105      	bne.n	800a41a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a40e:	4b4a      	ldr	r3, [pc, #296]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a41a:	4b47      	ldr	r3, [pc, #284]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a422:	2b0c      	cmp	r3, #12
 800a424:	d11c      	bne.n	800a460 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a426:	4b44      	ldr	r3, [pc, #272]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d116      	bne.n	800a460 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a432:	4b41      	ldr	r3, [pc, #260]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <HAL_RCC_OscConfig+0x186>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d001      	beq.n	800a44a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e1d3      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a44a:	4b3b      	ldr	r3, [pc, #236]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	4937      	ldr	r1, [pc, #220]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a45e:	e03a      	b.n	800a4d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d020      	beq.n	800a4aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a468:	4b34      	ldr	r3, [pc, #208]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46e:	f7fd f9d5 	bl	800781c <HAL_GetTick>
 800a472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a474:	e008      	b.n	800a488 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a476:	f7fd f9d1 	bl	800781c <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d901      	bls.n	800a488 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e1b4      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a488:	4b2b      	ldr	r3, [pc, #172]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0f0      	beq.n	800a476 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a494:	4b28      	ldr	r3, [pc, #160]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	4925      	ldr	r1, [pc, #148]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	600b      	str	r3, [r1, #0]
 800a4a8:	e015      	b.n	800a4d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4aa:	4b24      	ldr	r3, [pc, #144]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b0:	f7fd f9b4 	bl	800781c <HAL_GetTick>
 800a4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4b6:	e008      	b.n	800a4ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4b8:	f7fd f9b0 	bl	800781c <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e193      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1f0      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0308 	and.w	r3, r3, #8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d036      	beq.n	800a550 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d016      	beq.n	800a518 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4ea:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <HAL_RCC_OscConfig+0x27c>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f0:	f7fd f994 	bl	800781c <HAL_GetTick>
 800a4f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4f6:	e008      	b.n	800a50a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4f8:	f7fd f990 	bl	800781c <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e173      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a50a:	4b0b      	ldr	r3, [pc, #44]	@ (800a538 <HAL_RCC_OscConfig+0x274>)
 800a50c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f0      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x234>
 800a516:	e01b      	b.n	800a550 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a518:	4b09      	ldr	r3, [pc, #36]	@ (800a540 <HAL_RCC_OscConfig+0x27c>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a51e:	f7fd f97d 	bl	800781c <HAL_GetTick>
 800a522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a524:	e00e      	b.n	800a544 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a526:	f7fd f979 	bl	800781c <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b02      	cmp	r3, #2
 800a532:	d907      	bls.n	800a544 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e15c      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
 800a538:	40023800 	.word	0x40023800
 800a53c:	42470000 	.word	0x42470000
 800a540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a544:	4b8a      	ldr	r3, [pc, #552]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ea      	bne.n	800a526 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 8097 	beq.w	800a68c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a55e:	2300      	movs	r3, #0
 800a560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a562:	4b83      	ldr	r3, [pc, #524]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10f      	bne.n	800a58e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a56e:	2300      	movs	r3, #0
 800a570:	60bb      	str	r3, [r7, #8]
 800a572:	4b7f      	ldr	r3, [pc, #508]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a576:	4a7e      	ldr	r2, [pc, #504]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a57c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a57e:	4b7c      	ldr	r3, [pc, #496]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a586:	60bb      	str	r3, [r7, #8]
 800a588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a58e:	4b79      	ldr	r3, [pc, #484]	@ (800a774 <HAL_RCC_OscConfig+0x4b0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a596:	2b00      	cmp	r3, #0
 800a598:	d118      	bne.n	800a5cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a59a:	4b76      	ldr	r3, [pc, #472]	@ (800a774 <HAL_RCC_OscConfig+0x4b0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a75      	ldr	r2, [pc, #468]	@ (800a774 <HAL_RCC_OscConfig+0x4b0>)
 800a5a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5a6:	f7fd f939 	bl	800781c <HAL_GetTick>
 800a5aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5ac:	e008      	b.n	800a5c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5ae:	f7fd f935 	bl	800781c <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d901      	bls.n	800a5c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e118      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5c0:	4b6c      	ldr	r3, [pc, #432]	@ (800a774 <HAL_RCC_OscConfig+0x4b0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0f0      	beq.n	800a5ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d106      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x31e>
 800a5d4:	4b66      	ldr	r3, [pc, #408]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5d8:	4a65      	ldr	r2, [pc, #404]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5da:	f043 0301 	orr.w	r3, r3, #1
 800a5de:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5e0:	e01c      	b.n	800a61c <HAL_RCC_OscConfig+0x358>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCC_OscConfig+0x340>
 800a5ea:	4b61      	ldr	r3, [pc, #388]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ee:	4a60      	ldr	r2, [pc, #384]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5f0:	f043 0304 	orr.w	r3, r3, #4
 800a5f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5f6:	4b5e      	ldr	r3, [pc, #376]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5fa:	4a5d      	ldr	r2, [pc, #372]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a5fc:	f043 0301 	orr.w	r3, r3, #1
 800a600:	6713      	str	r3, [r2, #112]	@ 0x70
 800a602:	e00b      	b.n	800a61c <HAL_RCC_OscConfig+0x358>
 800a604:	4b5a      	ldr	r3, [pc, #360]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a608:	4a59      	ldr	r2, [pc, #356]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a610:	4b57      	ldr	r3, [pc, #348]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a614:	4a56      	ldr	r2, [pc, #344]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a616:	f023 0304 	bic.w	r3, r3, #4
 800a61a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d015      	beq.n	800a650 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a624:	f7fd f8fa 	bl	800781c <HAL_GetTick>
 800a628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a62a:	e00a      	b.n	800a642 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a62c:	f7fd f8f6 	bl	800781c <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e0d7      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a642:	4b4b      	ldr	r3, [pc, #300]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0ee      	beq.n	800a62c <HAL_RCC_OscConfig+0x368>
 800a64e:	e014      	b.n	800a67a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a650:	f7fd f8e4 	bl	800781c <HAL_GetTick>
 800a654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a656:	e00a      	b.n	800a66e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a658:	f7fd f8e0 	bl	800781c <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a666:	4293      	cmp	r3, r2
 800a668:	d901      	bls.n	800a66e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e0c1      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a66e:	4b40      	ldr	r3, [pc, #256]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1ee      	bne.n	800a658 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d105      	bne.n	800a68c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a680:	4b3b      	ldr	r3, [pc, #236]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a684:	4a3a      	ldr	r2, [pc, #232]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a68a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 80ad 	beq.w	800a7f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a696:	4b36      	ldr	r3, [pc, #216]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f003 030c 	and.w	r3, r3, #12
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d060      	beq.n	800a764 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d145      	bne.n	800a736 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6aa:	4b33      	ldr	r3, [pc, #204]	@ (800a778 <HAL_RCC_OscConfig+0x4b4>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b0:	f7fd f8b4 	bl	800781c <HAL_GetTick>
 800a6b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6b8:	f7fd f8b0 	bl	800781c <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e093      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6ca:	4b29      	ldr	r3, [pc, #164]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1f0      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69da      	ldr	r2, [r3, #28]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e4:	019b      	lsls	r3, r3, #6
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	085b      	lsrs	r3, r3, #1
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	041b      	lsls	r3, r3, #16
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	061b      	lsls	r3, r3, #24
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	491b      	ldr	r1, [pc, #108]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a704:	4313      	orrs	r3, r2
 800a706:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a708:	4b1b      	ldr	r3, [pc, #108]	@ (800a778 <HAL_RCC_OscConfig+0x4b4>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a70e:	f7fd f885 	bl	800781c <HAL_GetTick>
 800a712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a714:	e008      	b.n	800a728 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a716:	f7fd f881 	bl	800781c <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	2b02      	cmp	r3, #2
 800a722:	d901      	bls.n	800a728 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e064      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a728:	4b11      	ldr	r3, [pc, #68]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0f0      	beq.n	800a716 <HAL_RCC_OscConfig+0x452>
 800a734:	e05c      	b.n	800a7f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a736:	4b10      	ldr	r3, [pc, #64]	@ (800a778 <HAL_RCC_OscConfig+0x4b4>)
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a73c:	f7fd f86e 	bl	800781c <HAL_GetTick>
 800a740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a742:	e008      	b.n	800a756 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a744:	f7fd f86a 	bl	800781c <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e04d      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a756:	4b06      	ldr	r3, [pc, #24]	@ (800a770 <HAL_RCC_OscConfig+0x4ac>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1f0      	bne.n	800a744 <HAL_RCC_OscConfig+0x480>
 800a762:	e045      	b.n	800a7f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d107      	bne.n	800a77c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e040      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
 800a770:	40023800 	.word	0x40023800
 800a774:	40007000 	.word	0x40007000
 800a778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a77c:	4b1f      	ldr	r3, [pc, #124]	@ (800a7fc <HAL_RCC_OscConfig+0x538>)
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d030      	beq.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a794:	429a      	cmp	r2, r3
 800a796:	d129      	bne.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d122      	bne.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a7b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d119      	bne.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d10f      	bne.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d107      	bne.n	800a7ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d001      	beq.n	800a7f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	40023800 	.word	0x40023800

0800a800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e07b      	b.n	800a90a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a816:	2b00      	cmp	r3, #0
 800a818:	d108      	bne.n	800a82c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a822:	d009      	beq.n	800a838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	61da      	str	r2, [r3, #28]
 800a82a:	e005      	b.n	800a838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7fc fa14 	bl	8006c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a86e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a88a:	431a      	orrs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8bc:	ea42 0103 	orr.w	r1, r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	0c1b      	lsrs	r3, r3, #16
 800a8d6:	f003 0104 	and.w	r1, r3, #4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8de:	f003 0210 	and.w	r2, r3, #16
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69da      	ldr	r2, [r3, #28]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a8f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b088      	sub	sp, #32
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	603b      	str	r3, [r7, #0]
 800a91e:	4613      	mov	r3, r2
 800a920:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a922:	f7fc ff7b 	bl	800781c <HAL_GetTick>
 800a926:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d001      	beq.n	800a93c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a938:	2302      	movs	r3, #2
 800a93a:	e12a      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_SPI_Transmit+0x36>
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e122      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <HAL_SPI_Transmit+0x48>
 800a956:	2302      	movs	r3, #2
 800a958:	e11b      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2203      	movs	r2, #3
 800a966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	88fa      	ldrh	r2, [r7, #6]
 800a97a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	88fa      	ldrh	r2, [r7, #6]
 800a980:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9a8:	d10f      	bne.n	800a9ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d4:	2b40      	cmp	r3, #64	@ 0x40
 800a9d6:	d007      	beq.n	800a9e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9f0:	d152      	bne.n	800aa98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <HAL_SPI_Transmit+0xee>
 800a9fa:	8b7b      	ldrh	r3, [r7, #26]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d145      	bne.n	800aa8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa04:	881a      	ldrh	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa10:	1c9a      	adds	r2, r3, #2
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa24:	e032      	b.n	800aa8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d112      	bne.n	800aa5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa44:	1c9a      	adds	r2, r3, #2
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	86da      	strh	r2, [r3, #54]	@ 0x36
 800aa58:	e018      	b.n	800aa8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa5a:	f7fc fedf 	bl	800781c <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d803      	bhi.n	800aa72 <HAL_SPI_Transmit+0x160>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d102      	bne.n	800aa78 <HAL_SPI_Transmit+0x166>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d109      	bne.n	800aa8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e082      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1c7      	bne.n	800aa26 <HAL_SPI_Transmit+0x114>
 800aa96:	e053      	b.n	800ab40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <HAL_SPI_Transmit+0x194>
 800aaa0:	8b7b      	ldrh	r3, [r7, #26]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d147      	bne.n	800ab36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	330c      	adds	r3, #12
 800aab0:	7812      	ldrb	r2, [r2, #0]
 800aab2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aacc:	e033      	b.n	800ab36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d113      	bne.n	800ab04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	330c      	adds	r3, #12
 800aae6:	7812      	ldrb	r2, [r2, #0]
 800aae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaee:	1c5a      	adds	r2, r3, #1
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ab02:	e018      	b.n	800ab36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab04:	f7fc fe8a 	bl	800781c <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d803      	bhi.n	800ab1c <HAL_SPI_Transmit+0x20a>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1a:	d102      	bne.n	800ab22 <HAL_SPI_Transmit+0x210>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d109      	bne.n	800ab36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e02d      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1c6      	bne.n	800aace <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 f9f9 	bl	800af3c <SPI_EndRxTxTransaction>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e000      	b.n	800ab92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ab90:	2300      	movs	r3, #0
  }
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	4613      	mov	r3, r2
 800aba8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d001      	beq.n	800abba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800abb6:	2302      	movs	r3, #2
 800abb8:	e097      	b.n	800acea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <HAL_SPI_Transmit_DMA+0x2a>
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e08f      	b.n	800acea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_SPI_Transmit_DMA+0x3c>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e088      	b.n	800acea <HAL_SPI_Transmit_DMA+0x14e>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2203      	movs	r2, #3
 800abe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	88fa      	ldrh	r2, [r7, #6]
 800abf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	88fa      	ldrh	r2, [r7, #6]
 800abfe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac26:	d10f      	bne.n	800ac48 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac4c:	4a29      	ldr	r2, [pc, #164]	@ (800acf4 <HAL_SPI_Transmit_DMA+0x158>)
 800ac4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac54:	4a28      	ldr	r2, [pc, #160]	@ (800acf8 <HAL_SPI_Transmit_DMA+0x15c>)
 800ac56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac5c:	4a27      	ldr	r2, [pc, #156]	@ (800acfc <HAL_SPI_Transmit_DMA+0x160>)
 800ac5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac64:	2200      	movs	r2, #0
 800ac66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac70:	4619      	mov	r1, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	330c      	adds	r3, #12
 800ac78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ac80:	f7fc ff8c 	bl	8007b9c <HAL_DMA_Start_IT>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8e:	f043 0210 	orr.w	r2, r3, #16
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e023      	b.n	800acea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acac:	2b40      	cmp	r3, #64	@ 0x40
 800acae:	d007      	beq.n	800acc0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acbe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f042 0220 	orr.w	r2, r2, #32
 800acd6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0202 	orr.w	r2, r2, #2
 800ace6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	0800add1 	.word	0x0800add1
 800acf8:	0800ad29 	.word	0x0800ad29
 800acfc:	0800aded 	.word	0x0800aded

0800ad00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad36:	f7fc fd71 	bl	800781c <HAL_GetTick>
 800ad3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad4a:	d03b      	beq.n	800adc4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f022 0220 	bic.w	r2, r2, #32
 800ad5a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0202 	bic.w	r2, r2, #2
 800ad6a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	2164      	movs	r1, #100	@ 0x64
 800ad70:	6978      	ldr	r0, [r7, #20]
 800ad72:	f000 f8e3 	bl	800af3c <SPI_EndRxTxTransaction>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad80:	f043 0220 	orr.w	r2, r3, #32
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2200      	movs	r2, #0
 800adaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d003      	beq.n	800adc4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800adbc:	6978      	ldr	r0, [r7, #20]
 800adbe:	f7ff ffa9 	bl	800ad14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800adc2:	e002      	b.n	800adca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800adc4:	6978      	ldr	r0, [r7, #20]
 800adc6:	f7fa fa13 	bl	80051f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800addc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff ff8e 	bl	800ad00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f022 0203 	bic.w	r2, r2, #3
 800ae08:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0e:	f043 0210 	orr.w	r2, r3, #16
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff ff78 	bl	800ad14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae24:	bf00      	nop
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ae3c:	f7fc fcee 	bl	800781c <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	4413      	add	r3, r2
 800ae4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae4c:	f7fc fce6 	bl	800781c <HAL_GetTick>
 800ae50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ae52:	4b39      	ldr	r3, [pc, #228]	@ (800af38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	015b      	lsls	r3, r3, #5
 800ae58:	0d1b      	lsrs	r3, r3, #20
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	fb02 f303 	mul.w	r3, r2, r3
 800ae60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae62:	e054      	b.n	800af0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d050      	beq.n	800af0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae6c:	f7fc fcd6 	bl	800781c <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	69fa      	ldr	r2, [r7, #28]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d902      	bls.n	800ae82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d13d      	bne.n	800aefe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ae90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae9a:	d111      	bne.n	800aec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aea4:	d004      	beq.n	800aeb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aeae:	d107      	bne.n	800aec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aec8:	d10f      	bne.n	800aeea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e017      	b.n	800af2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4013      	ands	r3, r2
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	bf0c      	ite	eq
 800af1e:	2301      	moveq	r3, #1
 800af20:	2300      	movne	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	461a      	mov	r2, r3
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d19b      	bne.n	800ae64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3720      	adds	r7, #32
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	2000003c 	.word	0x2000003c

0800af3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af02      	add	r7, sp, #8
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2201      	movs	r2, #1
 800af50:	2102      	movs	r1, #2
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff ff6a 	bl	800ae2c <SPI_WaitFlagStateUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af62:	f043 0220 	orr.w	r2, r3, #32
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e032      	b.n	800afd4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800af6e:	4b1b      	ldr	r3, [pc, #108]	@ (800afdc <SPI_EndRxTxTransaction+0xa0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1b      	ldr	r2, [pc, #108]	@ (800afe0 <SPI_EndRxTxTransaction+0xa4>)
 800af74:	fba2 2303 	umull	r2, r3, r2, r3
 800af78:	0d5b      	lsrs	r3, r3, #21
 800af7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af8c:	d112      	bne.n	800afb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2200      	movs	r2, #0
 800af96:	2180      	movs	r1, #128	@ 0x80
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff ff47 	bl	800ae2c <SPI_WaitFlagStateUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d016      	beq.n	800afd2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa8:	f043 0220 	orr.w	r2, r3, #32
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e00f      	b.n	800afd4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00a      	beq.n	800afd0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afca:	2b80      	cmp	r3, #128	@ 0x80
 800afcc:	d0f2      	beq.n	800afb4 <SPI_EndRxTxTransaction+0x78>
 800afce:	e000      	b.n	800afd2 <SPI_EndRxTxTransaction+0x96>
        break;
 800afd0:	bf00      	nop
  }

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	2000003c 	.word	0x2000003c
 800afe0:	165e9f81 	.word	0x165e9f81

0800afe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e041      	b.n	800b07a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7fc f914 	bl	8007238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f000 fae6 	bl	800b5f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b01      	cmp	r3, #1
 800b096:	d001      	beq.n	800b09c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e046      	b.n	800b12a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a23      	ldr	r2, [pc, #140]	@ (800b138 <HAL_TIM_Base_Start+0xb4>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d022      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b6:	d01d      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b13c <HAL_TIM_Base_Start+0xb8>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d018      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b140 <HAL_TIM_Base_Start+0xbc>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a1c      	ldr	r2, [pc, #112]	@ (800b144 <HAL_TIM_Base_Start+0xc0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00e      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a1b      	ldr	r2, [pc, #108]	@ (800b148 <HAL_TIM_Base_Start+0xc4>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d009      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a19      	ldr	r2, [pc, #100]	@ (800b14c <HAL_TIM_Base_Start+0xc8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <HAL_TIM_Base_Start+0x70>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a18      	ldr	r2, [pc, #96]	@ (800b150 <HAL_TIM_Base_Start+0xcc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d111      	bne.n	800b118 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f003 0307 	and.w	r3, r3, #7
 800b0fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b06      	cmp	r3, #6
 800b104:	d010      	beq.n	800b128 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f042 0201 	orr.w	r2, r2, #1
 800b114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b116:	e007      	b.n	800b128 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	40010000 	.word	0x40010000
 800b13c:	40000400 	.word	0x40000400
 800b140:	40000800 	.word	0x40000800
 800b144:	40000c00 	.word	0x40000c00
 800b148:	40010400 	.word	0x40010400
 800b14c:	40014000 	.word	0x40014000
 800b150:	40001800 	.word	0x40001800

0800b154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b01      	cmp	r3, #1
 800b166:	d001      	beq.n	800b16c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e04e      	b.n	800b20a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68da      	ldr	r2, [r3, #12]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a23      	ldr	r2, [pc, #140]	@ (800b218 <HAL_TIM_Base_Start_IT+0xc4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d022      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b196:	d01d      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a1f      	ldr	r2, [pc, #124]	@ (800b21c <HAL_TIM_Base_Start_IT+0xc8>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d018      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b220 <HAL_TIM_Base_Start_IT+0xcc>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d013      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b224 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00e      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b228 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d009      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a19      	ldr	r2, [pc, #100]	@ (800b22c <HAL_TIM_Base_Start_IT+0xd8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d004      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0x80>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a18      	ldr	r2, [pc, #96]	@ (800b230 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d111      	bne.n	800b1f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f003 0307 	and.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b06      	cmp	r3, #6
 800b1e4:	d010      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f042 0201 	orr.w	r2, r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f6:	e007      	b.n	800b208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0201 	orr.w	r2, r2, #1
 800b206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	40010000 	.word	0x40010000
 800b21c:	40000400 	.word	0x40000400
 800b220:	40000800 	.word	0x40000800
 800b224:	40000c00 	.word	0x40000c00
 800b228:	40010400 	.word	0x40010400
 800b22c:	40014000 	.word	0x40014000
 800b230:	40001800 	.word	0x40001800

0800b234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d020      	beq.n	800b298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f003 0302 	and.w	r3, r3, #2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d01b      	beq.n	800b298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f06f 0202 	mvn.w	r2, #2
 800b268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f999 	bl	800b5b6 <HAL_TIM_IC_CaptureCallback>
 800b284:	e005      	b.n	800b292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f98b 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f99c 	bl	800b5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f003 0304 	and.w	r3, r3, #4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d020      	beq.n	800b2e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01b      	beq.n	800b2e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0204 	mvn.w	r2, #4
 800b2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f973 	bl	800b5b6 <HAL_TIM_IC_CaptureCallback>
 800b2d0:	e005      	b.n	800b2de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f965 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f976 	bl	800b5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f003 0308 	and.w	r3, r3, #8
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d020      	beq.n	800b330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01b      	beq.n	800b330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f06f 0208 	mvn.w	r2, #8
 800b300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2204      	movs	r2, #4
 800b306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f94d 	bl	800b5b6 <HAL_TIM_IC_CaptureCallback>
 800b31c:	e005      	b.n	800b32a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f93f 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f950 	bl	800b5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f003 0310 	and.w	r3, r3, #16
 800b336:	2b00      	cmp	r3, #0
 800b338:	d020      	beq.n	800b37c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f003 0310 	and.w	r3, r3, #16
 800b340:	2b00      	cmp	r3, #0
 800b342:	d01b      	beq.n	800b37c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f06f 0210 	mvn.w	r2, #16
 800b34c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2208      	movs	r2, #8
 800b352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f927 	bl	800b5b6 <HAL_TIM_IC_CaptureCallback>
 800b368:	e005      	b.n	800b376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f919 	bl	800b5a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f92a 	bl	800b5ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00c      	beq.n	800b3a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f06f 0201 	mvn.w	r2, #1
 800b398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7f9 feee 	bl	800517c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d007      	beq.n	800b3c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fae4 	bl	800b98c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00c      	beq.n	800b3e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f8fb 	bl	800b5de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00c      	beq.n	800b40c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0220 	mvn.w	r2, #32
 800b404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fab6 	bl	800b978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d101      	bne.n	800b430 <HAL_TIM_ConfigClockSource+0x1c>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e0b4      	b.n	800b59a <HAL_TIM_ConfigClockSource+0x186>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b468:	d03e      	beq.n	800b4e8 <HAL_TIM_ConfigClockSource+0xd4>
 800b46a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b46e:	f200 8087 	bhi.w	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b476:	f000 8086 	beq.w	800b586 <HAL_TIM_ConfigClockSource+0x172>
 800b47a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b47e:	d87f      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b480:	2b70      	cmp	r3, #112	@ 0x70
 800b482:	d01a      	beq.n	800b4ba <HAL_TIM_ConfigClockSource+0xa6>
 800b484:	2b70      	cmp	r3, #112	@ 0x70
 800b486:	d87b      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b488:	2b60      	cmp	r3, #96	@ 0x60
 800b48a:	d050      	beq.n	800b52e <HAL_TIM_ConfigClockSource+0x11a>
 800b48c:	2b60      	cmp	r3, #96	@ 0x60
 800b48e:	d877      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b490:	2b50      	cmp	r3, #80	@ 0x50
 800b492:	d03c      	beq.n	800b50e <HAL_TIM_ConfigClockSource+0xfa>
 800b494:	2b50      	cmp	r3, #80	@ 0x50
 800b496:	d873      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b498:	2b40      	cmp	r3, #64	@ 0x40
 800b49a:	d058      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x13a>
 800b49c:	2b40      	cmp	r3, #64	@ 0x40
 800b49e:	d86f      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a0:	2b30      	cmp	r3, #48	@ 0x30
 800b4a2:	d064      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4a4:	2b30      	cmp	r3, #48	@ 0x30
 800b4a6:	d86b      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	d060      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d867      	bhi.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d05c      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4b4:	2b10      	cmp	r3, #16
 800b4b6:	d05a      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x15a>
 800b4b8:	e062      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4ca:	f000 f9b9 	bl	800b840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	609a      	str	r2, [r3, #8]
      break;
 800b4e6:	e04f      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4f8:	f000 f9a2 	bl	800b840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b50a:	609a      	str	r2, [r3, #8]
      break;
 800b50c:	e03c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b51a:	461a      	mov	r2, r3
 800b51c:	f000 f916 	bl	800b74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2150      	movs	r1, #80	@ 0x50
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f96f 	bl	800b80a <TIM_ITRx_SetConfig>
      break;
 800b52c:	e02c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b53a:	461a      	mov	r2, r3
 800b53c:	f000 f935 	bl	800b7aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2160      	movs	r1, #96	@ 0x60
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f95f 	bl	800b80a <TIM_ITRx_SetConfig>
      break;
 800b54c:	e01c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b55a:	461a      	mov	r2, r3
 800b55c:	f000 f8f6 	bl	800b74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2140      	movs	r1, #64	@ 0x40
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f94f 	bl	800b80a <TIM_ITRx_SetConfig>
      break;
 800b56c:	e00c      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f000 f946 	bl	800b80a <TIM_ITRx_SetConfig>
      break;
 800b57e:	e003      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]
      break;
 800b584:	e000      	b.n	800b588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5e6:	bf00      	nop
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a46      	ldr	r2, [pc, #280]	@ (800b720 <TIM_Base_SetConfig+0x12c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d013      	beq.n	800b634 <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b612:	d00f      	beq.n	800b634 <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a43      	ldr	r2, [pc, #268]	@ (800b724 <TIM_Base_SetConfig+0x130>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00b      	beq.n	800b634 <TIM_Base_SetConfig+0x40>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a42      	ldr	r2, [pc, #264]	@ (800b728 <TIM_Base_SetConfig+0x134>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d007      	beq.n	800b634 <TIM_Base_SetConfig+0x40>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a41      	ldr	r2, [pc, #260]	@ (800b72c <TIM_Base_SetConfig+0x138>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d003      	beq.n	800b634 <TIM_Base_SetConfig+0x40>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a40      	ldr	r2, [pc, #256]	@ (800b730 <TIM_Base_SetConfig+0x13c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d108      	bne.n	800b646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a35      	ldr	r2, [pc, #212]	@ (800b720 <TIM_Base_SetConfig+0x12c>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d02b      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b654:	d027      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a32      	ldr	r2, [pc, #200]	@ (800b724 <TIM_Base_SetConfig+0x130>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d023      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a31      	ldr	r2, [pc, #196]	@ (800b728 <TIM_Base_SetConfig+0x134>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d01f      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a30      	ldr	r2, [pc, #192]	@ (800b72c <TIM_Base_SetConfig+0x138>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d01b      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a2f      	ldr	r2, [pc, #188]	@ (800b730 <TIM_Base_SetConfig+0x13c>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d017      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a2e      	ldr	r2, [pc, #184]	@ (800b734 <TIM_Base_SetConfig+0x140>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d013      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a2d      	ldr	r2, [pc, #180]	@ (800b738 <TIM_Base_SetConfig+0x144>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d00f      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a2c      	ldr	r2, [pc, #176]	@ (800b73c <TIM_Base_SetConfig+0x148>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d00b      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a2b      	ldr	r2, [pc, #172]	@ (800b740 <TIM_Base_SetConfig+0x14c>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d007      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a2a      	ldr	r2, [pc, #168]	@ (800b744 <TIM_Base_SetConfig+0x150>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d003      	beq.n	800b6a6 <TIM_Base_SetConfig+0xb2>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a29      	ldr	r2, [pc, #164]	@ (800b748 <TIM_Base_SetConfig+0x154>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d108      	bne.n	800b6b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a10      	ldr	r2, [pc, #64]	@ (800b720 <TIM_Base_SetConfig+0x12c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d003      	beq.n	800b6ec <TIM_Base_SetConfig+0xf8>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a12      	ldr	r2, [pc, #72]	@ (800b730 <TIM_Base_SetConfig+0x13c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d103      	bne.n	800b6f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	691a      	ldr	r2, [r3, #16]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b01      	cmp	r3, #1
 800b704:	d105      	bne.n	800b712 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f023 0201 	bic.w	r2, r3, #1
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	611a      	str	r2, [r3, #16]
  }
}
 800b712:	bf00      	nop
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	40010000 	.word	0x40010000
 800b724:	40000400 	.word	0x40000400
 800b728:	40000800 	.word	0x40000800
 800b72c:	40000c00 	.word	0x40000c00
 800b730:	40010400 	.word	0x40010400
 800b734:	40014000 	.word	0x40014000
 800b738:	40014400 	.word	0x40014400
 800b73c:	40014800 	.word	0x40014800
 800b740:	40001800 	.word	0x40001800
 800b744:	40001c00 	.word	0x40001c00
 800b748:	40002000 	.word	0x40002000

0800b74c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f023 0201 	bic.w	r2, r3, #1
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	011b      	lsls	r3, r3, #4
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4313      	orrs	r3, r2
 800b780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f023 030a 	bic.w	r3, r3, #10
 800b788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	621a      	str	r2, [r3, #32]
}
 800b79e:	bf00      	nop
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b087      	sub	sp, #28
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	f023 0210 	bic.w	r2, r3, #16
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	031b      	lsls	r3, r3, #12
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b7e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	621a      	str	r2, [r3, #32]
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b085      	sub	sp, #20
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	f043 0307 	orr.w	r3, r3, #7
 800b82c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	609a      	str	r2, [r3, #8]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b85a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	021a      	lsls	r2, r3, #8
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	431a      	orrs	r2, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	4313      	orrs	r3, r2
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	609a      	str	r2, [r3, #8]
}
 800b874:	bf00      	nop
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b894:	2302      	movs	r3, #2
 800b896:	e05a      	b.n	800b94e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a21      	ldr	r2, [pc, #132]	@ (800b95c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d022      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8e4:	d01d      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a1d      	ldr	r2, [pc, #116]	@ (800b960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d018      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d013      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a1a      	ldr	r2, [pc, #104]	@ (800b968 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d00e      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a18      	ldr	r2, [pc, #96]	@ (800b96c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d009      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a17      	ldr	r2, [pc, #92]	@ (800b970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d004      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a15      	ldr	r2, [pc, #84]	@ (800b974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d10c      	bne.n	800b93c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	4313      	orrs	r3, r2
 800b932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	40010000 	.word	0x40010000
 800b960:	40000400 	.word	0x40000400
 800b964:	40000800 	.word	0x40000800
 800b968:	40000c00 	.word	0x40000c00
 800b96c:	40010400 	.word	0x40010400
 800b970:	40014000 	.word	0x40014000
 800b974:	40001800 	.word	0x40001800

0800b978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e042      	b.n	800ba38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7fb fcc6 	bl	8007358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2224      	movs	r2, #36	@ 0x24
 800b9d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fa09 	bl	800bdfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	695a      	ldr	r2, [r3, #20]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	@ 0x28
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	d175      	bne.n	800bb4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <HAL_UART_Transmit+0x2c>
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e06e      	b.n	800bb4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2221      	movs	r2, #33	@ 0x21
 800ba7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba7e:	f7fb fecd 	bl	800781c <HAL_GetTick>
 800ba82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	88fa      	ldrh	r2, [r7, #6]
 800ba88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	88fa      	ldrh	r2, [r7, #6]
 800ba8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba98:	d108      	bne.n	800baac <HAL_UART_Transmit+0x6c>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d104      	bne.n	800baac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	e003      	b.n	800bab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bab4:	e02e      	b.n	800bb14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2200      	movs	r2, #0
 800babe:	2180      	movs	r1, #128	@ 0x80
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f8df 	bl	800bc84 <UART_WaitOnFlagUntilTimeout>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2220      	movs	r2, #32
 800bad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e03a      	b.n	800bb4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10b      	bne.n	800baf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	3302      	adds	r3, #2
 800baf2:	61bb      	str	r3, [r7, #24]
 800baf4:	e007      	b.n	800bb06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	3301      	adds	r3, #1
 800bb04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1cb      	bne.n	800bab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2200      	movs	r2, #0
 800bb26:	2140      	movs	r1, #64	@ 0x40
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f000 f8ab 	bl	800bc84 <UART_WaitOnFlagUntilTimeout>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e006      	b.n	800bb4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e000      	b.n	800bb4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800bb4c:	2302      	movs	r3, #2
  }
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b08a      	sub	sp, #40	@ 0x28
 800bb5a:	af02      	add	r7, sp, #8
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	603b      	str	r3, [r7, #0]
 800bb62:	4613      	mov	r3, r2
 800bb64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b20      	cmp	r3, #32
 800bb74:	f040 8081 	bne.w	800bc7a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <HAL_UART_Receive+0x2e>
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e079      	b.n	800bc7c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2222      	movs	r2, #34	@ 0x22
 800bb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb9c:	f7fb fe3e 	bl	800781c <HAL_GetTick>
 800bba0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	88fa      	ldrh	r2, [r7, #6]
 800bba6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	88fa      	ldrh	r2, [r7, #6]
 800bbac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbb6:	d108      	bne.n	800bbca <HAL_UART_Receive+0x74>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	e003      	b.n	800bbd2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bbd2:	e047      	b.n	800bc64 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2120      	movs	r1, #32
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 f850 	bl	800bc84 <UART_WaitOnFlagUntilTimeout>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e042      	b.n	800bc7c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10c      	bne.n	800bc16 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	3302      	adds	r3, #2
 800bc12:	61bb      	str	r3, [r7, #24]
 800bc14:	e01f      	b.n	800bc56 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc1e:	d007      	beq.n	800bc30 <HAL_UART_Receive+0xda>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <HAL_UART_Receive+0xe8>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e008      	b.n	800bc50 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	3301      	adds	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1b2      	bne.n	800bbd4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e000      	b.n	800bc7c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bc7a:	2302      	movs	r3, #2
  }
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3720      	adds	r7, #32
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	4613      	mov	r3, r2
 800bc92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc94:	e03b      	b.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9c:	d037      	beq.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc9e:	f7fb fdbd 	bl	800781c <HAL_GetTick>
 800bca2:	4602      	mov	r2, r0
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	6a3a      	ldr	r2, [r7, #32]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d302      	bcc.n	800bcb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e03a      	b.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d023      	beq.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b80      	cmp	r3, #128	@ 0x80
 800bcca:	d020      	beq.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b40      	cmp	r3, #64	@ 0x40
 800bcd0:	d01d      	beq.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d116      	bne.n	800bd0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bce0:	2300      	movs	r3, #0
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 f81d 	bl	800bd36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2208      	movs	r2, #8
 800bd00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e00f      	b.n	800bd2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	4013      	ands	r3, r2
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	bf0c      	ite	eq
 800bd1e:	2301      	moveq	r3, #1
 800bd20:	2300      	movne	r3, #0
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	461a      	mov	r2, r3
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d0b4      	beq.n	800bc96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b095      	sub	sp, #84	@ 0x54
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	330c      	adds	r3, #12
 800bd44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd48:	e853 3f00 	ldrex	r3, [r3]
 800bd4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	330c      	adds	r3, #12
 800bd5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd5e:	643a      	str	r2, [r7, #64]	@ 0x40
 800bd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd66:	e841 2300 	strex	r3, r2, [r1]
 800bd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1e5      	bne.n	800bd3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3314      	adds	r3, #20
 800bd78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	f023 0301 	bic.w	r3, r3, #1
 800bd88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3314      	adds	r3, #20
 800bd90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e5      	bne.n	800bd72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d119      	bne.n	800bde2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	330c      	adds	r3, #12
 800bdb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f023 0310 	bic.w	r3, r3, #16
 800bdc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	330c      	adds	r3, #12
 800bdcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdce:	61ba      	str	r2, [r7, #24]
 800bdd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd2:	6979      	ldr	r1, [r7, #20]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	613b      	str	r3, [r7, #16]
   return(result);
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1e5      	bne.n	800bdae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bdf0:	bf00      	nop
 800bdf2:	3754      	adds	r7, #84	@ 0x54
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bdfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be00:	b0c0      	sub	sp, #256	@ 0x100
 800be02:	af00      	add	r7, sp, #0
 800be04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800be14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be18:	68d9      	ldr	r1, [r3, #12]
 800be1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	ea40 0301 	orr.w	r3, r0, r1
 800be24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800be26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	431a      	orrs	r2, r3
 800be34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	4313      	orrs	r3, r2
 800be44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800be48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800be54:	f021 010c 	bic.w	r1, r1, #12
 800be58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800be62:	430b      	orrs	r3, r1
 800be64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800be72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be76:	6999      	ldr	r1, [r3, #24]
 800be78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	ea40 0301 	orr.w	r3, r0, r1
 800be82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800be84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	4b8f      	ldr	r3, [pc, #572]	@ (800c0c8 <UART_SetConfig+0x2cc>)
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d005      	beq.n	800be9c <UART_SetConfig+0xa0>
 800be90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	4b8d      	ldr	r3, [pc, #564]	@ (800c0cc <UART_SetConfig+0x2d0>)
 800be98:	429a      	cmp	r2, r3
 800be9a:	d104      	bne.n	800bea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800be9c:	f7fd ff9c 	bl	8009dd8 <HAL_RCC_GetPCLK2Freq>
 800bea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bea4:	e003      	b.n	800beae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bea6:	f7fd ff83 	bl	8009db0 <HAL_RCC_GetPCLK1Freq>
 800beaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800beae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800beb8:	f040 810c 	bne.w	800c0d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800beca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bece:	4622      	mov	r2, r4
 800bed0:	462b      	mov	r3, r5
 800bed2:	1891      	adds	r1, r2, r2
 800bed4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bed6:	415b      	adcs	r3, r3
 800bed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800beda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bede:	4621      	mov	r1, r4
 800bee0:	eb12 0801 	adds.w	r8, r2, r1
 800bee4:	4629      	mov	r1, r5
 800bee6:	eb43 0901 	adc.w	r9, r3, r1
 800beea:	f04f 0200 	mov.w	r2, #0
 800beee:	f04f 0300 	mov.w	r3, #0
 800bef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800befa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800befe:	4690      	mov	r8, r2
 800bf00:	4699      	mov	r9, r3
 800bf02:	4623      	mov	r3, r4
 800bf04:	eb18 0303 	adds.w	r3, r8, r3
 800bf08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	eb49 0303 	adc.w	r3, r9, r3
 800bf12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bf16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bf26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	18db      	adds	r3, r3, r3
 800bf2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf30:	4613      	mov	r3, r2
 800bf32:	eb42 0303 	adc.w	r3, r2, r3
 800bf36:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bf3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bf40:	f7f4 fed2 	bl	8000ce8 <__aeabi_uldivmod>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4b61      	ldr	r3, [pc, #388]	@ (800c0d0 <UART_SetConfig+0x2d4>)
 800bf4a:	fba3 2302 	umull	r2, r3, r3, r2
 800bf4e:	095b      	lsrs	r3, r3, #5
 800bf50:	011c      	lsls	r4, r3, #4
 800bf52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bf60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bf64:	4642      	mov	r2, r8
 800bf66:	464b      	mov	r3, r9
 800bf68:	1891      	adds	r1, r2, r2
 800bf6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bf6c:	415b      	adcs	r3, r3
 800bf6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bf74:	4641      	mov	r1, r8
 800bf76:	eb12 0a01 	adds.w	sl, r2, r1
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	eb43 0b01 	adc.w	fp, r3, r1
 800bf80:	f04f 0200 	mov.w	r2, #0
 800bf84:	f04f 0300 	mov.w	r3, #0
 800bf88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bf8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bf90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf94:	4692      	mov	sl, r2
 800bf96:	469b      	mov	fp, r3
 800bf98:	4643      	mov	r3, r8
 800bf9a:	eb1a 0303 	adds.w	r3, sl, r3
 800bf9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	eb4b 0303 	adc.w	r3, fp, r3
 800bfa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bfb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bfbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	18db      	adds	r3, r3, r3
 800bfc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	eb42 0303 	adc.w	r3, r2, r3
 800bfcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bfd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bfd6:	f7f4 fe87 	bl	8000ce8 <__aeabi_uldivmod>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	4b3b      	ldr	r3, [pc, #236]	@ (800c0d0 <UART_SetConfig+0x2d4>)
 800bfe2:	fba3 2301 	umull	r2, r3, r3, r1
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	2264      	movs	r2, #100	@ 0x64
 800bfea:	fb02 f303 	mul.w	r3, r2, r3
 800bfee:	1acb      	subs	r3, r1, r3
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bff6:	4b36      	ldr	r3, [pc, #216]	@ (800c0d0 <UART_SetConfig+0x2d4>)
 800bff8:	fba3 2302 	umull	r2, r3, r3, r2
 800bffc:	095b      	lsrs	r3, r3, #5
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c004:	441c      	add	r4, r3
 800c006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c010:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c018:	4642      	mov	r2, r8
 800c01a:	464b      	mov	r3, r9
 800c01c:	1891      	adds	r1, r2, r2
 800c01e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c020:	415b      	adcs	r3, r3
 800c022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c028:	4641      	mov	r1, r8
 800c02a:	1851      	adds	r1, r2, r1
 800c02c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c02e:	4649      	mov	r1, r9
 800c030:	414b      	adcs	r3, r1
 800c032:	637b      	str	r3, [r7, #52]	@ 0x34
 800c034:	f04f 0200 	mov.w	r2, #0
 800c038:	f04f 0300 	mov.w	r3, #0
 800c03c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c040:	4659      	mov	r1, fp
 800c042:	00cb      	lsls	r3, r1, #3
 800c044:	4651      	mov	r1, sl
 800c046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c04a:	4651      	mov	r1, sl
 800c04c:	00ca      	lsls	r2, r1, #3
 800c04e:	4610      	mov	r0, r2
 800c050:	4619      	mov	r1, r3
 800c052:	4603      	mov	r3, r0
 800c054:	4642      	mov	r2, r8
 800c056:	189b      	adds	r3, r3, r2
 800c058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c05c:	464b      	mov	r3, r9
 800c05e:	460a      	mov	r2, r1
 800c060:	eb42 0303 	adc.w	r3, r2, r3
 800c064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c074:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c07c:	460b      	mov	r3, r1
 800c07e:	18db      	adds	r3, r3, r3
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c082:	4613      	mov	r3, r2
 800c084:	eb42 0303 	adc.w	r3, r2, r3
 800c088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c08a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c08e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c092:	f7f4 fe29 	bl	8000ce8 <__aeabi_uldivmod>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d0 <UART_SetConfig+0x2d4>)
 800c09c:	fba3 1302 	umull	r1, r3, r3, r2
 800c0a0:	095b      	lsrs	r3, r3, #5
 800c0a2:	2164      	movs	r1, #100	@ 0x64
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	3332      	adds	r3, #50	@ 0x32
 800c0ae:	4a08      	ldr	r2, [pc, #32]	@ (800c0d0 <UART_SetConfig+0x2d4>)
 800c0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b4:	095b      	lsrs	r3, r3, #5
 800c0b6:	f003 0207 	and.w	r2, r3, #7
 800c0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4422      	add	r2, r4
 800c0c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c0c4:	e106      	b.n	800c2d4 <UART_SetConfig+0x4d8>
 800c0c6:	bf00      	nop
 800c0c8:	40011000 	.word	0x40011000
 800c0cc:	40011400 	.word	0x40011400
 800c0d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c0de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c0e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c0e6:	4642      	mov	r2, r8
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	1891      	adds	r1, r2, r2
 800c0ec:	6239      	str	r1, [r7, #32]
 800c0ee:	415b      	adcs	r3, r3
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	1854      	adds	r4, r2, r1
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	eb43 0501 	adc.w	r5, r3, r1
 800c100:	f04f 0200 	mov.w	r2, #0
 800c104:	f04f 0300 	mov.w	r3, #0
 800c108:	00eb      	lsls	r3, r5, #3
 800c10a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c10e:	00e2      	lsls	r2, r4, #3
 800c110:	4614      	mov	r4, r2
 800c112:	461d      	mov	r5, r3
 800c114:	4643      	mov	r3, r8
 800c116:	18e3      	adds	r3, r4, r3
 800c118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c11c:	464b      	mov	r3, r9
 800c11e:	eb45 0303 	adc.w	r3, r5, r3
 800c122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c136:	f04f 0200 	mov.w	r2, #0
 800c13a:	f04f 0300 	mov.w	r3, #0
 800c13e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c142:	4629      	mov	r1, r5
 800c144:	008b      	lsls	r3, r1, #2
 800c146:	4621      	mov	r1, r4
 800c148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c14c:	4621      	mov	r1, r4
 800c14e:	008a      	lsls	r2, r1, #2
 800c150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c154:	f7f4 fdc8 	bl	8000ce8 <__aeabi_uldivmod>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4b60      	ldr	r3, [pc, #384]	@ (800c2e0 <UART_SetConfig+0x4e4>)
 800c15e:	fba3 2302 	umull	r2, r3, r3, r2
 800c162:	095b      	lsrs	r3, r3, #5
 800c164:	011c      	lsls	r4, r3, #4
 800c166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c16a:	2200      	movs	r2, #0
 800c16c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c178:	4642      	mov	r2, r8
 800c17a:	464b      	mov	r3, r9
 800c17c:	1891      	adds	r1, r2, r2
 800c17e:	61b9      	str	r1, [r7, #24]
 800c180:	415b      	adcs	r3, r3
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c188:	4641      	mov	r1, r8
 800c18a:	1851      	adds	r1, r2, r1
 800c18c:	6139      	str	r1, [r7, #16]
 800c18e:	4649      	mov	r1, r9
 800c190:	414b      	adcs	r3, r1
 800c192:	617b      	str	r3, [r7, #20]
 800c194:	f04f 0200 	mov.w	r2, #0
 800c198:	f04f 0300 	mov.w	r3, #0
 800c19c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c1a0:	4659      	mov	r1, fp
 800c1a2:	00cb      	lsls	r3, r1, #3
 800c1a4:	4651      	mov	r1, sl
 800c1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1aa:	4651      	mov	r1, sl
 800c1ac:	00ca      	lsls	r2, r1, #3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	4642      	mov	r2, r8
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c1bc:	464b      	mov	r3, r9
 800c1be:	460a      	mov	r2, r1
 800c1c0:	eb42 0303 	adc.w	r3, r2, r3
 800c1c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c1d4:	f04f 0200 	mov.w	r2, #0
 800c1d8:	f04f 0300 	mov.w	r3, #0
 800c1dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	008b      	lsls	r3, r1, #2
 800c1e4:	4641      	mov	r1, r8
 800c1e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	008a      	lsls	r2, r1, #2
 800c1ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c1f2:	f7f4 fd79 	bl	8000ce8 <__aeabi_uldivmod>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4b38      	ldr	r3, [pc, #224]	@ (800c2e0 <UART_SetConfig+0x4e4>)
 800c1fe:	fba3 2301 	umull	r2, r3, r3, r1
 800c202:	095b      	lsrs	r3, r3, #5
 800c204:	2264      	movs	r2, #100	@ 0x64
 800c206:	fb02 f303 	mul.w	r3, r2, r3
 800c20a:	1acb      	subs	r3, r1, r3
 800c20c:	011b      	lsls	r3, r3, #4
 800c20e:	3332      	adds	r3, #50	@ 0x32
 800c210:	4a33      	ldr	r2, [pc, #204]	@ (800c2e0 <UART_SetConfig+0x4e4>)
 800c212:	fba2 2303 	umull	r2, r3, r2, r3
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c21c:	441c      	add	r4, r3
 800c21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c222:	2200      	movs	r2, #0
 800c224:	673b      	str	r3, [r7, #112]	@ 0x70
 800c226:	677a      	str	r2, [r7, #116]	@ 0x74
 800c228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c22c:	4642      	mov	r2, r8
 800c22e:	464b      	mov	r3, r9
 800c230:	1891      	adds	r1, r2, r2
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	415b      	adcs	r3, r3
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c23c:	4641      	mov	r1, r8
 800c23e:	1851      	adds	r1, r2, r1
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	4649      	mov	r1, r9
 800c244:	414b      	adcs	r3, r1
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c254:	4659      	mov	r1, fp
 800c256:	00cb      	lsls	r3, r1, #3
 800c258:	4651      	mov	r1, sl
 800c25a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c25e:	4651      	mov	r1, sl
 800c260:	00ca      	lsls	r2, r1, #3
 800c262:	4610      	mov	r0, r2
 800c264:	4619      	mov	r1, r3
 800c266:	4603      	mov	r3, r0
 800c268:	4642      	mov	r2, r8
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c26e:	464b      	mov	r3, r9
 800c270:	460a      	mov	r2, r1
 800c272:	eb42 0303 	adc.w	r3, r2, r3
 800c276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	663b      	str	r3, [r7, #96]	@ 0x60
 800c282:	667a      	str	r2, [r7, #100]	@ 0x64
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	f04f 0300 	mov.w	r3, #0
 800c28c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c290:	4649      	mov	r1, r9
 800c292:	008b      	lsls	r3, r1, #2
 800c294:	4641      	mov	r1, r8
 800c296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c29a:	4641      	mov	r1, r8
 800c29c:	008a      	lsls	r2, r1, #2
 800c29e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c2a2:	f7f4 fd21 	bl	8000ce8 <__aeabi_uldivmod>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e0 <UART_SetConfig+0x4e4>)
 800c2ac:	fba3 1302 	umull	r1, r3, r3, r2
 800c2b0:	095b      	lsrs	r3, r3, #5
 800c2b2:	2164      	movs	r1, #100	@ 0x64
 800c2b4:	fb01 f303 	mul.w	r3, r1, r3
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	3332      	adds	r3, #50	@ 0x32
 800c2be:	4a08      	ldr	r2, [pc, #32]	@ (800c2e0 <UART_SetConfig+0x4e4>)
 800c2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c4:	095b      	lsrs	r3, r3, #5
 800c2c6:	f003 020f 	and.w	r2, r3, #15
 800c2ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4422      	add	r2, r4
 800c2d2:	609a      	str	r2, [r3, #8]
}
 800c2d4:	bf00      	nop
 800c2d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2e0:	51eb851f 	.word	0x51eb851f

0800c2e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c2f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2f6:	2b84      	cmp	r3, #132	@ 0x84
 800c2f8:	d005      	beq.n	800c306 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c2fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	3303      	adds	r3, #3
 800c304:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c306:	68fb      	ldr	r3, [r7, #12]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c318:	f001 f984 	bl	800d624 <vTaskStartScheduler>
  
  return osOK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	bd80      	pop	{r7, pc}

0800c322 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c322:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c324:	b089      	sub	sp, #36	@ 0x24
 800c326:	af04      	add	r7, sp, #16
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d020      	beq.n	800c376 <osThreadCreate+0x54>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01c      	beq.n	800c376 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685c      	ldr	r4, [r3, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691e      	ldr	r6, [r3, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff ffc8 	bl	800c2e4 <makeFreeRtosPriority>
 800c354:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c35e:	9202      	str	r2, [sp, #8]
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	9100      	str	r1, [sp, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	4632      	mov	r2, r6
 800c368:	4629      	mov	r1, r5
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 fee8 	bl	800d140 <xTaskCreateStatic>
 800c370:	4603      	mov	r3, r0
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	e01c      	b.n	800c3b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685c      	ldr	r4, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c382:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff ffaa 	bl	800c2e4 <makeFreeRtosPriority>
 800c390:	4602      	mov	r2, r0
 800c392:	f107 030c 	add.w	r3, r7, #12
 800c396:	9301      	str	r3, [sp, #4]
 800c398:	9200      	str	r2, [sp, #0]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	4632      	mov	r2, r6
 800c39e:	4629      	mov	r1, r5
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 ff2d 	bl	800d200 <xTaskCreate>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d001      	beq.n	800c3b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e000      	b.n	800c3b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <osDelay+0x16>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	e000      	b.n	800c3d2 <osDelay+0x18>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 f8f0 	bl	800d5b8 <vTaskDelay>
  
  return osOK;
 800c3d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f103 0208 	add.w	r2, r3, #8
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f103 0208 	add.w	r2, r3, #8
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f103 0208 	add.w	r2, r3, #8
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	601a      	str	r2, [r3, #0]
}
 800c478:	bf00      	nop
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49a:	d103      	bne.n	800c4a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	e00c      	b.n	800c4be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e002      	b.n	800c4b2 <vListInsert+0x2e>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d2f6      	bcs.n	800c4ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	601a      	str	r2, [r3, #0]
}
 800c4ea:	bf00      	nop
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	6892      	ldr	r2, [r2, #8]
 800c50c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	6852      	ldr	r2, [r2, #4]
 800c516:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d103      	bne.n	800c52a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	1e5a      	subs	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
	...

0800c54c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <xQueueGenericReset+0x2c>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	60bb      	str	r3, [r7, #8]
}
 800c572:	bf00      	nop
 800c574:	bf00      	nop
 800c576:	e7fd      	b.n	800c574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c578:	f002 fa4e 	bl	800ea18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c584:	68f9      	ldr	r1, [r7, #12]
 800c586:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c588:	fb01 f303 	mul.w	r3, r1, r3
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	68f9      	ldr	r1, [r7, #12]
 800c5ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c5ae:	fb01 f303 	mul.w	r3, r1, r3
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	22ff      	movs	r2, #255	@ 0xff
 800c5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	22ff      	movs	r2, #255	@ 0xff
 800c5c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d114      	bne.n	800c5f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01a      	beq.n	800c60c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3310      	adds	r3, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f001 fab0 	bl	800db40 <xTaskRemoveFromEventList>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d012      	beq.n	800c60c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c61c <xQueueGenericReset+0xd0>)
 800c5e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	e009      	b.n	800c60c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3310      	adds	r3, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff fef0 	bl	800c3e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3324      	adds	r3, #36	@ 0x24
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff feeb 	bl	800c3e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c60c:	f002 fa36 	bl	800ea7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c610:	2301      	movs	r3, #1
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08a      	sub	sp, #40	@ 0x28
 800c624:	af02      	add	r7, sp, #8
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10b      	bne.n	800c64c <xQueueGenericCreate+0x2c>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	613b      	str	r3, [r7, #16]
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	e7fd      	b.n	800c648 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	fb02 f303 	mul.w	r3, r2, r3
 800c654:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	3350      	adds	r3, #80	@ 0x50
 800c65a:	4618      	mov	r0, r3
 800c65c:	f002 fafe 	bl	800ec5c <pvPortMalloc>
 800c660:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d011      	beq.n	800c68c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	3350      	adds	r3, #80	@ 0x50
 800c670:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c67a:	79fa      	ldrb	r2, [r7, #7]
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	4613      	mov	r3, r2
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	68b9      	ldr	r1, [r7, #8]
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f000 f805 	bl	800c696 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c68c:	69bb      	ldr	r3, [r7, #24]
	}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d103      	bne.n	800c6b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	e002      	b.n	800c6b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	69b8      	ldr	r0, [r7, #24]
 800c6c8:	f7ff ff40 	bl	800c54c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6d4:	bf00      	nop
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00e      	beq.n	800c708 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2200      	movs	r2, #0
 800c700:	2100      	movs	r1, #0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f81c 	bl	800c740 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c71a:	2301      	movs	r3, #1
 800c71c:	617b      	str	r3, [r7, #20]
 800c71e:	2300      	movs	r3, #0
 800c720:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	461a      	mov	r2, r3
 800c726:	6939      	ldr	r1, [r7, #16]
 800c728:	6978      	ldr	r0, [r7, #20]
 800c72a:	f7ff ff79 	bl	800c620 <xQueueGenericCreate>
 800c72e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff ffd3 	bl	800c6dc <prvInitialiseMutex>

		return xNewQueue;
 800c736:	68fb      	ldr	r3, [r7, #12]
	}
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08e      	sub	sp, #56	@ 0x38
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c74e:	2300      	movs	r3, #0
 800c750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10b      	bne.n	800c774 <xQueueGenericSend+0x34>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	e7fd      	b.n	800c770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d103      	bne.n	800c782 <xQueueGenericSend+0x42>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d101      	bne.n	800c786 <xQueueGenericSend+0x46>
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <xQueueGenericSend+0x48>
 800c786:	2300      	movs	r3, #0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10b      	bne.n	800c7a4 <xQueueGenericSend+0x64>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	e7fd      	b.n	800c7a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d103      	bne.n	800c7b2 <xQueueGenericSend+0x72>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <xQueueGenericSend+0x76>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <xQueueGenericSend+0x78>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10b      	bne.n	800c7d4 <xQueueGenericSend+0x94>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	623b      	str	r3, [r7, #32]
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	e7fd      	b.n	800c7d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7d4:	f001 fbc2 	bl	800df5c <xTaskGetSchedulerState>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <xQueueGenericSend+0xa4>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <xQueueGenericSend+0xa8>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e000      	b.n	800c7ea <xQueueGenericSend+0xaa>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10b      	bne.n	800c806 <xQueueGenericSend+0xc6>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	61fb      	str	r3, [r7, #28]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c806:	f002 f907 	bl	800ea18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c812:	429a      	cmp	r2, r3
 800c814:	d302      	bcc.n	800c81c <xQueueGenericSend+0xdc>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d129      	bne.n	800c870 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	68b9      	ldr	r1, [r7, #8]
 800c820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c822:	f000 fb7d 	bl	800cf20 <prvCopyDataToQueue>
 800c826:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d010      	beq.n	800c852 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c832:	3324      	adds	r3, #36	@ 0x24
 800c834:	4618      	mov	r0, r3
 800c836:	f001 f983 	bl	800db40 <xTaskRemoveFromEventList>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c840:	4b3f      	ldr	r3, [pc, #252]	@ (800c940 <xQueueGenericSend+0x200>)
 800c842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	e00a      	b.n	800c868 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d007      	beq.n	800c868 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c858:	4b39      	ldr	r3, [pc, #228]	@ (800c940 <xQueueGenericSend+0x200>)
 800c85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c85e:	601a      	str	r2, [r3, #0]
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c868:	f002 f908 	bl	800ea7c <vPortExitCritical>
				return pdPASS;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e063      	b.n	800c938 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d103      	bne.n	800c87e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c876:	f002 f901 	bl	800ea7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	e05c      	b.n	800c938 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c880:	2b00      	cmp	r3, #0
 800c882:	d106      	bne.n	800c892 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c884:	f107 0314 	add.w	r3, r7, #20
 800c888:	4618      	mov	r0, r3
 800c88a:	f001 f9bd 	bl	800dc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c88e:	2301      	movs	r3, #1
 800c890:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c892:	f002 f8f3 	bl	800ea7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c896:	f000 ff2f 	bl	800d6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c89a:	f002 f8bd 	bl	800ea18 <vPortEnterCritical>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8a4:	b25b      	sxtb	r3, r3
 800c8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8aa:	d103      	bne.n	800c8b4 <xQueueGenericSend+0x174>
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8ba:	b25b      	sxtb	r3, r3
 800c8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c0:	d103      	bne.n	800c8ca <xQueueGenericSend+0x18a>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8ca:	f002 f8d7 	bl	800ea7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8ce:	1d3a      	adds	r2, r7, #4
 800c8d0:	f107 0314 	add.w	r3, r7, #20
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f001 f9ac 	bl	800dc34 <xTaskCheckForTimeOut>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d124      	bne.n	800c92c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8e4:	f000 fc14 	bl	800d110 <prvIsQueueFull>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d018      	beq.n	800c920 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f0:	3310      	adds	r3, #16
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f001 f8fc 	bl	800daf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8fe:	f000 fb9f 	bl	800d040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c902:	f000 ff07 	bl	800d714 <xTaskResumeAll>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f47f af7c 	bne.w	800c806 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c90e:	4b0c      	ldr	r3, [pc, #48]	@ (800c940 <xQueueGenericSend+0x200>)
 800c910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	e772      	b.n	800c806 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c922:	f000 fb8d 	bl	800d040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c926:	f000 fef5 	bl	800d714 <xTaskResumeAll>
 800c92a:	e76c      	b.n	800c806 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c92c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c92e:	f000 fb87 	bl	800d040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c932:	f000 feef 	bl	800d714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3738      	adds	r7, #56	@ 0x38
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	e000ed04 	.word	0xe000ed04

0800c944 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08c      	sub	sp, #48	@ 0x30
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c950:	2300      	movs	r3, #0
 800c952:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10b      	bne.n	800c976 <xQueueReceive+0x32>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	623b      	str	r3, [r7, #32]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d103      	bne.n	800c984 <xQueueReceive+0x40>
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <xQueueReceive+0x44>
 800c984:	2301      	movs	r3, #1
 800c986:	e000      	b.n	800c98a <xQueueReceive+0x46>
 800c988:	2300      	movs	r3, #0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10b      	bne.n	800c9a6 <xQueueReceive+0x62>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	61fb      	str	r3, [r7, #28]
}
 800c9a0:	bf00      	nop
 800c9a2:	bf00      	nop
 800c9a4:	e7fd      	b.n	800c9a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9a6:	f001 fad9 	bl	800df5c <xTaskGetSchedulerState>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <xQueueReceive+0x72>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <xQueueReceive+0x76>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e000      	b.n	800c9bc <xQueueReceive+0x78>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10b      	bne.n	800c9d8 <xQueueReceive+0x94>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	61bb      	str	r3, [r7, #24]
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9d8:	f002 f81e 	bl	800ea18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01f      	beq.n	800ca28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9e8:	68b9      	ldr	r1, [r7, #8]
 800c9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9ec:	f000 fb02 	bl	800cff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f2:	1e5a      	subs	r2, r3, #1
 800c9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00f      	beq.n	800ca20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca02:	3310      	adds	r3, #16
 800ca04:	4618      	mov	r0, r3
 800ca06:	f001 f89b 	bl	800db40 <xTaskRemoveFromEventList>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca10:	4b3c      	ldr	r3, [pc, #240]	@ (800cb04 <xQueueReceive+0x1c0>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca20:	f002 f82c 	bl	800ea7c <vPortExitCritical>
				return pdPASS;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e069      	b.n	800cafc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca2e:	f002 f825 	bl	800ea7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e062      	b.n	800cafc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d106      	bne.n	800ca4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca3c:	f107 0310 	add.w	r3, r7, #16
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 f8e1 	bl	800dc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca46:	2301      	movs	r3, #1
 800ca48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca4a:	f002 f817 	bl	800ea7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca4e:	f000 fe53 	bl	800d6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca52:	f001 ffe1 	bl	800ea18 <vPortEnterCritical>
 800ca56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca5c:	b25b      	sxtb	r3, r3
 800ca5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca62:	d103      	bne.n	800ca6c <xQueueReceive+0x128>
 800ca64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca72:	b25b      	sxtb	r3, r3
 800ca74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca78:	d103      	bne.n	800ca82 <xQueueReceive+0x13e>
 800ca7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca82:	f001 fffb 	bl	800ea7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca86:	1d3a      	adds	r2, r7, #4
 800ca88:	f107 0310 	add.w	r3, r7, #16
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 f8d0 	bl	800dc34 <xTaskCheckForTimeOut>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d123      	bne.n	800cae2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca9c:	f000 fb22 	bl	800d0e4 <prvIsQueueEmpty>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d017      	beq.n	800cad6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa8:	3324      	adds	r3, #36	@ 0x24
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f001 f820 	bl	800daf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cab6:	f000 fac3 	bl	800d040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800caba:	f000 fe2b 	bl	800d714 <xTaskResumeAll>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d189      	bne.n	800c9d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cac4:	4b0f      	ldr	r3, [pc, #60]	@ (800cb04 <xQueueReceive+0x1c0>)
 800cac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	e780      	b.n	800c9d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad8:	f000 fab2 	bl	800d040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cadc:	f000 fe1a 	bl	800d714 <xTaskResumeAll>
 800cae0:	e77a      	b.n	800c9d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cae4:	f000 faac 	bl	800d040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cae8:	f000 fe14 	bl	800d714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caee:	f000 faf9 	bl	800d0e4 <prvIsQueueEmpty>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f43f af6f 	beq.w	800c9d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cafa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3730      	adds	r7, #48	@ 0x30
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08e      	sub	sp, #56	@ 0x38
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb12:	2300      	movs	r3, #0
 800cb14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10b      	bne.n	800cb3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	623b      	str	r3, [r7, #32]
}
 800cb36:	bf00      	nop
 800cb38:	bf00      	nop
 800cb3a:	e7fd      	b.n	800cb38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	61fb      	str	r3, [r7, #28]
}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	e7fd      	b.n	800cb58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb5c:	f001 f9fe 	bl	800df5c <xTaskGetSchedulerState>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <xQueueSemaphoreTake+0x64>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <xQueueSemaphoreTake+0x68>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <xQueueSemaphoreTake+0x6a>
 800cb70:	2300      	movs	r3, #0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10b      	bne.n	800cb8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	61bb      	str	r3, [r7, #24]
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	e7fd      	b.n	800cb8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb8e:	f001 ff43 	bl	800ea18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d024      	beq.n	800cbe8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	1e5a      	subs	r2, r3, #1
 800cba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d104      	bne.n	800cbb8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbae:	f001 fb81 	bl	800e2b4 <pvTaskIncrementMutexHeldCount>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00f      	beq.n	800cbe0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	3310      	adds	r3, #16
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 ffbb 	bl	800db40 <xTaskRemoveFromEventList>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d007      	beq.n	800cbe0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbd0:	4b54      	ldr	r3, [pc, #336]	@ (800cd24 <xQueueSemaphoreTake+0x21c>)
 800cbd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbe0:	f001 ff4c 	bl	800ea7c <vPortExitCritical>
				return pdPASS;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e098      	b.n	800cd1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d112      	bne.n	800cc14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00b      	beq.n	800cc0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	617b      	str	r3, [r7, #20]
}
 800cc06:	bf00      	nop
 800cc08:	bf00      	nop
 800cc0a:	e7fd      	b.n	800cc08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc0c:	f001 ff36 	bl	800ea7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc10:	2300      	movs	r3, #0
 800cc12:	e082      	b.n	800cd1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fff2 	bl	800dc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc24:	2301      	movs	r3, #1
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc28:	f001 ff28 	bl	800ea7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc2c:	f000 fd64 	bl	800d6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc30:	f001 fef2 	bl	800ea18 <vPortEnterCritical>
 800cc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc3a:	b25b      	sxtb	r3, r3
 800cc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc40:	d103      	bne.n	800cc4a <xQueueSemaphoreTake+0x142>
 800cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc56:	d103      	bne.n	800cc60 <xQueueSemaphoreTake+0x158>
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc60:	f001 ff0c 	bl	800ea7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc64:	463a      	mov	r2, r7
 800cc66:	f107 030c 	add.w	r3, r7, #12
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 ffe1 	bl	800dc34 <xTaskCheckForTimeOut>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d132      	bne.n	800ccde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc7a:	f000 fa33 	bl	800d0e4 <prvIsQueueEmpty>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d026      	beq.n	800ccd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d109      	bne.n	800cca0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cc8c:	f001 fec4 	bl	800ea18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 f97f 	bl	800df98 <xTaskPriorityInherit>
 800cc9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cc9c:	f001 feee 	bl	800ea7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca2:	3324      	adds	r3, #36	@ 0x24
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 ff23 	bl	800daf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccb0:	f000 f9c6 	bl	800d040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccb4:	f000 fd2e 	bl	800d714 <xTaskResumeAll>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f47f af67 	bne.w	800cb8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ccc0:	4b18      	ldr	r3, [pc, #96]	@ (800cd24 <xQueueSemaphoreTake+0x21c>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	e75d      	b.n	800cb8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ccd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccd4:	f000 f9b4 	bl	800d040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccd8:	f000 fd1c 	bl	800d714 <xTaskResumeAll>
 800ccdc:	e757      	b.n	800cb8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cce0:	f000 f9ae 	bl	800d040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cce4:	f000 fd16 	bl	800d714 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccea:	f000 f9fb 	bl	800d0e4 <prvIsQueueEmpty>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f43f af4c 	beq.w	800cb8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00d      	beq.n	800cd18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ccfc:	f001 fe8c 	bl	800ea18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd02:	f000 f8f5 	bl	800cef0 <prvGetDisinheritPriorityAfterTimeout>
 800cd06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f001 fa40 	bl	800e194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd14:	f001 feb2 	bl	800ea7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3738      	adds	r7, #56	@ 0x38
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	e000ed04 	.word	0xe000ed04

0800cd28 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	@ 0x38
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd34:	2300      	movs	r3, #0
 800cd36:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xQueuePeek+0x32>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d103      	bne.n	800cd68 <xQueuePeek+0x40>
 800cd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <xQueuePeek+0x44>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e000      	b.n	800cd6e <xQueuePeek+0x46>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <xQueuePeek+0x62>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	623b      	str	r3, [r7, #32]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd8a:	f001 f8e7 	bl	800df5c <xTaskGetSchedulerState>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d102      	bne.n	800cd9a <xQueuePeek+0x72>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <xQueuePeek+0x76>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <xQueuePeek+0x78>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10b      	bne.n	800cdbc <xQueuePeek+0x94>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	61fb      	str	r3, [r7, #28]
}
 800cdb6:	bf00      	nop
 800cdb8:	bf00      	nop
 800cdba:	e7fd      	b.n	800cdb8 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdbc:	f001 fe2c 	bl	800ea18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d021      	beq.n	800ce10 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdd2:	68b9      	ldr	r1, [r7, #8]
 800cdd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdd6:	f000 f90d 	bl	800cff4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800cdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdde:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00f      	beq.n	800ce08 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdea:	3324      	adds	r3, #36	@ 0x24
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fea7 	bl	800db40 <xTaskRemoveFromEventList>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d007      	beq.n	800ce08 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800cdf8:	4b3c      	ldr	r3, [pc, #240]	@ (800ceec <xQueuePeek+0x1c4>)
 800cdfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdfe:	601a      	str	r2, [r3, #0]
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce08:	f001 fe38 	bl	800ea7c <vPortExitCritical>
				return pdPASS;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e069      	b.n	800cee4 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d103      	bne.n	800ce1e <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce16:	f001 fe31 	bl	800ea7c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e062      	b.n	800cee4 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d106      	bne.n	800ce32 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce24:	f107 0314 	add.w	r3, r7, #20
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 feed 	bl	800dc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce32:	f001 fe23 	bl	800ea7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce36:	f000 fc5f 	bl	800d6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce3a:	f001 fded 	bl	800ea18 <vPortEnterCritical>
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce44:	b25b      	sxtb	r3, r3
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d103      	bne.n	800ce54 <xQueuePeek+0x12c>
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce60:	d103      	bne.n	800ce6a <xQueuePeek+0x142>
 800ce62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce6a:	f001 fe07 	bl	800ea7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce6e:	1d3a      	adds	r2, r7, #4
 800ce70:	f107 0314 	add.w	r3, r7, #20
 800ce74:	4611      	mov	r1, r2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fedc 	bl	800dc34 <xTaskCheckForTimeOut>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d123      	bne.n	800ceca <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce84:	f000 f92e 	bl	800d0e4 <prvIsQueueEmpty>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d017      	beq.n	800cebe <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	3324      	adds	r3, #36	@ 0x24
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	4611      	mov	r1, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fe2c 	bl	800daf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce9e:	f000 f8cf 	bl	800d040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cea2:	f000 fc37 	bl	800d714 <xTaskResumeAll>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d187      	bne.n	800cdbc <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 800ceac:	4b0f      	ldr	r3, [pc, #60]	@ (800ceec <xQueuePeek+0x1c4>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	e77e      	b.n	800cdbc <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800cebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cec0:	f000 f8be 	bl	800d040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cec4:	f000 fc26 	bl	800d714 <xTaskResumeAll>
 800cec8:	e778      	b.n	800cdbc <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800ceca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cecc:	f000 f8b8 	bl	800d040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ced0:	f000 fc20 	bl	800d714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ced4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ced6:	f000 f905 	bl	800d0e4 <prvIsQueueEmpty>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f43f af6d 	beq.w	800cdbc <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cee2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3738      	adds	r7, #56	@ 0x38
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	e000ed04 	.word	0xe000ed04

0800cef0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f1c3 0307 	rsb	r3, r3, #7
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	e001      	b.n	800cf12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf12:	68fb      	ldr	r3, [r7, #12]
	}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10d      	bne.n	800cf5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d14d      	bne.n	800cfe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 f89a 	bl	800e084 <xTaskPriorityDisinherit>
 800cf50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	609a      	str	r2, [r3, #8]
 800cf58:	e043      	b.n	800cfe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d119      	bne.n	800cf94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6858      	ldr	r0, [r3, #4]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf68:	461a      	mov	r2, r3
 800cf6a:	68b9      	ldr	r1, [r7, #8]
 800cf6c:	f003 fcdf 	bl	801092e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf78:	441a      	add	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d32b      	bcc.n	800cfe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	605a      	str	r2, [r3, #4]
 800cf92:	e026      	b.n	800cfe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	68d8      	ldr	r0, [r3, #12]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	68b9      	ldr	r1, [r7, #8]
 800cfa0:	f003 fcc5 	bl	801092e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	68da      	ldr	r2, [r3, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfac:	425b      	negs	r3, r3
 800cfae:	441a      	add	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	68da      	ldr	r2, [r3, #12]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d207      	bcs.n	800cfd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	689a      	ldr	r2, [r3, #8]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc8:	425b      	negs	r3, r3
 800cfca:	441a      	add	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d105      	bne.n	800cfe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	1c5a      	adds	r2, r3, #1
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cfea:	697b      	ldr	r3, [r7, #20]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d002:	2b00      	cmp	r3, #0
 800d004:	d018      	beq.n	800d038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d00e:	441a      	add	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d303      	bcc.n	800d028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68d9      	ldr	r1, [r3, #12]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d030:	461a      	mov	r2, r3
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f003 fc7b 	bl	801092e <memcpy>
	}
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d048:	f001 fce6 	bl	800ea18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d054:	e011      	b.n	800d07a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d012      	beq.n	800d084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3324      	adds	r3, #36	@ 0x24
 800d062:	4618      	mov	r0, r3
 800d064:	f000 fd6c 	bl	800db40 <xTaskRemoveFromEventList>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d06e:	f000 fe45 	bl	800dcfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
 800d074:	3b01      	subs	r3, #1
 800d076:	b2db      	uxtb	r3, r3
 800d078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	dce9      	bgt.n	800d056 <prvUnlockQueue+0x16>
 800d082:	e000      	b.n	800d086 <prvUnlockQueue+0x46>
					break;
 800d084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	22ff      	movs	r2, #255	@ 0xff
 800d08a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d08e:	f001 fcf5 	bl	800ea7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d092:	f001 fcc1 	bl	800ea18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d09c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d09e:	e011      	b.n	800d0c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d012      	beq.n	800d0ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3310      	adds	r3, #16
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 fd47 	bl	800db40 <xTaskRemoveFromEventList>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d0b8:	f000 fe20 	bl	800dcfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	dce9      	bgt.n	800d0a0 <prvUnlockQueue+0x60>
 800d0cc:	e000      	b.n	800d0d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d0ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	22ff      	movs	r2, #255	@ 0xff
 800d0d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d0d8:	f001 fcd0 	bl	800ea7c <vPortExitCritical>
}
 800d0dc:	bf00      	nop
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0ec:	f001 fc94 	bl	800ea18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	e001      	b.n	800d102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d102:	f001 fcbb 	bl	800ea7c <vPortExitCritical>

	return xReturn;
 800d106:	68fb      	ldr	r3, [r7, #12]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d118:	f001 fc7e 	bl	800ea18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d124:	429a      	cmp	r2, r3
 800d126:	d102      	bne.n	800d12e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	e001      	b.n	800d132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d12e:	2300      	movs	r3, #0
 800d130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d132:	f001 fca3 	bl	800ea7c <vPortExitCritical>

	return xReturn;
 800d136:	68fb      	ldr	r3, [r7, #12]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08e      	sub	sp, #56	@ 0x38
 800d144:	af04      	add	r7, sp, #16
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10b      	bne.n	800d16c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	623b      	str	r3, [r7, #32]
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	e7fd      	b.n	800d168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10b      	bne.n	800d18a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	61fb      	str	r3, [r7, #28]
}
 800d184:	bf00      	nop
 800d186:	bf00      	nop
 800d188:	e7fd      	b.n	800d186 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d18a:	23a8      	movs	r3, #168	@ 0xa8
 800d18c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	2ba8      	cmp	r3, #168	@ 0xa8
 800d192:	d00b      	beq.n	800d1ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	61bb      	str	r3, [r7, #24]
}
 800d1a6:	bf00      	nop
 800d1a8:	bf00      	nop
 800d1aa:	e7fd      	b.n	800d1a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d01e      	beq.n	800d1f2 <xTaskCreateStatic+0xb2>
 800d1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d01b      	beq.n	800d1f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9303      	str	r3, [sp, #12]
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 f851 	bl	800d28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1ec:	f000 f8f6 	bl	800d3dc <prvAddNewTaskToReadyList>
 800d1f0:	e001      	b.n	800d1f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d1f6:	697b      	ldr	r3, [r7, #20]
	}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3728      	adds	r7, #40	@ 0x28
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08c      	sub	sp, #48	@ 0x30
 800d204:	af04      	add	r7, sp, #16
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	4613      	mov	r3, r2
 800d20e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d210:	88fb      	ldrh	r3, [r7, #6]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4618      	mov	r0, r3
 800d216:	f001 fd21 	bl	800ec5c <pvPortMalloc>
 800d21a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00e      	beq.n	800d240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d222:	20a8      	movs	r0, #168	@ 0xa8
 800d224:	f001 fd1a 	bl	800ec5c <pvPortMalloc>
 800d228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d003      	beq.n	800d238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	631a      	str	r2, [r3, #48]	@ 0x30
 800d236:	e005      	b.n	800d244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d238:	6978      	ldr	r0, [r7, #20]
 800d23a:	f001 fddd 	bl	800edf8 <vPortFree>
 800d23e:	e001      	b.n	800d244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d240:	2300      	movs	r3, #0
 800d242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d017      	beq.n	800d27a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d252:	88fa      	ldrh	r2, [r7, #6]
 800d254:	2300      	movs	r3, #0
 800d256:	9303      	str	r3, [sp, #12]
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 f80f 	bl	800d28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d26e:	69f8      	ldr	r0, [r7, #28]
 800d270:	f000 f8b4 	bl	800d3dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d274:	2301      	movs	r3, #1
 800d276:	61bb      	str	r3, [r7, #24]
 800d278:	e002      	b.n	800d280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d27a:	f04f 33ff 	mov.w	r3, #4294967295
 800d27e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d280:	69bb      	ldr	r3, [r7, #24]
	}
 800d282:	4618      	mov	r0, r3
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	21a5      	movs	r1, #165	@ 0xa5
 800d2a6:	f003 f9fb 	bl	80106a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	f023 0307 	bic.w	r3, r3, #7
 800d2c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	f003 0307 	and.w	r3, r3, #7
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	617b      	str	r3, [r7, #20]
}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	e7fd      	b.n	800d2e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01f      	beq.n	800d32c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	e012      	b.n	800d318 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	7819      	ldrb	r1, [r3, #0]
 800d2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	4413      	add	r3, r2
 800d300:	3334      	adds	r3, #52	@ 0x34
 800d302:	460a      	mov	r2, r1
 800d304:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	4413      	add	r3, r2
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	3301      	adds	r3, #1
 800d316:	61fb      	str	r3, [r7, #28]
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	2b0f      	cmp	r3, #15
 800d31c:	d9e9      	bls.n	800d2f2 <prvInitialiseNewTask+0x66>
 800d31e:	e000      	b.n	800d322 <prvInitialiseNewTask+0x96>
			{
				break;
 800d320:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d32a:	e003      	b.n	800d334 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	2b06      	cmp	r3, #6
 800d338:	d901      	bls.n	800d33e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d33a:	2306      	movs	r3, #6
 800d33c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d342:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d348:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	2200      	movs	r2, #0
 800d34e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	3304      	adds	r3, #4
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff f864 	bl	800c422 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	3318      	adds	r3, #24
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff f85f 	bl	800c422 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d368:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36c:	f1c3 0207 	rsb	r2, r3, #7
 800d370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d372:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d378:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	2200      	movs	r2, #0
 800d37e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d384:	2200      	movs	r2, #0
 800d386:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38c:	3354      	adds	r3, #84	@ 0x54
 800d38e:	224c      	movs	r2, #76	@ 0x4c
 800d390:	2100      	movs	r1, #0
 800d392:	4618      	mov	r0, r3
 800d394:	f003 f984 	bl	80106a0 <memset>
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	4a0d      	ldr	r2, [pc, #52]	@ (800d3d0 <prvInitialiseNewTask+0x144>)
 800d39c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	4a0c      	ldr	r2, [pc, #48]	@ (800d3d4 <prvInitialiseNewTask+0x148>)
 800d3a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d3d8 <prvInitialiseNewTask+0x14c>)
 800d3a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	68f9      	ldr	r1, [r7, #12]
 800d3ae:	69b8      	ldr	r0, [r7, #24]
 800d3b0:	f001 f9fe 	bl	800e7b0 <pxPortInitialiseStack>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3c6:	bf00      	nop
 800d3c8:	3720      	adds	r7, #32
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20007044 	.word	0x20007044
 800d3d4:	200070ac 	.word	0x200070ac
 800d3d8:	20007114 	.word	0x20007114

0800d3dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3e4:	f001 fb18 	bl	800ea18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3e8:	4b2c      	ldr	r3, [pc, #176]	@ (800d49c <prvAddNewTaskToReadyList+0xc0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	4a2b      	ldr	r2, [pc, #172]	@ (800d49c <prvAddNewTaskToReadyList+0xc0>)
 800d3f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a0 <prvAddNewTaskToReadyList+0xc4>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d109      	bne.n	800d40e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3fa:	4a29      	ldr	r2, [pc, #164]	@ (800d4a0 <prvAddNewTaskToReadyList+0xc4>)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d400:	4b26      	ldr	r3, [pc, #152]	@ (800d49c <prvAddNewTaskToReadyList+0xc0>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d110      	bne.n	800d42a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d408:	f000 fc9c 	bl	800dd44 <prvInitialiseTaskLists>
 800d40c:	e00d      	b.n	800d42a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d40e:	4b25      	ldr	r3, [pc, #148]	@ (800d4a4 <prvAddNewTaskToReadyList+0xc8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d109      	bne.n	800d42a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d416:	4b22      	ldr	r3, [pc, #136]	@ (800d4a0 <prvAddNewTaskToReadyList+0xc4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d420:	429a      	cmp	r2, r3
 800d422:	d802      	bhi.n	800d42a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d424:	4a1e      	ldr	r2, [pc, #120]	@ (800d4a0 <prvAddNewTaskToReadyList+0xc4>)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d42a:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a8 <prvAddNewTaskToReadyList+0xcc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3301      	adds	r3, #1
 800d430:	4a1d      	ldr	r2, [pc, #116]	@ (800d4a8 <prvAddNewTaskToReadyList+0xcc>)
 800d432:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d434:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a8 <prvAddNewTaskToReadyList+0xcc>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d440:	2201      	movs	r2, #1
 800d442:	409a      	lsls	r2, r3
 800d444:	4b19      	ldr	r3, [pc, #100]	@ (800d4ac <prvAddNewTaskToReadyList+0xd0>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4313      	orrs	r3, r2
 800d44a:	4a18      	ldr	r2, [pc, #96]	@ (800d4ac <prvAddNewTaskToReadyList+0xd0>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4a15      	ldr	r2, [pc, #84]	@ (800d4b0 <prvAddNewTaskToReadyList+0xd4>)
 800d45c:	441a      	add	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3304      	adds	r3, #4
 800d462:	4619      	mov	r1, r3
 800d464:	4610      	mov	r0, r2
 800d466:	f7fe ffe9 	bl	800c43c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d46a:	f001 fb07 	bl	800ea7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d46e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <prvAddNewTaskToReadyList+0xc8>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00e      	beq.n	800d494 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d476:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a0 <prvAddNewTaskToReadyList+0xc4>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d480:	429a      	cmp	r2, r3
 800d482:	d207      	bcs.n	800d494 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d484:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <prvAddNewTaskToReadyList+0xd8>)
 800d486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20001224 	.word	0x20001224
 800d4a0:	20001124 	.word	0x20001124
 800d4a4:	20001230 	.word	0x20001230
 800d4a8:	20001240 	.word	0x20001240
 800d4ac:	2000122c 	.word	0x2000122c
 800d4b0:	20001128 	.word	0x20001128
 800d4b4:	e000ed04 	.word	0xe000ed04

0800d4b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08a      	sub	sp, #40	@ 0x28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10b      	bne.n	800d4e4 <vTaskDelayUntil+0x2c>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	617b      	str	r3, [r7, #20]
}
 800d4de:	bf00      	nop
 800d4e0:	bf00      	nop
 800d4e2:	e7fd      	b.n	800d4e0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10b      	bne.n	800d502 <vTaskDelayUntil+0x4a>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	613b      	str	r3, [r7, #16]
}
 800d4fc:	bf00      	nop
 800d4fe:	bf00      	nop
 800d500:	e7fd      	b.n	800d4fe <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d502:	4b2a      	ldr	r3, [pc, #168]	@ (800d5ac <vTaskDelayUntil+0xf4>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00b      	beq.n	800d522 <vTaskDelayUntil+0x6a>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60fb      	str	r3, [r7, #12]
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	e7fd      	b.n	800d51e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800d522:	f000 f8e9 	bl	800d6f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d526:	4b22      	ldr	r3, [pc, #136]	@ (800d5b0 <vTaskDelayUntil+0xf8>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	4413      	add	r3, r2
 800d534:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6a3a      	ldr	r2, [r7, #32]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d20b      	bcs.n	800d558 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	429a      	cmp	r2, r3
 800d548:	d211      	bcs.n	800d56e <vTaskDelayUntil+0xb6>
 800d54a:	69fa      	ldr	r2, [r7, #28]
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d90d      	bls.n	800d56e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d552:	2301      	movs	r3, #1
 800d554:	627b      	str	r3, [r7, #36]	@ 0x24
 800d556:	e00a      	b.n	800d56e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	69fa      	ldr	r2, [r7, #28]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d303      	bcc.n	800d56a <vTaskDelayUntil+0xb2>
 800d562:	69fa      	ldr	r2, [r7, #28]
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	429a      	cmp	r2, r3
 800d568:	d901      	bls.n	800d56e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d56a:	2301      	movs	r3, #1
 800d56c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	69fa      	ldr	r2, [r7, #28]
 800d572:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d57a:	69fa      	ldr	r2, [r7, #28]
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	2100      	movs	r1, #0
 800d582:	4618      	mov	r0, r3
 800d584:	f001 f8ae 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d588:	f000 f8c4 	bl	800d714 <xTaskResumeAll>
 800d58c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d107      	bne.n	800d5a4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d594:	4b07      	ldr	r3, [pc, #28]	@ (800d5b4 <vTaskDelayUntil+0xfc>)
 800d596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5a4:	bf00      	nop
 800d5a6:	3728      	adds	r7, #40	@ 0x28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	2000124c 	.word	0x2000124c
 800d5b0:	20001228 	.word	0x20001228
 800d5b4:	e000ed04 	.word	0xe000ed04

0800d5b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d018      	beq.n	800d5fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5ca:	4b14      	ldr	r3, [pc, #80]	@ (800d61c <vTaskDelay+0x64>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <vTaskDelay+0x32>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	60bb      	str	r3, [r7, #8]
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop
 800d5e8:	e7fd      	b.n	800d5e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d5ea:	f000 f885 	bl	800d6f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f001 f877 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d5f6:	f000 f88d 	bl	800d714 <xTaskResumeAll>
 800d5fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d107      	bne.n	800d612 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d602:	4b07      	ldr	r3, [pc, #28]	@ (800d620 <vTaskDelay+0x68>)
 800d604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000124c 	.word	0x2000124c
 800d620:	e000ed04 	.word	0xe000ed04

0800d624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08a      	sub	sp, #40	@ 0x28
 800d628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d632:	463a      	mov	r2, r7
 800d634:	1d39      	adds	r1, r7, #4
 800d636:	f107 0308 	add.w	r3, r7, #8
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7f6 feda 	bl	80043f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	9202      	str	r2, [sp, #8]
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	2300      	movs	r3, #0
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	2300      	movs	r3, #0
 800d650:	460a      	mov	r2, r1
 800d652:	4921      	ldr	r1, [pc, #132]	@ (800d6d8 <vTaskStartScheduler+0xb4>)
 800d654:	4821      	ldr	r0, [pc, #132]	@ (800d6dc <vTaskStartScheduler+0xb8>)
 800d656:	f7ff fd73 	bl	800d140 <xTaskCreateStatic>
 800d65a:	4603      	mov	r3, r0
 800d65c:	4a20      	ldr	r2, [pc, #128]	@ (800d6e0 <vTaskStartScheduler+0xbc>)
 800d65e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d660:	4b1f      	ldr	r3, [pc, #124]	@ (800d6e0 <vTaskStartScheduler+0xbc>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d668:	2301      	movs	r3, #1
 800d66a:	617b      	str	r3, [r7, #20]
 800d66c:	e001      	b.n	800d672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d66e:	2300      	movs	r3, #0
 800d670:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d11b      	bne.n	800d6b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	613b      	str	r3, [r7, #16]
}
 800d68a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d68c:	4b15      	ldr	r3, [pc, #84]	@ (800d6e4 <vTaskStartScheduler+0xc0>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3354      	adds	r3, #84	@ 0x54
 800d692:	4a15      	ldr	r2, [pc, #84]	@ (800d6e8 <vTaskStartScheduler+0xc4>)
 800d694:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d696:	4b15      	ldr	r3, [pc, #84]	@ (800d6ec <vTaskStartScheduler+0xc8>)
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d69e:	4b14      	ldr	r3, [pc, #80]	@ (800d6f0 <vTaskStartScheduler+0xcc>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6a4:	4b13      	ldr	r3, [pc, #76]	@ (800d6f4 <vTaskStartScheduler+0xd0>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6aa:	f001 f911 	bl	800e8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6ae:	e00f      	b.n	800d6d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b6:	d10b      	bne.n	800d6d0 <vTaskStartScheduler+0xac>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60fb      	str	r3, [r7, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	e7fd      	b.n	800d6cc <vTaskStartScheduler+0xa8>
}
 800d6d0:	bf00      	nop
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	08012fd0 	.word	0x08012fd0
 800d6dc:	0800dd15 	.word	0x0800dd15
 800d6e0:	20001248 	.word	0x20001248
 800d6e4:	20001124 	.word	0x20001124
 800d6e8:	20000058 	.word	0x20000058
 800d6ec:	20001244 	.word	0x20001244
 800d6f0:	20001230 	.word	0x20001230
 800d6f4:	20001228 	.word	0x20001228

0800d6f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6fc:	4b04      	ldr	r3, [pc, #16]	@ (800d710 <vTaskSuspendAll+0x18>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3301      	adds	r3, #1
 800d702:	4a03      	ldr	r2, [pc, #12]	@ (800d710 <vTaskSuspendAll+0x18>)
 800d704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d706:	bf00      	nop
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	2000124c 	.word	0x2000124c

0800d714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d71e:	2300      	movs	r3, #0
 800d720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d722:	4b42      	ldr	r3, [pc, #264]	@ (800d82c <xTaskResumeAll+0x118>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <xTaskResumeAll+0x2e>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	603b      	str	r3, [r7, #0]
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	e7fd      	b.n	800d73e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d742:	f001 f969 	bl	800ea18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d746:	4b39      	ldr	r3, [pc, #228]	@ (800d82c <xTaskResumeAll+0x118>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	4a37      	ldr	r2, [pc, #220]	@ (800d82c <xTaskResumeAll+0x118>)
 800d74e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d750:	4b36      	ldr	r3, [pc, #216]	@ (800d82c <xTaskResumeAll+0x118>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d161      	bne.n	800d81c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d758:	4b35      	ldr	r3, [pc, #212]	@ (800d830 <xTaskResumeAll+0x11c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d05d      	beq.n	800d81c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d760:	e02e      	b.n	800d7c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d762:	4b34      	ldr	r3, [pc, #208]	@ (800d834 <xTaskResumeAll+0x120>)
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3318      	adds	r3, #24
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fec1 	bl	800c4f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3304      	adds	r3, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe febc 	bl	800c4f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d782:	2201      	movs	r2, #1
 800d784:	409a      	lsls	r2, r3
 800d786:	4b2c      	ldr	r3, [pc, #176]	@ (800d838 <xTaskResumeAll+0x124>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	4a2a      	ldr	r2, [pc, #168]	@ (800d838 <xTaskResumeAll+0x124>)
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d794:	4613      	mov	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4a27      	ldr	r2, [pc, #156]	@ (800d83c <xTaskResumeAll+0x128>)
 800d79e:	441a      	add	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	4610      	mov	r0, r2
 800d7a8:	f7fe fe48 	bl	800c43c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7b0:	4b23      	ldr	r3, [pc, #140]	@ (800d840 <xTaskResumeAll+0x12c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d302      	bcc.n	800d7c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d7ba:	4b22      	ldr	r3, [pc, #136]	@ (800d844 <xTaskResumeAll+0x130>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d834 <xTaskResumeAll+0x120>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1cc      	bne.n	800d762 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7ce:	f000 fb95 	bl	800defc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800d848 <xTaskResumeAll+0x134>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d010      	beq.n	800d800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7de:	f000 f847 	bl	800d870 <xTaskIncrementTick>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d002      	beq.n	800d7ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d7e8:	4b16      	ldr	r3, [pc, #88]	@ (800d844 <xTaskResumeAll+0x130>)
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1f1      	bne.n	800d7de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d7fa:	4b13      	ldr	r3, [pc, #76]	@ (800d848 <xTaskResumeAll+0x134>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d800:	4b10      	ldr	r3, [pc, #64]	@ (800d844 <xTaskResumeAll+0x130>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d009      	beq.n	800d81c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d80c:	4b0f      	ldr	r3, [pc, #60]	@ (800d84c <xTaskResumeAll+0x138>)
 800d80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d81c:	f001 f92e 	bl	800ea7c <vPortExitCritical>

	return xAlreadyYielded;
 800d820:	68bb      	ldr	r3, [r7, #8]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	2000124c 	.word	0x2000124c
 800d830:	20001224 	.word	0x20001224
 800d834:	200011e4 	.word	0x200011e4
 800d838:	2000122c 	.word	0x2000122c
 800d83c:	20001128 	.word	0x20001128
 800d840:	20001124 	.word	0x20001124
 800d844:	20001238 	.word	0x20001238
 800d848:	20001234 	.word	0x20001234
 800d84c:	e000ed04 	.word	0xe000ed04

0800d850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d856:	4b05      	ldr	r3, [pc, #20]	@ (800d86c <xTaskGetTickCount+0x1c>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d85c:	687b      	ldr	r3, [r7, #4]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	20001228 	.word	0x20001228

0800d870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d876:	2300      	movs	r3, #0
 800d878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d87a:	4b4f      	ldr	r3, [pc, #316]	@ (800d9b8 <xTaskIncrementTick+0x148>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f040 808f 	bne.w	800d9a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d884:	4b4d      	ldr	r3, [pc, #308]	@ (800d9bc <xTaskIncrementTick+0x14c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3301      	adds	r3, #1
 800d88a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d88c:	4a4b      	ldr	r2, [pc, #300]	@ (800d9bc <xTaskIncrementTick+0x14c>)
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d121      	bne.n	800d8dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d898:	4b49      	ldr	r3, [pc, #292]	@ (800d9c0 <xTaskIncrementTick+0x150>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00b      	beq.n	800d8ba <xTaskIncrementTick+0x4a>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	603b      	str	r3, [r7, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop
 800d8b8:	e7fd      	b.n	800d8b6 <xTaskIncrementTick+0x46>
 800d8ba:	4b41      	ldr	r3, [pc, #260]	@ (800d9c0 <xTaskIncrementTick+0x150>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	60fb      	str	r3, [r7, #12]
 800d8c0:	4b40      	ldr	r3, [pc, #256]	@ (800d9c4 <xTaskIncrementTick+0x154>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a3e      	ldr	r2, [pc, #248]	@ (800d9c0 <xTaskIncrementTick+0x150>)
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	4a3e      	ldr	r2, [pc, #248]	@ (800d9c4 <xTaskIncrementTick+0x154>)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	4b3e      	ldr	r3, [pc, #248]	@ (800d9c8 <xTaskIncrementTick+0x158>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	4a3c      	ldr	r2, [pc, #240]	@ (800d9c8 <xTaskIncrementTick+0x158>)
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	f000 fb10 	bl	800defc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d8dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d9cc <xTaskIncrementTick+0x15c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d348      	bcc.n	800d978 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8e6:	4b36      	ldr	r3, [pc, #216]	@ (800d9c0 <xTaskIncrementTick+0x150>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d104      	bne.n	800d8fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f0:	4b36      	ldr	r3, [pc, #216]	@ (800d9cc <xTaskIncrementTick+0x15c>)
 800d8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f6:	601a      	str	r2, [r3, #0]
					break;
 800d8f8:	e03e      	b.n	800d978 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8fa:	4b31      	ldr	r3, [pc, #196]	@ (800d9c0 <xTaskIncrementTick+0x150>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d90a:	693a      	ldr	r2, [r7, #16]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d203      	bcs.n	800d91a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d912:	4a2e      	ldr	r2, [pc, #184]	@ (800d9cc <xTaskIncrementTick+0x15c>)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d918:	e02e      	b.n	800d978 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	3304      	adds	r3, #4
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fde9 	bl	800c4f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	3318      	adds	r3, #24
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fde0 	bl	800c4f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93a:	2201      	movs	r2, #1
 800d93c:	409a      	lsls	r2, r3
 800d93e:	4b24      	ldr	r3, [pc, #144]	@ (800d9d0 <xTaskIncrementTick+0x160>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4313      	orrs	r3, r2
 800d944:	4a22      	ldr	r2, [pc, #136]	@ (800d9d0 <xTaskIncrementTick+0x160>)
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4a1f      	ldr	r2, [pc, #124]	@ (800d9d4 <xTaskIncrementTick+0x164>)
 800d956:	441a      	add	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7fe fd6c 	bl	800c43c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d968:	4b1b      	ldr	r3, [pc, #108]	@ (800d9d8 <xTaskIncrementTick+0x168>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96e:	429a      	cmp	r2, r3
 800d970:	d3b9      	bcc.n	800d8e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d972:	2301      	movs	r3, #1
 800d974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d976:	e7b6      	b.n	800d8e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d978:	4b17      	ldr	r3, [pc, #92]	@ (800d9d8 <xTaskIncrementTick+0x168>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d97e:	4915      	ldr	r1, [pc, #84]	@ (800d9d4 <xTaskIncrementTick+0x164>)
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	440b      	add	r3, r1
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d901      	bls.n	800d994 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d994:	4b11      	ldr	r3, [pc, #68]	@ (800d9dc <xTaskIncrementTick+0x16c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d007      	beq.n	800d9ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
 800d9a0:	e004      	b.n	800d9ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e0 <xTaskIncrementTick+0x170>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	4a0d      	ldr	r2, [pc, #52]	@ (800d9e0 <xTaskIncrementTick+0x170>)
 800d9aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d9ac:	697b      	ldr	r3, [r7, #20]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	2000124c 	.word	0x2000124c
 800d9bc:	20001228 	.word	0x20001228
 800d9c0:	200011dc 	.word	0x200011dc
 800d9c4:	200011e0 	.word	0x200011e0
 800d9c8:	2000123c 	.word	0x2000123c
 800d9cc:	20001244 	.word	0x20001244
 800d9d0:	2000122c 	.word	0x2000122c
 800d9d4:	20001128 	.word	0x20001128
 800d9d8:	20001124 	.word	0x20001124
 800d9dc:	20001238 	.word	0x20001238
 800d9e0:	20001234 	.word	0x20001234

0800d9e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d9ea:	4b3c      	ldr	r3, [pc, #240]	@ (800dadc <vTaskSwitchContext+0xf8>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d9f2:	4b3b      	ldr	r3, [pc, #236]	@ (800dae0 <vTaskSwitchContext+0xfc>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9f8:	e06c      	b.n	800dad4 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 800d9fa:	4b39      	ldr	r3, [pc, #228]	@ (800dae0 <vTaskSwitchContext+0xfc>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800da00:	4b38      	ldr	r3, [pc, #224]	@ (800dae4 <vTaskSwitchContext+0x100>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da06:	61fb      	str	r3, [r7, #28]
 800da08:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800da0c:	61bb      	str	r3, [r7, #24]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	429a      	cmp	r2, r3
 800da16:	d111      	bne.n	800da3c <vTaskSwitchContext+0x58>
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	3304      	adds	r3, #4
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	429a      	cmp	r2, r3
 800da22:	d10b      	bne.n	800da3c <vTaskSwitchContext+0x58>
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	3308      	adds	r3, #8
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d105      	bne.n	800da3c <vTaskSwitchContext+0x58>
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	330c      	adds	r3, #12
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d008      	beq.n	800da4e <vTaskSwitchContext+0x6a>
 800da3c:	4b29      	ldr	r3, [pc, #164]	@ (800dae4 <vTaskSwitchContext+0x100>)
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	4b28      	ldr	r3, [pc, #160]	@ (800dae4 <vTaskSwitchContext+0x100>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3334      	adds	r3, #52	@ 0x34
 800da46:	4619      	mov	r1, r3
 800da48:	4610      	mov	r0, r2
 800da4a:	f7f7 fbfd 	bl	8005248 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da4e:	4b26      	ldr	r3, [pc, #152]	@ (800dae8 <vTaskSwitchContext+0x104>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	fab3 f383 	clz	r3, r3
 800da5a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800da5c:	7afb      	ldrb	r3, [r7, #11]
 800da5e:	f1c3 031f 	rsb	r3, r3, #31
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	4921      	ldr	r1, [pc, #132]	@ (800daec <vTaskSwitchContext+0x108>)
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	4613      	mov	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	440b      	add	r3, r1
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10b      	bne.n	800da90 <vTaskSwitchContext+0xac>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	607b      	str	r3, [r7, #4]
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	e7fd      	b.n	800da8c <vTaskSwitchContext+0xa8>
 800da90:	697a      	ldr	r2, [r7, #20]
 800da92:	4613      	mov	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4a14      	ldr	r2, [pc, #80]	@ (800daec <vTaskSwitchContext+0x108>)
 800da9c:	4413      	add	r3, r2
 800da9e:	613b      	str	r3, [r7, #16]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	605a      	str	r2, [r3, #4]
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	3308      	adds	r3, #8
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d104      	bne.n	800dac0 <vTaskSwitchContext+0xdc>
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	605a      	str	r2, [r3, #4]
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	4a07      	ldr	r2, [pc, #28]	@ (800dae4 <vTaskSwitchContext+0x100>)
 800dac8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800daca:	4b06      	ldr	r3, [pc, #24]	@ (800dae4 <vTaskSwitchContext+0x100>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3354      	adds	r3, #84	@ 0x54
 800dad0:	4a07      	ldr	r2, [pc, #28]	@ (800daf0 <vTaskSwitchContext+0x10c>)
 800dad2:	6013      	str	r3, [r2, #0]
}
 800dad4:	bf00      	nop
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	2000124c 	.word	0x2000124c
 800dae0:	20001238 	.word	0x20001238
 800dae4:	20001124 	.word	0x20001124
 800dae8:	2000122c 	.word	0x2000122c
 800daec:	20001128 	.word	0x20001128
 800daf0:	20000058 	.word	0x20000058

0800daf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10b      	bne.n	800db1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60fb      	str	r3, [r7, #12]
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	e7fd      	b.n	800db18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db1c:	4b07      	ldr	r3, [pc, #28]	@ (800db3c <vTaskPlaceOnEventList+0x48>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3318      	adds	r3, #24
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7fe fcad 	bl	800c484 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db2a:	2101      	movs	r1, #1
 800db2c:	6838      	ldr	r0, [r7, #0]
 800db2e:	f000 fdd9 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>
}
 800db32:	bf00      	nop
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20001124 	.word	0x20001124

0800db40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10b      	bne.n	800db6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800db56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	60fb      	str	r3, [r7, #12]
}
 800db68:	bf00      	nop
 800db6a:	bf00      	nop
 800db6c:	e7fd      	b.n	800db6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3318      	adds	r3, #24
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fcbf 	bl	800c4f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db78:	4b1d      	ldr	r3, [pc, #116]	@ (800dbf0 <xTaskRemoveFromEventList+0xb0>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d11c      	bne.n	800dbba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	3304      	adds	r3, #4
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe fcb6 	bl	800c4f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8e:	2201      	movs	r2, #1
 800db90:	409a      	lsls	r2, r3
 800db92:	4b18      	ldr	r3, [pc, #96]	@ (800dbf4 <xTaskRemoveFromEventList+0xb4>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4313      	orrs	r3, r2
 800db98:	4a16      	ldr	r2, [pc, #88]	@ (800dbf4 <xTaskRemoveFromEventList+0xb4>)
 800db9a:	6013      	str	r3, [r2, #0]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba0:	4613      	mov	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4a13      	ldr	r2, [pc, #76]	@ (800dbf8 <xTaskRemoveFromEventList+0xb8>)
 800dbaa:	441a      	add	r2, r3
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	f7fe fc42 	bl	800c43c <vListInsertEnd>
 800dbb8:	e005      	b.n	800dbc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	3318      	adds	r3, #24
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	480e      	ldr	r0, [pc, #56]	@ (800dbfc <xTaskRemoveFromEventList+0xbc>)
 800dbc2:	f7fe fc3b 	bl	800c43c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbca:	4b0d      	ldr	r3, [pc, #52]	@ (800dc00 <xTaskRemoveFromEventList+0xc0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d905      	bls.n	800dbe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc04 <xTaskRemoveFromEventList+0xc4>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	e001      	b.n	800dbe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dbe4:	697b      	ldr	r3, [r7, #20]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	2000124c 	.word	0x2000124c
 800dbf4:	2000122c 	.word	0x2000122c
 800dbf8:	20001128 	.word	0x20001128
 800dbfc:	200011e4 	.word	0x200011e4
 800dc00:	20001124 	.word	0x20001124
 800dc04:	20001238 	.word	0x20001238

0800dc08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc10:	4b06      	ldr	r3, [pc, #24]	@ (800dc2c <vTaskInternalSetTimeOutState+0x24>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc18:	4b05      	ldr	r3, [pc, #20]	@ (800dc30 <vTaskInternalSetTimeOutState+0x28>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	605a      	str	r2, [r3, #4]
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr
 800dc2c:	2000123c 	.word	0x2000123c
 800dc30:	20001228 	.word	0x20001228

0800dc34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	613b      	str	r3, [r7, #16]
}
 800dc56:	bf00      	nop
 800dc58:	bf00      	nop
 800dc5a:	e7fd      	b.n	800dc58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d10b      	bne.n	800dc7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60fb      	str	r3, [r7, #12]
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	e7fd      	b.n	800dc76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dc7a:	f000 fecd 	bl	800ea18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800dcf4 <xTaskCheckForTimeOut+0xc0>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	69ba      	ldr	r2, [r7, #24]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d102      	bne.n	800dc9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	61fb      	str	r3, [r7, #28]
 800dc9c:	e023      	b.n	800dce6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	4b15      	ldr	r3, [pc, #84]	@ (800dcf8 <xTaskCheckForTimeOut+0xc4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d007      	beq.n	800dcba <xTaskCheckForTimeOut+0x86>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d302      	bcc.n	800dcba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	61fb      	str	r3, [r7, #28]
 800dcb8:	e015      	b.n	800dce6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d20b      	bcs.n	800dcdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	1ad2      	subs	r2, r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ff99 	bl	800dc08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
 800dcda:	e004      	b.n	800dce6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2200      	movs	r2, #0
 800dce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dce2:	2301      	movs	r3, #1
 800dce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dce6:	f000 fec9 	bl	800ea7c <vPortExitCritical>

	return xReturn;
 800dcea:	69fb      	ldr	r3, [r7, #28]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3720      	adds	r7, #32
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	20001228 	.word	0x20001228
 800dcf8:	2000123c 	.word	0x2000123c

0800dcfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd00:	4b03      	ldr	r3, [pc, #12]	@ (800dd10 <vTaskMissedYield+0x14>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	601a      	str	r2, [r3, #0]
}
 800dd06:	bf00      	nop
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20001238 	.word	0x20001238

0800dd14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd1c:	f000 f852 	bl	800ddc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd20:	4b06      	ldr	r3, [pc, #24]	@ (800dd3c <prvIdleTask+0x28>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d9f9      	bls.n	800dd1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd28:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <prvIdleTask+0x2c>)
 800dd2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd38:	e7f0      	b.n	800dd1c <prvIdleTask+0x8>
 800dd3a:	bf00      	nop
 800dd3c:	20001128 	.word	0x20001128
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	607b      	str	r3, [r7, #4]
 800dd4e:	e00c      	b.n	800dd6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4a12      	ldr	r2, [pc, #72]	@ (800dda4 <prvInitialiseTaskLists+0x60>)
 800dd5c:	4413      	add	r3, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fe fb3f 	bl	800c3e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	3301      	adds	r3, #1
 800dd68:	607b      	str	r3, [r7, #4]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b06      	cmp	r3, #6
 800dd6e:	d9ef      	bls.n	800dd50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd70:	480d      	ldr	r0, [pc, #52]	@ (800dda8 <prvInitialiseTaskLists+0x64>)
 800dd72:	f7fe fb36 	bl	800c3e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd76:	480d      	ldr	r0, [pc, #52]	@ (800ddac <prvInitialiseTaskLists+0x68>)
 800dd78:	f7fe fb33 	bl	800c3e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd7c:	480c      	ldr	r0, [pc, #48]	@ (800ddb0 <prvInitialiseTaskLists+0x6c>)
 800dd7e:	f7fe fb30 	bl	800c3e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd82:	480c      	ldr	r0, [pc, #48]	@ (800ddb4 <prvInitialiseTaskLists+0x70>)
 800dd84:	f7fe fb2d 	bl	800c3e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd88:	480b      	ldr	r0, [pc, #44]	@ (800ddb8 <prvInitialiseTaskLists+0x74>)
 800dd8a:	f7fe fb2a 	bl	800c3e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800ddbc <prvInitialiseTaskLists+0x78>)
 800dd90:	4a05      	ldr	r2, [pc, #20]	@ (800dda8 <prvInitialiseTaskLists+0x64>)
 800dd92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd94:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc0 <prvInitialiseTaskLists+0x7c>)
 800dd96:	4a05      	ldr	r2, [pc, #20]	@ (800ddac <prvInitialiseTaskLists+0x68>)
 800dd98:	601a      	str	r2, [r3, #0]
}
 800dd9a:	bf00      	nop
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20001128 	.word	0x20001128
 800dda8:	200011b4 	.word	0x200011b4
 800ddac:	200011c8 	.word	0x200011c8
 800ddb0:	200011e4 	.word	0x200011e4
 800ddb4:	200011f8 	.word	0x200011f8
 800ddb8:	20001210 	.word	0x20001210
 800ddbc:	200011dc 	.word	0x200011dc
 800ddc0:	200011e0 	.word	0x200011e0

0800ddc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddca:	e019      	b.n	800de00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddcc:	f000 fe24 	bl	800ea18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd0:	4b10      	ldr	r3, [pc, #64]	@ (800de14 <prvCheckTasksWaitingTermination+0x50>)
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	3304      	adds	r3, #4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe fb8a 	bl	800c4f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dde2:	4b0d      	ldr	r3, [pc, #52]	@ (800de18 <prvCheckTasksWaitingTermination+0x54>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3b01      	subs	r3, #1
 800dde8:	4a0b      	ldr	r2, [pc, #44]	@ (800de18 <prvCheckTasksWaitingTermination+0x54>)
 800ddea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ddec:	4b0b      	ldr	r3, [pc, #44]	@ (800de1c <prvCheckTasksWaitingTermination+0x58>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	4a0a      	ldr	r2, [pc, #40]	@ (800de1c <prvCheckTasksWaitingTermination+0x58>)
 800ddf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddf6:	f000 fe41 	bl	800ea7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f848 	bl	800de90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de00:	4b06      	ldr	r3, [pc, #24]	@ (800de1c <prvCheckTasksWaitingTermination+0x58>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1e1      	bne.n	800ddcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de08:	bf00      	nop
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	200011f8 	.word	0x200011f8
 800de18:	20001224 	.word	0x20001224
 800de1c:	2000120c 	.word	0x2000120c

0800de20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800de2c:	e005      	b.n	800de3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3301      	adds	r3, #1
 800de32:	607b      	str	r3, [r7, #4]
			ulCount++;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3301      	adds	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2ba5      	cmp	r3, #165	@ 0xa5
 800de40:	d0f5      	beq.n	800de2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	089b      	lsrs	r3, r3, #2
 800de46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	b29b      	uxth	r3, r3
	}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <uxTaskGetStackHighWaterMark+0x14>
 800de66:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <uxTaskGetStackHighWaterMark+0x34>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	e000      	b.n	800de6e <uxTaskGetStackHighWaterMark+0x16>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de74:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800de76:	6938      	ldr	r0, [r7, #16]
 800de78:	f7ff ffd2 	bl	800de20 <prvTaskCheckFreeStackSpace>
 800de7c:	4603      	mov	r3, r0
 800de7e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800de80:	68fb      	ldr	r3, [r7, #12]
	}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20001124 	.word	0x20001124

0800de90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	3354      	adds	r3, #84	@ 0x54
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fc61 	bl	8010764 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d108      	bne.n	800debe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb0:	4618      	mov	r0, r3
 800deb2:	f000 ffa1 	bl	800edf8 <vPortFree>
				vPortFree( pxTCB );
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 ff9e 	bl	800edf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800debc:	e019      	b.n	800def2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d103      	bne.n	800ded0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 ff95 	bl	800edf8 <vPortFree>
	}
 800dece:	e010      	b.n	800def2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d00b      	beq.n	800def2 <prvDeleteTCB+0x62>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	60fb      	str	r3, [r7, #12]
}
 800deec:	bf00      	nop
 800deee:	bf00      	nop
 800def0:	e7fd      	b.n	800deee <prvDeleteTCB+0x5e>
	}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df02:	4b0c      	ldr	r3, [pc, #48]	@ (800df34 <prvResetNextTaskUnblockTime+0x38>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df0c:	4b0a      	ldr	r3, [pc, #40]	@ (800df38 <prvResetNextTaskUnblockTime+0x3c>)
 800df0e:	f04f 32ff 	mov.w	r2, #4294967295
 800df12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df14:	e008      	b.n	800df28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df16:	4b07      	ldr	r3, [pc, #28]	@ (800df34 <prvResetNextTaskUnblockTime+0x38>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	4a04      	ldr	r2, [pc, #16]	@ (800df38 <prvResetNextTaskUnblockTime+0x3c>)
 800df26:	6013      	str	r3, [r2, #0]
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	200011dc 	.word	0x200011dc
 800df38:	20001244 	.word	0x20001244

0800df3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800df42:	4b05      	ldr	r3, [pc, #20]	@ (800df58 <xTaskGetCurrentTaskHandle+0x1c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	607b      	str	r3, [r7, #4]

		return xReturn;
 800df48:	687b      	ldr	r3, [r7, #4]
	}
 800df4a:	4618      	mov	r0, r3
 800df4c:	370c      	adds	r7, #12
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	20001124 	.word	0x20001124

0800df5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df62:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <xTaskGetSchedulerState+0x34>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df6a:	2301      	movs	r3, #1
 800df6c:	607b      	str	r3, [r7, #4]
 800df6e:	e008      	b.n	800df82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df70:	4b08      	ldr	r3, [pc, #32]	@ (800df94 <xTaskGetSchedulerState+0x38>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d102      	bne.n	800df7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df78:	2302      	movs	r3, #2
 800df7a:	607b      	str	r3, [r7, #4]
 800df7c:	e001      	b.n	800df82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df7e:	2300      	movs	r3, #0
 800df80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df82:	687b      	ldr	r3, [r7, #4]
	}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	20001230 	.word	0x20001230
 800df94:	2000124c 	.word	0x2000124c

0800df98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d05e      	beq.n	800e06c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb2:	4b31      	ldr	r3, [pc, #196]	@ (800e078 <xTaskPriorityInherit+0xe0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d24e      	bcs.n	800e05a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	db06      	blt.n	800dfd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc4:	4b2c      	ldr	r3, [pc, #176]	@ (800e078 <xTaskPriorityInherit+0xe0>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfca:	f1c3 0207 	rsb	r2, r3, #7
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	6959      	ldr	r1, [r3, #20]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4a26      	ldr	r2, [pc, #152]	@ (800e07c <xTaskPriorityInherit+0xe4>)
 800dfe4:	4413      	add	r3, r2
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	d12f      	bne.n	800e04a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	3304      	adds	r3, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe fa81 	bl	800c4f6 <uxListRemove>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10a      	bne.n	800e010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dffe:	2201      	movs	r2, #1
 800e000:	fa02 f303 	lsl.w	r3, r2, r3
 800e004:	43da      	mvns	r2, r3
 800e006:	4b1e      	ldr	r3, [pc, #120]	@ (800e080 <xTaskPriorityInherit+0xe8>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4013      	ands	r3, r2
 800e00c:	4a1c      	ldr	r2, [pc, #112]	@ (800e080 <xTaskPriorityInherit+0xe8>)
 800e00e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e010:	4b19      	ldr	r3, [pc, #100]	@ (800e078 <xTaskPriorityInherit+0xe0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e01e:	2201      	movs	r2, #1
 800e020:	409a      	lsls	r2, r3
 800e022:	4b17      	ldr	r3, [pc, #92]	@ (800e080 <xTaskPriorityInherit+0xe8>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4313      	orrs	r3, r2
 800e028:	4a15      	ldr	r2, [pc, #84]	@ (800e080 <xTaskPriorityInherit+0xe8>)
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4a10      	ldr	r2, [pc, #64]	@ (800e07c <xTaskPriorityInherit+0xe4>)
 800e03a:	441a      	add	r2, r3
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	3304      	adds	r3, #4
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f7fe f9fa 	bl	800c43c <vListInsertEnd>
 800e048:	e004      	b.n	800e054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e04a:	4b0b      	ldr	r3, [pc, #44]	@ (800e078 <xTaskPriorityInherit+0xe0>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e054:	2301      	movs	r3, #1
 800e056:	60fb      	str	r3, [r7, #12]
 800e058:	e008      	b.n	800e06c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e05e:	4b06      	ldr	r3, [pc, #24]	@ (800e078 <xTaskPriorityInherit+0xe0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e064:	429a      	cmp	r2, r3
 800e066:	d201      	bcs.n	800e06c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e06c:	68fb      	ldr	r3, [r7, #12]
	}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20001124 	.word	0x20001124
 800e07c:	20001128 	.word	0x20001128
 800e080:	2000122c 	.word	0x2000122c

0800e084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e090:	2300      	movs	r3, #0
 800e092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d070      	beq.n	800e17c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e09a:	4b3b      	ldr	r3, [pc, #236]	@ (800e188 <xTaskPriorityDisinherit+0x104>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d00b      	beq.n	800e0bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	60fb      	str	r3, [r7, #12]
}
 800e0b6:	bf00      	nop
 800e0b8:	bf00      	nop
 800e0ba:	e7fd      	b.n	800e0b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10b      	bne.n	800e0dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	60bb      	str	r3, [r7, #8]
}
 800e0d6:	bf00      	nop
 800e0d8:	bf00      	nop
 800e0da:	e7fd      	b.n	800e0d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0e0:	1e5a      	subs	r2, r3, #1
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d044      	beq.n	800e17c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d140      	bne.n	800e17c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe f9f9 	bl	800c4f6 <uxListRemove>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d115      	bne.n	800e136 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e10e:	491f      	ldr	r1, [pc, #124]	@ (800e18c <xTaskPriorityDisinherit+0x108>)
 800e110:	4613      	mov	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	440b      	add	r3, r1
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <xTaskPriorityDisinherit+0xb2>
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e124:	2201      	movs	r2, #1
 800e126:	fa02 f303 	lsl.w	r3, r2, r3
 800e12a:	43da      	mvns	r2, r3
 800e12c:	4b18      	ldr	r3, [pc, #96]	@ (800e190 <xTaskPriorityDisinherit+0x10c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4013      	ands	r3, r2
 800e132:	4a17      	ldr	r2, [pc, #92]	@ (800e190 <xTaskPriorityDisinherit+0x10c>)
 800e134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e142:	f1c3 0207 	rsb	r2, r3, #7
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e14e:	2201      	movs	r2, #1
 800e150:	409a      	lsls	r2, r3
 800e152:	4b0f      	ldr	r3, [pc, #60]	@ (800e190 <xTaskPriorityDisinherit+0x10c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4313      	orrs	r3, r2
 800e158:	4a0d      	ldr	r2, [pc, #52]	@ (800e190 <xTaskPriorityDisinherit+0x10c>)
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e160:	4613      	mov	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	4a08      	ldr	r2, [pc, #32]	@ (800e18c <xTaskPriorityDisinherit+0x108>)
 800e16a:	441a      	add	r2, r3
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	3304      	adds	r3, #4
 800e170:	4619      	mov	r1, r3
 800e172:	4610      	mov	r0, r2
 800e174:	f7fe f962 	bl	800c43c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e17c:	697b      	ldr	r3, [r7, #20]
	}
 800e17e:	4618      	mov	r0, r3
 800e180:	3718      	adds	r7, #24
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20001124 	.word	0x20001124
 800e18c:	20001128 	.word	0x20001128
 800e190:	2000122c 	.word	0x2000122c

0800e194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d079      	beq.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10b      	bne.n	800e1cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	60fb      	str	r3, [r7, #12]
}
 800e1c6:	bf00      	nop
 800e1c8:	bf00      	nop
 800e1ca:	e7fd      	b.n	800e1c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d902      	bls.n	800e1dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e002      	b.n	800e1e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e6:	69fa      	ldr	r2, [r7, #28]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d059      	beq.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1f0:	697a      	ldr	r2, [r7, #20]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d154      	bne.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e1f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e2a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	69ba      	ldr	r2, [r7, #24]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d10b      	bne.n	800e218 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	60bb      	str	r3, [r7, #8]
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	db04      	blt.n	800e236 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	f1c3 0207 	rsb	r2, r3, #7
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	6959      	ldr	r1, [r3, #20]
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	4613      	mov	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4a19      	ldr	r2, [pc, #100]	@ (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e246:	4413      	add	r3, r2
 800e248:	4299      	cmp	r1, r3
 800e24a:	d129      	bne.n	800e2a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	3304      	adds	r3, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe f950 	bl	800c4f6 <uxListRemove>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10a      	bne.n	800e272 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e260:	2201      	movs	r2, #1
 800e262:	fa02 f303 	lsl.w	r3, r2, r3
 800e266:	43da      	mvns	r2, r3
 800e268:	4b11      	ldr	r3, [pc, #68]	@ (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4013      	ands	r3, r2
 800e26e:	4a10      	ldr	r2, [pc, #64]	@ (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e276:	2201      	movs	r2, #1
 800e278:	409a      	lsls	r2, r3
 800e27a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4313      	orrs	r3, r2
 800e280:	4a0b      	ldr	r2, [pc, #44]	@ (800e2b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e288:	4613      	mov	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4a06      	ldr	r2, [pc, #24]	@ (800e2ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e292:	441a      	add	r2, r3
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	3304      	adds	r3, #4
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7fe f8ce 	bl	800c43c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2a0:	bf00      	nop
 800e2a2:	3720      	adds	r7, #32
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20001124 	.word	0x20001124
 800e2ac:	20001128 	.word	0x20001128
 800e2b0:	2000122c 	.word	0x2000122c

0800e2b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2b4:	b480      	push	{r7}
 800e2b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2b8:	4b07      	ldr	r3, [pc, #28]	@ (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d004      	beq.n	800e2ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2c0:	4b05      	ldr	r3, [pc, #20]	@ (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2c6:	3201      	adds	r2, #1
 800e2c8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	@ (800e2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
	}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	20001124 	.word	0x20001124

0800e2dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e2e6:	f000 fb97 	bl	800ea18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e2ea:	4b20      	ldr	r3, [pc, #128]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d113      	bne.n	800e31e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e2f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e306:	2101      	movs	r1, #1
 800e308:	6838      	ldr	r0, [r7, #0]
 800e30a:	f000 f9eb 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e30e:	4b18      	ldr	r3, [pc, #96]	@ (800e370 <ulTaskNotifyTake+0x94>)
 800e310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e31e:	f000 fbad 	bl	800ea7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800e322:	f000 fb79 	bl	800ea18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e326:	4b11      	ldr	r3, [pc, #68]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e32e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00e      	beq.n	800e354 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e33c:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2200      	movs	r2, #0
 800e342:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e346:	e005      	b.n	800e354 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e348:	4b08      	ldr	r3, [pc, #32]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	3a01      	subs	r2, #1
 800e350:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e354:	4b05      	ldr	r3, [pc, #20]	@ (800e36c <ulTaskNotifyTake+0x90>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800e35e:	f000 fb8d 	bl	800ea7c <vPortExitCritical>

		return ulReturn;
 800e362:	68fb      	ldr	r3, [r7, #12]
	}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20001124 	.word	0x20001124
 800e370:	e000ed04 	.word	0xe000ed04

0800e374 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e382:	f000 fb49 	bl	800ea18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e386:	4b29      	ldr	r3, [pc, #164]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b02      	cmp	r3, #2
 800e392:	d01c      	beq.n	800e3ce <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e394:	4b25      	ldr	r3, [pc, #148]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	43d2      	mvns	r2, r2
 800e3a0:	400a      	ands	r2, r1
 800e3a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e3a6:	4b21      	ldr	r3, [pc, #132]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00b      	beq.n	800e3ce <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	6838      	ldr	r0, [r7, #0]
 800e3ba:	f000 f993 	bl	800e6e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e3be:	4b1c      	ldr	r3, [pc, #112]	@ (800e430 <xTaskNotifyWait+0xbc>)
 800e3c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e3ce:	f000 fb55 	bl	800ea7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800e3d2:	f000 fb21 	bl	800ea18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d005      	beq.n	800e3e8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e3dc:	4b13      	ldr	r3, [pc, #76]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e3e8:	4b10      	ldr	r3, [pc, #64]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d002      	beq.n	800e3fc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	e00a      	b.n	800e412 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	43d2      	mvns	r2, r2
 800e408:	400a      	ands	r2, r1
 800e40a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800e40e:	2301      	movs	r3, #1
 800e410:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e412:	4b06      	ldr	r3, [pc, #24]	@ (800e42c <xTaskNotifyWait+0xb8>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800e41c:	f000 fb2e 	bl	800ea7c <vPortExitCritical>

		return xReturn;
 800e420:	697b      	ldr	r3, [r7, #20]
	}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20001124 	.word	0x20001124
 800e430:	e000ed04 	.word	0xe000ed04

0800e434 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08a      	sub	sp, #40	@ 0x28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	603b      	str	r3, [r7, #0]
 800e440:	4613      	mov	r3, r2
 800e442:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e444:	2301      	movs	r3, #1
 800e446:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10b      	bne.n	800e466 <xTaskGenericNotify+0x32>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	61bb      	str	r3, [r7, #24]
}
 800e460:	bf00      	nop
 800e462:	bf00      	nop
 800e464:	e7fd      	b.n	800e462 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e46a:	f000 fad5 	bl	800ea18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d004      	beq.n	800e47e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e484:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	2202      	movs	r2, #2
 800e48a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800e48e:	79fb      	ldrb	r3, [r7, #7]
 800e490:	2b04      	cmp	r3, #4
 800e492:	d82e      	bhi.n	800e4f2 <xTaskGenericNotify+0xbe>
 800e494:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <xTaskGenericNotify+0x68>)
 800e496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49a:	bf00      	nop
 800e49c:	0800e517 	.word	0x0800e517
 800e4a0:	0800e4b1 	.word	0x0800e4b1
 800e4a4:	0800e4c3 	.word	0x0800e4c3
 800e4a8:	0800e4d3 	.word	0x0800e4d3
 800e4ac:	0800e4dd 	.word	0x0800e4dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e4c0:	e02c      	b.n	800e51c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e4d0:	e024      	b.n	800e51c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800e4da:	e01f      	b.n	800e51c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e4dc:	7ffb      	ldrb	r3, [r7, #31]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d004      	beq.n	800e4ec <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e4ea:	e017      	b.n	800e51c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800e4f0:	e014      	b.n	800e51c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e4f2:	6a3b      	ldr	r3, [r7, #32]
 800e4f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fc:	d00d      	beq.n	800e51a <xTaskGenericNotify+0xe6>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	617b      	str	r3, [r7, #20]
}
 800e510:	bf00      	nop
 800e512:	bf00      	nop
 800e514:	e7fd      	b.n	800e512 <xTaskGenericNotify+0xde>
					break;
 800e516:	bf00      	nop
 800e518:	e000      	b.n	800e51c <xTaskGenericNotify+0xe8>

					break;
 800e51a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e51c:	7ffb      	ldrb	r3, [r7, #31]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d13a      	bne.n	800e598 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	3304      	adds	r3, #4
 800e526:	4618      	mov	r0, r3
 800e528:	f7fd ffe5 	bl	800c4f6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e530:	2201      	movs	r2, #1
 800e532:	409a      	lsls	r2, r3
 800e534:	4b1c      	ldr	r3, [pc, #112]	@ (800e5a8 <xTaskGenericNotify+0x174>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4313      	orrs	r3, r2
 800e53a:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a8 <xTaskGenericNotify+0x174>)
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e542:	4613      	mov	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4a18      	ldr	r2, [pc, #96]	@ (800e5ac <xTaskGenericNotify+0x178>)
 800e54c:	441a      	add	r2, r3
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	3304      	adds	r3, #4
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	f7fd ff71 	bl	800c43c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e55a:	6a3b      	ldr	r3, [r7, #32]
 800e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00b      	beq.n	800e57a <xTaskGenericNotify+0x146>
	__asm volatile
 800e562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e566:	f383 8811 	msr	BASEPRI, r3
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	613b      	str	r3, [r7, #16]
}
 800e574:	bf00      	nop
 800e576:	bf00      	nop
 800e578:	e7fd      	b.n	800e576 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e57e:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b0 <xTaskGenericNotify+0x17c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e584:	429a      	cmp	r2, r3
 800e586:	d907      	bls.n	800e598 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e588:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b4 <xTaskGenericNotify+0x180>)
 800e58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e598:	f000 fa70 	bl	800ea7c <vPortExitCritical>

		return xReturn;
 800e59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3728      	adds	r7, #40	@ 0x28
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	2000122c 	.word	0x2000122c
 800e5ac:	20001128 	.word	0x20001128
 800e5b0:	20001124 	.word	0x20001124
 800e5b4:	e000ed04 	.word	0xe000ed04

0800e5b8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08a      	sub	sp, #40	@ 0x28
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10b      	bne.n	800e5e0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	61bb      	str	r3, [r7, #24]
}
 800e5da:	bf00      	nop
 800e5dc:	bf00      	nop
 800e5de:	e7fd      	b.n	800e5dc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5e0:	f000 fafa 	bl	800ebd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e5e8:	f3ef 8211 	mrs	r2, BASEPRI
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	617a      	str	r2, [r7, #20]
 800e5fe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e600:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e602:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e60a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60e:	2202      	movs	r2, #2
 800e610:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800e614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e622:	7ffb      	ldrb	r3, [r7, #31]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d146      	bne.n	800e6b6 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	60fb      	str	r3, [r7, #12]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e648:	4b20      	ldr	r3, [pc, #128]	@ (800e6cc <vTaskNotifyGiveFromISR+0x114>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d11c      	bne.n	800e68a <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e652:	3304      	adds	r3, #4
 800e654:	4618      	mov	r0, r3
 800e656:	f7fd ff4e 	bl	800c4f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e65e:	2201      	movs	r2, #1
 800e660:	409a      	lsls	r2, r3
 800e662:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d0 <vTaskNotifyGiveFromISR+0x118>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4313      	orrs	r3, r2
 800e668:	4a19      	ldr	r2, [pc, #100]	@ (800e6d0 <vTaskNotifyGiveFromISR+0x118>)
 800e66a:	6013      	str	r3, [r2, #0]
 800e66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e670:	4613      	mov	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4413      	add	r3, r2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4a16      	ldr	r2, [pc, #88]	@ (800e6d4 <vTaskNotifyGiveFromISR+0x11c>)
 800e67a:	441a      	add	r2, r3
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	3304      	adds	r3, #4
 800e680:	4619      	mov	r1, r3
 800e682:	4610      	mov	r0, r2
 800e684:	f7fd feda 	bl	800c43c <vListInsertEnd>
 800e688:	e005      	b.n	800e696 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68c:	3318      	adds	r3, #24
 800e68e:	4619      	mov	r1, r3
 800e690:	4811      	ldr	r0, [pc, #68]	@ (800e6d8 <vTaskNotifyGiveFromISR+0x120>)
 800e692:	f7fd fed3 	bl	800c43c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e69a:	4b10      	ldr	r3, [pc, #64]	@ (800e6dc <vTaskNotifyGiveFromISR+0x124>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d908      	bls.n	800e6b6 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e0 <vTaskNotifyGiveFromISR+0x128>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6c0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800e6c2:	bf00      	nop
 800e6c4:	3728      	adds	r7, #40	@ 0x28
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	2000124c 	.word	0x2000124c
 800e6d0:	2000122c 	.word	0x2000122c
 800e6d4:	20001128 	.word	0x20001128
 800e6d8:	200011e4 	.word	0x200011e4
 800e6dc:	20001124 	.word	0x20001124
 800e6e0:	20001238 	.word	0x20001238

0800e6e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6ee:	4b29      	ldr	r3, [pc, #164]	@ (800e794 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f4:	4b28      	ldr	r3, [pc, #160]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fd fefb 	bl	800c4f6 <uxListRemove>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d10b      	bne.n	800e71e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e706:	4b24      	ldr	r3, [pc, #144]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e70c:	2201      	movs	r2, #1
 800e70e:	fa02 f303 	lsl.w	r3, r2, r3
 800e712:	43da      	mvns	r2, r3
 800e714:	4b21      	ldr	r3, [pc, #132]	@ (800e79c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4013      	ands	r3, r2
 800e71a:	4a20      	ldr	r2, [pc, #128]	@ (800e79c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e71c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e724:	d10a      	bne.n	800e73c <prvAddCurrentTaskToDelayedList+0x58>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d007      	beq.n	800e73c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72c:	4b1a      	ldr	r3, [pc, #104]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3304      	adds	r3, #4
 800e732:	4619      	mov	r1, r3
 800e734:	481a      	ldr	r0, [pc, #104]	@ (800e7a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e736:	f7fd fe81 	bl	800c43c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e73a:	e026      	b.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4413      	add	r3, r2
 800e742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e744:	4b14      	ldr	r3, [pc, #80]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d209      	bcs.n	800e768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e754:	4b13      	ldr	r3, [pc, #76]	@ (800e7a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	4b0f      	ldr	r3, [pc, #60]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3304      	adds	r3, #4
 800e75e:	4619      	mov	r1, r3
 800e760:	4610      	mov	r0, r2
 800e762:	f7fd fe8f 	bl	800c484 <vListInsert>
}
 800e766:	e010      	b.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e768:	4b0f      	ldr	r3, [pc, #60]	@ (800e7a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	4b0a      	ldr	r3, [pc, #40]	@ (800e798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3304      	adds	r3, #4
 800e772:	4619      	mov	r1, r3
 800e774:	4610      	mov	r0, r2
 800e776:	f7fd fe85 	bl	800c484 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e77a:	4b0c      	ldr	r3, [pc, #48]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d202      	bcs.n	800e78a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e784:	4a09      	ldr	r2, [pc, #36]	@ (800e7ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	6013      	str	r3, [r2, #0]
}
 800e78a:	bf00      	nop
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20001228 	.word	0x20001228
 800e798:	20001124 	.word	0x20001124
 800e79c:	2000122c 	.word	0x2000122c
 800e7a0:	20001210 	.word	0x20001210
 800e7a4:	200011e0 	.word	0x200011e0
 800e7a8:	200011dc 	.word	0x200011dc
 800e7ac:	20001244 	.word	0x20001244

0800e7b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3b04      	subs	r3, #4
 800e7c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e7c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3b04      	subs	r3, #4
 800e7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f023 0201 	bic.w	r2, r3, #1
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	3b04      	subs	r3, #4
 800e7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e814 <pxPortInitialiseStack+0x64>)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3b14      	subs	r3, #20
 800e7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3b04      	subs	r3, #4
 800e7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f06f 0202 	mvn.w	r2, #2
 800e7fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3b20      	subs	r3, #32
 800e804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e806:	68fb      	ldr	r3, [r7, #12]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	0800e819 	.word	0x0800e819

0800e818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e822:	4b13      	ldr	r3, [pc, #76]	@ (800e870 <prvTaskExitError+0x58>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82a:	d00b      	beq.n	800e844 <prvTaskExitError+0x2c>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	60fb      	str	r3, [r7, #12]
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	e7fd      	b.n	800e840 <prvTaskExitError+0x28>
	__asm volatile
 800e844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e848:	f383 8811 	msr	BASEPRI, r3
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f3bf 8f4f 	dsb	sy
 800e854:	60bb      	str	r3, [r7, #8]
}
 800e856:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e858:	bf00      	nop
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d0fc      	beq.n	800e85a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000048 	.word	0x20000048
	...

0800e880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e880:	4b07      	ldr	r3, [pc, #28]	@ (800e8a0 <pxCurrentTCBConst2>)
 800e882:	6819      	ldr	r1, [r3, #0]
 800e884:	6808      	ldr	r0, [r1, #0]
 800e886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88a:	f380 8809 	msr	PSP, r0
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f04f 0000 	mov.w	r0, #0
 800e896:	f380 8811 	msr	BASEPRI, r0
 800e89a:	4770      	bx	lr
 800e89c:	f3af 8000 	nop.w

0800e8a0 <pxCurrentTCBConst2>:
 800e8a0:	20001124 	.word	0x20001124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop

0800e8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8a8:	4808      	ldr	r0, [pc, #32]	@ (800e8cc <prvPortStartFirstTask+0x24>)
 800e8aa:	6800      	ldr	r0, [r0, #0]
 800e8ac:	6800      	ldr	r0, [r0, #0]
 800e8ae:	f380 8808 	msr	MSP, r0
 800e8b2:	f04f 0000 	mov.w	r0, #0
 800e8b6:	f380 8814 	msr	CONTROL, r0
 800e8ba:	b662      	cpsie	i
 800e8bc:	b661      	cpsie	f
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	df00      	svc	0
 800e8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8ca:	bf00      	nop
 800e8cc:	e000ed08 	.word	0xe000ed08

0800e8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e8d6:	4b47      	ldr	r3, [pc, #284]	@ (800e9f4 <xPortStartScheduler+0x124>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a47      	ldr	r2, [pc, #284]	@ (800e9f8 <xPortStartScheduler+0x128>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d10b      	bne.n	800e8f8 <xPortStartScheduler+0x28>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	60fb      	str	r3, [r7, #12]
}
 800e8f2:	bf00      	nop
 800e8f4:	bf00      	nop
 800e8f6:	e7fd      	b.n	800e8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e8f8:	4b3e      	ldr	r3, [pc, #248]	@ (800e9f4 <xPortStartScheduler+0x124>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a3f      	ldr	r2, [pc, #252]	@ (800e9fc <xPortStartScheduler+0x12c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d10b      	bne.n	800e91a <xPortStartScheduler+0x4a>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	613b      	str	r3, [r7, #16]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e91a:	4b39      	ldr	r3, [pc, #228]	@ (800ea00 <xPortStartScheduler+0x130>)
 800e91c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	22ff      	movs	r2, #255	@ 0xff
 800e92a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	b2db      	uxtb	r3, r3
 800e932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e934:	78fb      	ldrb	r3, [r7, #3]
 800e936:	b2db      	uxtb	r3, r3
 800e938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	4b31      	ldr	r3, [pc, #196]	@ (800ea04 <xPortStartScheduler+0x134>)
 800e940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e942:	4b31      	ldr	r3, [pc, #196]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e944:	2207      	movs	r2, #7
 800e946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e948:	e009      	b.n	800e95e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e94a:	4b2f      	ldr	r3, [pc, #188]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3b01      	subs	r3, #1
 800e950:	4a2d      	ldr	r2, [pc, #180]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e954:	78fb      	ldrb	r3, [r7, #3]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e95e:	78fb      	ldrb	r3, [r7, #3]
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e966:	2b80      	cmp	r3, #128	@ 0x80
 800e968:	d0ef      	beq.n	800e94a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e96a:	4b27      	ldr	r3, [pc, #156]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f1c3 0307 	rsb	r3, r3, #7
 800e972:	2b04      	cmp	r3, #4
 800e974:	d00b      	beq.n	800e98e <xPortStartScheduler+0xbe>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60bb      	str	r3, [r7, #8]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e98e:	4b1e      	ldr	r3, [pc, #120]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	021b      	lsls	r3, r3, #8
 800e994:	4a1c      	ldr	r2, [pc, #112]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e998:	4b1b      	ldr	r3, [pc, #108]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e9a0:	4a19      	ldr	r2, [pc, #100]	@ (800ea08 <xPortStartScheduler+0x138>)
 800e9a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ea0c <xPortStartScheduler+0x13c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a16      	ldr	r2, [pc, #88]	@ (800ea0c <xPortStartScheduler+0x13c>)
 800e9b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e9b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9b8:	4b14      	ldr	r3, [pc, #80]	@ (800ea0c <xPortStartScheduler+0x13c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a13      	ldr	r2, [pc, #76]	@ (800ea0c <xPortStartScheduler+0x13c>)
 800e9be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e9c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9c4:	f000 f8da 	bl	800eb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9c8:	4b11      	ldr	r3, [pc, #68]	@ (800ea10 <xPortStartScheduler+0x140>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9ce:	f000 f8f9 	bl	800ebc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9d2:	4b10      	ldr	r3, [pc, #64]	@ (800ea14 <xPortStartScheduler+0x144>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a0f      	ldr	r2, [pc, #60]	@ (800ea14 <xPortStartScheduler+0x144>)
 800e9d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e9dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9de:	f7ff ff63 	bl	800e8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9e2:	f7fe ffff 	bl	800d9e4 <vTaskSwitchContext>
	prvTaskExitError();
 800e9e6:	f7ff ff17 	bl	800e818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	e000ed00 	.word	0xe000ed00
 800e9f8:	410fc271 	.word	0x410fc271
 800e9fc:	410fc270 	.word	0x410fc270
 800ea00:	e000e400 	.word	0xe000e400
 800ea04:	20001250 	.word	0x20001250
 800ea08:	20001254 	.word	0x20001254
 800ea0c:	e000ed20 	.word	0xe000ed20
 800ea10:	20000048 	.word	0x20000048
 800ea14:	e000ef34 	.word	0xe000ef34

0800ea18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	607b      	str	r3, [r7, #4]
}
 800ea30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea32:	4b10      	ldr	r3, [pc, #64]	@ (800ea74 <vPortEnterCritical+0x5c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3301      	adds	r3, #1
 800ea38:	4a0e      	ldr	r2, [pc, #56]	@ (800ea74 <vPortEnterCritical+0x5c>)
 800ea3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea74 <vPortEnterCritical+0x5c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d110      	bne.n	800ea66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea44:	4b0c      	ldr	r3, [pc, #48]	@ (800ea78 <vPortEnterCritical+0x60>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00b      	beq.n	800ea66 <vPortEnterCritical+0x4e>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	603b      	str	r3, [r7, #0]
}
 800ea60:	bf00      	nop
 800ea62:	bf00      	nop
 800ea64:	e7fd      	b.n	800ea62 <vPortEnterCritical+0x4a>
	}
}
 800ea66:	bf00      	nop
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	20000048 	.word	0x20000048
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea82:	4b12      	ldr	r3, [pc, #72]	@ (800eacc <vPortExitCritical+0x50>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10b      	bne.n	800eaa2 <vPortExitCritical+0x26>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	607b      	str	r3, [r7, #4]
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	e7fd      	b.n	800ea9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eaa2:	4b0a      	ldr	r3, [pc, #40]	@ (800eacc <vPortExitCritical+0x50>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	4a08      	ldr	r2, [pc, #32]	@ (800eacc <vPortExitCritical+0x50>)
 800eaaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eaac:	4b07      	ldr	r3, [pc, #28]	@ (800eacc <vPortExitCritical+0x50>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <vPortExitCritical+0x44>
 800eab4:	2300      	movs	r3, #0
 800eab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	f383 8811 	msr	BASEPRI, r3
}
 800eabe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	20000048 	.word	0x20000048

0800ead0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ead0:	f3ef 8009 	mrs	r0, PSP
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	4b15      	ldr	r3, [pc, #84]	@ (800eb30 <pxCurrentTCBConst>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	f01e 0f10 	tst.w	lr, #16
 800eae0:	bf08      	it	eq
 800eae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaea:	6010      	str	r0, [r2, #0]
 800eaec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eaf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800eaf4:	f380 8811 	msr	BASEPRI, r0
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f7fe ff70 	bl	800d9e4 <vTaskSwitchContext>
 800eb04:	f04f 0000 	mov.w	r0, #0
 800eb08:	f380 8811 	msr	BASEPRI, r0
 800eb0c:	bc09      	pop	{r0, r3}
 800eb0e:	6819      	ldr	r1, [r3, #0]
 800eb10:	6808      	ldr	r0, [r1, #0]
 800eb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb16:	f01e 0f10 	tst.w	lr, #16
 800eb1a:	bf08      	it	eq
 800eb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb20:	f380 8809 	msr	PSP, r0
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	f3af 8000 	nop.w

0800eb30 <pxCurrentTCBConst>:
 800eb30:	20001124 	.word	0x20001124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop

0800eb38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb42:	f383 8811 	msr	BASEPRI, r3
 800eb46:	f3bf 8f6f 	isb	sy
 800eb4a:	f3bf 8f4f 	dsb	sy
 800eb4e:	607b      	str	r3, [r7, #4]
}
 800eb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb52:	f7fe fe8d 	bl	800d870 <xTaskIncrementTick>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb5c:	4b06      	ldr	r3, [pc, #24]	@ (800eb78 <SysTick_Handler+0x40>)
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f383 8811 	msr	BASEPRI, r3
}
 800eb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb80:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb0 <vPortSetupTimerInterrupt+0x34>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb86:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb4 <vPortSetupTimerInterrupt+0x38>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb8 <vPortSetupTimerInterrupt+0x3c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a0a      	ldr	r2, [pc, #40]	@ (800ebbc <vPortSetupTimerInterrupt+0x40>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	099b      	lsrs	r3, r3, #6
 800eb98:	4a09      	ldr	r2, [pc, #36]	@ (800ebc0 <vPortSetupTimerInterrupt+0x44>)
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb9e:	4b04      	ldr	r3, [pc, #16]	@ (800ebb0 <vPortSetupTimerInterrupt+0x34>)
 800eba0:	2207      	movs	r2, #7
 800eba2:	601a      	str	r2, [r3, #0]
}
 800eba4:	bf00      	nop
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	e000e010 	.word	0xe000e010
 800ebb4:	e000e018 	.word	0xe000e018
 800ebb8:	2000003c 	.word	0x2000003c
 800ebbc:	10624dd3 	.word	0x10624dd3
 800ebc0:	e000e014 	.word	0xe000e014

0800ebc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ebd4 <vPortEnableVFP+0x10>
 800ebc8:	6801      	ldr	r1, [r0, #0]
 800ebca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ebce:	6001      	str	r1, [r0, #0]
 800ebd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ebd2:	bf00      	nop
 800ebd4:	e000ed88 	.word	0xe000ed88

0800ebd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ebde:	f3ef 8305 	mrs	r3, IPSR
 800ebe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b0f      	cmp	r3, #15
 800ebe8:	d915      	bls.n	800ec16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ebea:	4a18      	ldr	r2, [pc, #96]	@ (800ec4c <vPortValidateInterruptPriority+0x74>)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4413      	add	r3, r2
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ebf4:	4b16      	ldr	r3, [pc, #88]	@ (800ec50 <vPortValidateInterruptPriority+0x78>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	7afa      	ldrb	r2, [r7, #11]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d20b      	bcs.n	800ec16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	607b      	str	r3, [r7, #4]
}
 800ec10:	bf00      	nop
 800ec12:	bf00      	nop
 800ec14:	e7fd      	b.n	800ec12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec16:	4b0f      	ldr	r3, [pc, #60]	@ (800ec54 <vPortValidateInterruptPriority+0x7c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec58 <vPortValidateInterruptPriority+0x80>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d90b      	bls.n	800ec3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	603b      	str	r3, [r7, #0]
}
 800ec38:	bf00      	nop
 800ec3a:	bf00      	nop
 800ec3c:	e7fd      	b.n	800ec3a <vPortValidateInterruptPriority+0x62>
	}
 800ec3e:	bf00      	nop
 800ec40:	3714      	adds	r7, #20
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	e000e3f0 	.word	0xe000e3f0
 800ec50:	20001250 	.word	0x20001250
 800ec54:	e000ed0c 	.word	0xe000ed0c
 800ec58:	20001254 	.word	0x20001254

0800ec5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08a      	sub	sp, #40	@ 0x28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec68:	f7fe fd46 	bl	800d6f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec6c:	4b5c      	ldr	r3, [pc, #368]	@ (800ede0 <pvPortMalloc+0x184>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec74:	f000 f93c 	bl	800eef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec78:	4b5a      	ldr	r3, [pc, #360]	@ (800ede4 <pvPortMalloc+0x188>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4013      	ands	r3, r2
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f040 8095 	bne.w	800edb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d01e      	beq.n	800ecca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ec8c:	2208      	movs	r2, #8
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4413      	add	r3, r2
 800ec92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f003 0307 	and.w	r3, r3, #7
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d015      	beq.n	800ecca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f023 0307 	bic.w	r3, r3, #7
 800eca4:	3308      	adds	r3, #8
 800eca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f003 0307 	and.w	r3, r3, #7
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00b      	beq.n	800ecca <pvPortMalloc+0x6e>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	617b      	str	r3, [r7, #20]
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
 800ecc8:	e7fd      	b.n	800ecc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d06f      	beq.n	800edb0 <pvPortMalloc+0x154>
 800ecd0:	4b45      	ldr	r3, [pc, #276]	@ (800ede8 <pvPortMalloc+0x18c>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d86a      	bhi.n	800edb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ecda:	4b44      	ldr	r3, [pc, #272]	@ (800edec <pvPortMalloc+0x190>)
 800ecdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ecde:	4b43      	ldr	r3, [pc, #268]	@ (800edec <pvPortMalloc+0x190>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ece4:	e004      	b.n	800ecf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ece6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ecea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d903      	bls.n	800ed02 <pvPortMalloc+0xa6>
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1f1      	bne.n	800ece6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed02:	4b37      	ldr	r3, [pc, #220]	@ (800ede0 <pvPortMalloc+0x184>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d051      	beq.n	800edb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2208      	movs	r2, #8
 800ed12:	4413      	add	r3, r2
 800ed14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	1ad2      	subs	r2, r2, r3
 800ed26:	2308      	movs	r3, #8
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d920      	bls.n	800ed70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4413      	add	r3, r2
 800ed34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	f003 0307 	and.w	r3, r3, #7
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00b      	beq.n	800ed58 <pvPortMalloc+0xfc>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	613b      	str	r3, [r7, #16]
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	e7fd      	b.n	800ed54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	1ad2      	subs	r2, r2, r3
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed6a:	69b8      	ldr	r0, [r7, #24]
 800ed6c:	f000 f922 	bl	800efb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed70:	4b1d      	ldr	r3, [pc, #116]	@ (800ede8 <pvPortMalloc+0x18c>)
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	4a1b      	ldr	r2, [pc, #108]	@ (800ede8 <pvPortMalloc+0x18c>)
 800ed7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed7e:	4b1a      	ldr	r3, [pc, #104]	@ (800ede8 <pvPortMalloc+0x18c>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b1b      	ldr	r3, [pc, #108]	@ (800edf0 <pvPortMalloc+0x194>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d203      	bcs.n	800ed92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed8a:	4b17      	ldr	r3, [pc, #92]	@ (800ede8 <pvPortMalloc+0x18c>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a18      	ldr	r2, [pc, #96]	@ (800edf0 <pvPortMalloc+0x194>)
 800ed90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	4b13      	ldr	r3, [pc, #76]	@ (800ede4 <pvPortMalloc+0x188>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eda6:	4b13      	ldr	r3, [pc, #76]	@ (800edf4 <pvPortMalloc+0x198>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3301      	adds	r3, #1
 800edac:	4a11      	ldr	r2, [pc, #68]	@ (800edf4 <pvPortMalloc+0x198>)
 800edae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edb0:	f7fe fcb0 	bl	800d714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	f003 0307 	and.w	r3, r3, #7
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00b      	beq.n	800edd6 <pvPortMalloc+0x17a>
	__asm volatile
 800edbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	60fb      	str	r3, [r7, #12]
}
 800edd0:	bf00      	nop
 800edd2:	bf00      	nop
 800edd4:	e7fd      	b.n	800edd2 <pvPortMalloc+0x176>
	return pvReturn;
 800edd6:	69fb      	ldr	r3, [r7, #28]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3728      	adds	r7, #40	@ 0x28
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	20007020 	.word	0x20007020
 800ede4:	20007034 	.word	0x20007034
 800ede8:	20007024 	.word	0x20007024
 800edec:	20007018 	.word	0x20007018
 800edf0:	20007028 	.word	0x20007028
 800edf4:	2000702c 	.word	0x2000702c

0800edf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d04f      	beq.n	800eeaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee0a:	2308      	movs	r3, #8
 800ee0c:	425b      	negs	r3, r3
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4413      	add	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	685a      	ldr	r2, [r3, #4]
 800ee1c:	4b25      	ldr	r3, [pc, #148]	@ (800eeb4 <vPortFree+0xbc>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4013      	ands	r3, r2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10b      	bne.n	800ee3e <vPortFree+0x46>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	60fb      	str	r3, [r7, #12]
}
 800ee38:	bf00      	nop
 800ee3a:	bf00      	nop
 800ee3c:	e7fd      	b.n	800ee3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00b      	beq.n	800ee5e <vPortFree+0x66>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	60bb      	str	r3, [r7, #8]
}
 800ee58:	bf00      	nop
 800ee5a:	bf00      	nop
 800ee5c:	e7fd      	b.n	800ee5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	4b14      	ldr	r3, [pc, #80]	@ (800eeb4 <vPortFree+0xbc>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4013      	ands	r3, r2
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d01e      	beq.n	800eeaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d11a      	bne.n	800eeaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb4 <vPortFree+0xbc>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	43db      	mvns	r3, r3
 800ee7e:	401a      	ands	r2, r3
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee84:	f7fe fc38 	bl	800d6f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb8 <vPortFree+0xc0>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4413      	add	r3, r2
 800ee92:	4a09      	ldr	r2, [pc, #36]	@ (800eeb8 <vPortFree+0xc0>)
 800ee94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee96:	6938      	ldr	r0, [r7, #16]
 800ee98:	f000 f88c 	bl	800efb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee9c:	4b07      	ldr	r3, [pc, #28]	@ (800eebc <vPortFree+0xc4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	4a06      	ldr	r2, [pc, #24]	@ (800eebc <vPortFree+0xc4>)
 800eea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eea6:	f7fe fc35 	bl	800d714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eeaa:	bf00      	nop
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20007034 	.word	0x20007034
 800eeb8:	20007024 	.word	0x20007024
 800eebc:	20007030 	.word	0x20007030

0800eec0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800eec0:	b480      	push	{r7}
 800eec2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800eec4:	4b03      	ldr	r3, [pc, #12]	@ (800eed4 <xPortGetFreeHeapSize+0x14>)
 800eec6:	681b      	ldr	r3, [r3, #0]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	20007024 	.word	0x20007024

0800eed8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800eedc:	4b03      	ldr	r3, [pc, #12]	@ (800eeec <xPortGetMinimumEverFreeHeapSize+0x14>)
 800eede:	681b      	ldr	r3, [r3, #0]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	20007028 	.word	0x20007028

0800eef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eef6:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800eefa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eefc:	4b27      	ldr	r3, [pc, #156]	@ (800ef9c <prvHeapInit+0xac>)
 800eefe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00c      	beq.n	800ef24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f023 0307 	bic.w	r3, r3, #7
 800ef16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ef9c <prvHeapInit+0xac>)
 800ef20:	4413      	add	r3, r2
 800ef22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef28:	4a1d      	ldr	r2, [pc, #116]	@ (800efa0 <prvHeapInit+0xb0>)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef2e:	4b1c      	ldr	r3, [pc, #112]	@ (800efa0 <prvHeapInit+0xb0>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	4413      	add	r3, r2
 800ef3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	1a9b      	subs	r3, r3, r2
 800ef42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f023 0307 	bic.w	r3, r3, #7
 800ef4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4a15      	ldr	r2, [pc, #84]	@ (800efa4 <prvHeapInit+0xb4>)
 800ef50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef52:	4b14      	ldr	r3, [pc, #80]	@ (800efa4 <prvHeapInit+0xb4>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2200      	movs	r2, #0
 800ef58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef5a:	4b12      	ldr	r3, [pc, #72]	@ (800efa4 <prvHeapInit+0xb4>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	1ad2      	subs	r2, r2, r3
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef70:	4b0c      	ldr	r3, [pc, #48]	@ (800efa4 <prvHeapInit+0xb4>)
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	@ (800efa8 <prvHeapInit+0xb8>)
 800ef7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	4a09      	ldr	r2, [pc, #36]	@ (800efac <prvHeapInit+0xbc>)
 800ef86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef88:	4b09      	ldr	r3, [pc, #36]	@ (800efb0 <prvHeapInit+0xc0>)
 800ef8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ef8e:	601a      	str	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	3714      	adds	r7, #20
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	20001258 	.word	0x20001258
 800efa0:	20007018 	.word	0x20007018
 800efa4:	20007020 	.word	0x20007020
 800efa8:	20007028 	.word	0x20007028
 800efac:	20007024 	.word	0x20007024
 800efb0:	20007034 	.word	0x20007034

0800efb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efbc:	4b28      	ldr	r3, [pc, #160]	@ (800f060 <prvInsertBlockIntoFreeList+0xac>)
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	e002      	b.n	800efc8 <prvInsertBlockIntoFreeList+0x14>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	60fb      	str	r3, [r7, #12]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d8f7      	bhi.n	800efc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	4413      	add	r3, r2
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d108      	bne.n	800eff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	441a      	add	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	441a      	add	r2, r3
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d118      	bne.n	800f03c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	4b15      	ldr	r3, [pc, #84]	@ (800f064 <prvInsertBlockIntoFreeList+0xb0>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	429a      	cmp	r2, r3
 800f014:	d00d      	beq.n	800f032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	441a      	add	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	e008      	b.n	800f044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f032:	4b0c      	ldr	r3, [pc, #48]	@ (800f064 <prvInsertBlockIntoFreeList+0xb0>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	e003      	b.n	800f044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d002      	beq.n	800f052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f052:	bf00      	nop
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	20007018 	.word	0x20007018
 800f064:	20007020 	.word	0x20007020

0800f068 <_ZdaPv>:
 800f068:	f000 b822 	b.w	800f0b0 <_ZdlPv>

0800f06c <__cxa_guard_acquire>:
 800f06c:	6802      	ldr	r2, [r0, #0]
 800f06e:	07d2      	lsls	r2, r2, #31
 800f070:	4603      	mov	r3, r0
 800f072:	d405      	bmi.n	800f080 <__cxa_guard_acquire+0x14>
 800f074:	7842      	ldrb	r2, [r0, #1]
 800f076:	b102      	cbz	r2, 800f07a <__cxa_guard_acquire+0xe>
 800f078:	deff      	udf	#255	@ 0xff
 800f07a:	2001      	movs	r0, #1
 800f07c:	7058      	strb	r0, [r3, #1]
 800f07e:	4770      	bx	lr
 800f080:	2000      	movs	r0, #0
 800f082:	4770      	bx	lr

0800f084 <__cxa_guard_release>:
 800f084:	2301      	movs	r3, #1
 800f086:	6003      	str	r3, [r0, #0]
 800f088:	4770      	bx	lr

0800f08a <_Znwj>:
 800f08a:	2801      	cmp	r0, #1
 800f08c:	bf38      	it	cc
 800f08e:	2001      	movcc	r0, #1
 800f090:	b510      	push	{r4, lr}
 800f092:	4604      	mov	r4, r0
 800f094:	4620      	mov	r0, r4
 800f096:	f000 fc29 	bl	800f8ec <malloc>
 800f09a:	b100      	cbz	r0, 800f09e <_Znwj+0x14>
 800f09c:	bd10      	pop	{r4, pc}
 800f09e:	f000 f809 	bl	800f0b4 <_ZSt15get_new_handlerv>
 800f0a2:	b908      	cbnz	r0, 800f0a8 <_Znwj+0x1e>
 800f0a4:	f000 fc1b 	bl	800f8de <abort>
 800f0a8:	4780      	blx	r0
 800f0aa:	e7f3      	b.n	800f094 <_Znwj+0xa>

0800f0ac <_Znaj>:
 800f0ac:	f7ff bfed 	b.w	800f08a <_Znwj>

0800f0b0 <_ZdlPv>:
 800f0b0:	f000 bc24 	b.w	800f8fc <free>

0800f0b4 <_ZSt15get_new_handlerv>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	@ (800f0c0 <_ZSt15get_new_handlerv+0xc>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	f3bf 8f5b 	dmb	ish
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	20007038 	.word	0x20007038

0800f0c4 <powf>:
 800f0c4:	b508      	push	{r3, lr}
 800f0c6:	ed2d 8b04 	vpush	{d8-d9}
 800f0ca:	eeb0 8a60 	vmov.f32	s16, s1
 800f0ce:	eeb0 9a40 	vmov.f32	s18, s0
 800f0d2:	f000 f89f 	bl	800f214 <__ieee754_powf>
 800f0d6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0de:	eef0 8a40 	vmov.f32	s17, s0
 800f0e2:	d63e      	bvs.n	800f162 <powf+0x9e>
 800f0e4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ec:	d112      	bne.n	800f114 <powf+0x50>
 800f0ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f6:	d039      	beq.n	800f16c <powf+0xa8>
 800f0f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f0fc:	f000 f839 	bl	800f172 <finitef>
 800f100:	b378      	cbz	r0, 800f162 <powf+0x9e>
 800f102:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	d52a      	bpl.n	800f162 <powf+0x9e>
 800f10c:	f001 fbe2 	bl	80108d4 <__errno>
 800f110:	2322      	movs	r3, #34	@ 0x22
 800f112:	e014      	b.n	800f13e <powf+0x7a>
 800f114:	f000 f82d 	bl	800f172 <finitef>
 800f118:	b998      	cbnz	r0, 800f142 <powf+0x7e>
 800f11a:	eeb0 0a49 	vmov.f32	s0, s18
 800f11e:	f000 f828 	bl	800f172 <finitef>
 800f122:	b170      	cbz	r0, 800f142 <powf+0x7e>
 800f124:	eeb0 0a48 	vmov.f32	s0, s16
 800f128:	f000 f823 	bl	800f172 <finitef>
 800f12c:	b148      	cbz	r0, 800f142 <powf+0x7e>
 800f12e:	eef4 8a68 	vcmp.f32	s17, s17
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	d7e9      	bvc.n	800f10c <powf+0x48>
 800f138:	f001 fbcc 	bl	80108d4 <__errno>
 800f13c:	2321      	movs	r3, #33	@ 0x21
 800f13e:	6003      	str	r3, [r0, #0]
 800f140:	e00f      	b.n	800f162 <powf+0x9e>
 800f142:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14a:	d10a      	bne.n	800f162 <powf+0x9e>
 800f14c:	eeb0 0a49 	vmov.f32	s0, s18
 800f150:	f000 f80f 	bl	800f172 <finitef>
 800f154:	b128      	cbz	r0, 800f162 <powf+0x9e>
 800f156:	eeb0 0a48 	vmov.f32	s0, s16
 800f15a:	f000 f80a 	bl	800f172 <finitef>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d1d4      	bne.n	800f10c <powf+0x48>
 800f162:	eeb0 0a68 	vmov.f32	s0, s17
 800f166:	ecbd 8b04 	vpop	{d8-d9}
 800f16a:	bd08      	pop	{r3, pc}
 800f16c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f170:	e7f7      	b.n	800f162 <powf+0x9e>

0800f172 <finitef>:
 800f172:	ee10 3a10 	vmov	r3, s0
 800f176:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f17a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f17e:	bfac      	ite	ge
 800f180:	2000      	movge	r0, #0
 800f182:	2001      	movlt	r0, #1
 800f184:	4770      	bx	lr
	...

0800f188 <round>:
 800f188:	ec51 0b10 	vmov	r0, r1, d0
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f192:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f196:	2a13      	cmp	r2, #19
 800f198:	460b      	mov	r3, r1
 800f19a:	4605      	mov	r5, r0
 800f19c:	dc1b      	bgt.n	800f1d6 <round+0x4e>
 800f19e:	2a00      	cmp	r2, #0
 800f1a0:	da0b      	bge.n	800f1ba <round+0x32>
 800f1a2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f1a6:	3201      	adds	r2, #1
 800f1a8:	bf04      	itt	eq
 800f1aa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f1ae:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	e015      	b.n	800f1e6 <round+0x5e>
 800f1ba:	4c15      	ldr	r4, [pc, #84]	@ (800f210 <round+0x88>)
 800f1bc:	4114      	asrs	r4, r2
 800f1be:	ea04 0601 	and.w	r6, r4, r1
 800f1c2:	4306      	orrs	r6, r0
 800f1c4:	d00f      	beq.n	800f1e6 <round+0x5e>
 800f1c6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f1ca:	fa41 f202 	asr.w	r2, r1, r2
 800f1ce:	4413      	add	r3, r2
 800f1d0:	ea23 0304 	bic.w	r3, r3, r4
 800f1d4:	e7ed      	b.n	800f1b2 <round+0x2a>
 800f1d6:	2a33      	cmp	r2, #51	@ 0x33
 800f1d8:	dd08      	ble.n	800f1ec <round+0x64>
 800f1da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f1de:	d102      	bne.n	800f1e6 <round+0x5e>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	f7f1 f883 	bl	80002ec <__adddf3>
 800f1e6:	ec41 0b10 	vmov	d0, r0, r1
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f1f4:	40f4      	lsrs	r4, r6
 800f1f6:	4204      	tst	r4, r0
 800f1f8:	d0f5      	beq.n	800f1e6 <round+0x5e>
 800f1fa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f1fe:	2201      	movs	r2, #1
 800f200:	408a      	lsls	r2, r1
 800f202:	1952      	adds	r2, r2, r5
 800f204:	bf28      	it	cs
 800f206:	3301      	addcs	r3, #1
 800f208:	ea22 0204 	bic.w	r2, r2, r4
 800f20c:	e7d2      	b.n	800f1b4 <round+0x2c>
 800f20e:	bf00      	nop
 800f210:	000fffff 	.word	0x000fffff

0800f214 <__ieee754_powf>:
 800f214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f218:	ee10 4a90 	vmov	r4, s1
 800f21c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f220:	ed2d 8b02 	vpush	{d8}
 800f224:	ee10 6a10 	vmov	r6, s0
 800f228:	eeb0 8a40 	vmov.f32	s16, s0
 800f22c:	eef0 8a60 	vmov.f32	s17, s1
 800f230:	d10c      	bne.n	800f24c <__ieee754_powf+0x38>
 800f232:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f236:	0076      	lsls	r6, r6, #1
 800f238:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f23c:	f240 8274 	bls.w	800f728 <__ieee754_powf+0x514>
 800f240:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f244:	ecbd 8b02 	vpop	{d8}
 800f248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f24c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f250:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f254:	d802      	bhi.n	800f25c <__ieee754_powf+0x48>
 800f256:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f25a:	d908      	bls.n	800f26e <__ieee754_powf+0x5a>
 800f25c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f260:	d1ee      	bne.n	800f240 <__ieee754_powf+0x2c>
 800f262:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f266:	0064      	lsls	r4, r4, #1
 800f268:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f26c:	e7e6      	b.n	800f23c <__ieee754_powf+0x28>
 800f26e:	2e00      	cmp	r6, #0
 800f270:	da1f      	bge.n	800f2b2 <__ieee754_powf+0x9e>
 800f272:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f276:	f080 8260 	bcs.w	800f73a <__ieee754_powf+0x526>
 800f27a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f27e:	d32f      	bcc.n	800f2e0 <__ieee754_powf+0xcc>
 800f280:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f284:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f288:	fa49 f503 	asr.w	r5, r9, r3
 800f28c:	fa05 f303 	lsl.w	r3, r5, r3
 800f290:	454b      	cmp	r3, r9
 800f292:	d123      	bne.n	800f2dc <__ieee754_powf+0xc8>
 800f294:	f005 0501 	and.w	r5, r5, #1
 800f298:	f1c5 0502 	rsb	r5, r5, #2
 800f29c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f2a0:	d11f      	bne.n	800f2e2 <__ieee754_powf+0xce>
 800f2a2:	2c00      	cmp	r4, #0
 800f2a4:	f280 8246 	bge.w	800f734 <__ieee754_powf+0x520>
 800f2a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f2ac:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f2b0:	e7c8      	b.n	800f244 <__ieee754_powf+0x30>
 800f2b2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f2b6:	d111      	bne.n	800f2dc <__ieee754_powf+0xc8>
 800f2b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f2bc:	f000 8234 	beq.w	800f728 <__ieee754_powf+0x514>
 800f2c0:	d906      	bls.n	800f2d0 <__ieee754_powf+0xbc>
 800f2c2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800f5d8 <__ieee754_powf+0x3c4>
 800f2c6:	2c00      	cmp	r4, #0
 800f2c8:	bfa8      	it	ge
 800f2ca:	eeb0 0a68 	vmovge.f32	s0, s17
 800f2ce:	e7b9      	b.n	800f244 <__ieee754_powf+0x30>
 800f2d0:	2c00      	cmp	r4, #0
 800f2d2:	f280 822c 	bge.w	800f72e <__ieee754_powf+0x51a>
 800f2d6:	eeb1 0a68 	vneg.f32	s0, s17
 800f2da:	e7b3      	b.n	800f244 <__ieee754_powf+0x30>
 800f2dc:	2500      	movs	r5, #0
 800f2de:	e7dd      	b.n	800f29c <__ieee754_powf+0x88>
 800f2e0:	2500      	movs	r5, #0
 800f2e2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f2e6:	d102      	bne.n	800f2ee <__ieee754_powf+0xda>
 800f2e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f2ec:	e7aa      	b.n	800f244 <__ieee754_powf+0x30>
 800f2ee:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f2f2:	f040 8227 	bne.w	800f744 <__ieee754_powf+0x530>
 800f2f6:	2e00      	cmp	r6, #0
 800f2f8:	f2c0 8224 	blt.w	800f744 <__ieee754_powf+0x530>
 800f2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800f300:	ecbd 8b02 	vpop	{d8}
 800f304:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f308:	f000 bae6 	b.w	800f8d8 <__ieee754_sqrtf>
 800f30c:	2d01      	cmp	r5, #1
 800f30e:	d199      	bne.n	800f244 <__ieee754_powf+0x30>
 800f310:	eeb1 0a40 	vneg.f32	s0, s0
 800f314:	e796      	b.n	800f244 <__ieee754_powf+0x30>
 800f316:	0ff0      	lsrs	r0, r6, #31
 800f318:	3801      	subs	r0, #1
 800f31a:	ea55 0300 	orrs.w	r3, r5, r0
 800f31e:	d104      	bne.n	800f32a <__ieee754_powf+0x116>
 800f320:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f324:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f328:	e78c      	b.n	800f244 <__ieee754_powf+0x30>
 800f32a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f32e:	d96d      	bls.n	800f40c <__ieee754_powf+0x1f8>
 800f330:	4baa      	ldr	r3, [pc, #680]	@ (800f5dc <__ieee754_powf+0x3c8>)
 800f332:	4598      	cmp	r8, r3
 800f334:	d808      	bhi.n	800f348 <__ieee754_powf+0x134>
 800f336:	2c00      	cmp	r4, #0
 800f338:	da0b      	bge.n	800f352 <__ieee754_powf+0x13e>
 800f33a:	2000      	movs	r0, #0
 800f33c:	ecbd 8b02 	vpop	{d8}
 800f340:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f344:	f000 bac2 	b.w	800f8cc <__math_oflowf>
 800f348:	4ba5      	ldr	r3, [pc, #660]	@ (800f5e0 <__ieee754_powf+0x3cc>)
 800f34a:	4598      	cmp	r8, r3
 800f34c:	d908      	bls.n	800f360 <__ieee754_powf+0x14c>
 800f34e:	2c00      	cmp	r4, #0
 800f350:	dcf3      	bgt.n	800f33a <__ieee754_powf+0x126>
 800f352:	2000      	movs	r0, #0
 800f354:	ecbd 8b02 	vpop	{d8}
 800f358:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f35c:	f000 bab0 	b.w	800f8c0 <__math_uflowf>
 800f360:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f364:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f368:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800f5e4 <__ieee754_powf+0x3d0>
 800f36c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f370:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f374:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f378:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f37c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f380:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800f5e8 <__ieee754_powf+0x3d4>
 800f384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f388:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f5ec <__ieee754_powf+0x3d8>
 800f38c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f390:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f5f0 <__ieee754_powf+0x3dc>
 800f394:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f398:	eeb0 7a67 	vmov.f32	s14, s15
 800f39c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f3a0:	ee17 3a10 	vmov	r3, s14
 800f3a4:	f36f 030b 	bfc	r3, #0, #12
 800f3a8:	ee07 3a10 	vmov	s14, r3
 800f3ac:	eeb0 6a47 	vmov.f32	s12, s14
 800f3b0:	eea0 6a66 	vfms.f32	s12, s0, s13
 800f3b4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f3b8:	3d01      	subs	r5, #1
 800f3ba:	4305      	orrs	r5, r0
 800f3bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3c0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f3c4:	f36f 040b 	bfc	r4, #0, #12
 800f3c8:	bf18      	it	ne
 800f3ca:	eeb0 8a66 	vmovne.f32	s16, s13
 800f3ce:	ee06 4a90 	vmov	s13, r4
 800f3d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f3d6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800f3da:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f3de:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f3e2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f3e6:	ee17 1a10 	vmov	r1, s14
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f3f0:	f340 80dd 	ble.w	800f5ae <__ieee754_powf+0x39a>
 800f3f4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f3f8:	f240 80ca 	bls.w	800f590 <__ieee754_powf+0x37c>
 800f3fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f404:	bf4c      	ite	mi
 800f406:	2001      	movmi	r0, #1
 800f408:	2000      	movpl	r0, #0
 800f40a:	e797      	b.n	800f33c <__ieee754_powf+0x128>
 800f40c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f410:	bf01      	itttt	eq
 800f412:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f5f4 <__ieee754_powf+0x3e0>
 800f416:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f41a:	f06f 0317 	mvneq.w	r3, #23
 800f41e:	ee17 7a90 	vmoveq	r7, s15
 800f422:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f426:	bf18      	it	ne
 800f428:	2300      	movne	r3, #0
 800f42a:	3a7f      	subs	r2, #127	@ 0x7f
 800f42c:	441a      	add	r2, r3
 800f42e:	4b72      	ldr	r3, [pc, #456]	@ (800f5f8 <__ieee754_powf+0x3e4>)
 800f430:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f434:	429f      	cmp	r7, r3
 800f436:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f43a:	dd06      	ble.n	800f44a <__ieee754_powf+0x236>
 800f43c:	4b6f      	ldr	r3, [pc, #444]	@ (800f5fc <__ieee754_powf+0x3e8>)
 800f43e:	429f      	cmp	r7, r3
 800f440:	f340 80a4 	ble.w	800f58c <__ieee754_powf+0x378>
 800f444:	3201      	adds	r2, #1
 800f446:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f44a:	2600      	movs	r6, #0
 800f44c:	4b6c      	ldr	r3, [pc, #432]	@ (800f600 <__ieee754_powf+0x3ec>)
 800f44e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f452:	ee07 1a10 	vmov	s14, r1
 800f456:	edd3 5a00 	vldr	s11, [r3]
 800f45a:	4b6a      	ldr	r3, [pc, #424]	@ (800f604 <__ieee754_powf+0x3f0>)
 800f45c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f464:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f468:	1049      	asrs	r1, r1, #1
 800f46a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f46e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f472:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f476:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f47a:	ee07 1a90 	vmov	s15, r1
 800f47e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f482:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f486:	ee15 7a10 	vmov	r7, s10
 800f48a:	401f      	ands	r7, r3
 800f48c:	ee06 7a90 	vmov	s13, r7
 800f490:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f494:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f498:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f49c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f4a0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f608 <__ieee754_powf+0x3f4>
 800f4a4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f60c <__ieee754_powf+0x3f8>
 800f4a8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f4ac:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f610 <__ieee754_powf+0x3fc>
 800f4b0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f4b4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f5e4 <__ieee754_powf+0x3d0>
 800f4b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f4bc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f614 <__ieee754_powf+0x400>
 800f4c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f4c4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f618 <__ieee754_powf+0x404>
 800f4c8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f4cc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f4d0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f4d4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f4d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f4dc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f4e0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f4e4:	eef0 5a67 	vmov.f32	s11, s15
 800f4e8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f4ec:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f4f0:	ee15 1a90 	vmov	r1, s11
 800f4f4:	4019      	ands	r1, r3
 800f4f6:	ee05 1a90 	vmov	s11, r1
 800f4fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f4fe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f502:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f506:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f50a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f50e:	eeb0 6a67 	vmov.f32	s12, s15
 800f512:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f516:	ee16 1a10 	vmov	r1, s12
 800f51a:	4019      	ands	r1, r3
 800f51c:	ee06 1a10 	vmov	s12, r1
 800f520:	eeb0 7a46 	vmov.f32	s14, s12
 800f524:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f528:	493c      	ldr	r1, [pc, #240]	@ (800f61c <__ieee754_powf+0x408>)
 800f52a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f52e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f532:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f620 <__ieee754_powf+0x40c>
 800f536:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f624 <__ieee754_powf+0x410>
 800f53a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f53e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f628 <__ieee754_powf+0x414>
 800f542:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f546:	ed91 7a00 	vldr	s14, [r1]
 800f54a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f54e:	ee07 2a10 	vmov	s14, r2
 800f552:	4a36      	ldr	r2, [pc, #216]	@ (800f62c <__ieee754_powf+0x418>)
 800f554:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f558:	eeb0 7a67 	vmov.f32	s14, s15
 800f55c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f560:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f564:	ed92 5a00 	vldr	s10, [r2]
 800f568:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f56c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f570:	ee17 2a10 	vmov	r2, s14
 800f574:	401a      	ands	r2, r3
 800f576:	ee07 2a10 	vmov	s14, r2
 800f57a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f57e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f582:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f586:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f58a:	e715      	b.n	800f3b8 <__ieee754_powf+0x1a4>
 800f58c:	2601      	movs	r6, #1
 800f58e:	e75d      	b.n	800f44c <__ieee754_powf+0x238>
 800f590:	d152      	bne.n	800f638 <__ieee754_powf+0x424>
 800f592:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f630 <__ieee754_powf+0x41c>
 800f596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f59a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f59e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a6:	f73f af29 	bgt.w	800f3fc <__ieee754_powf+0x1e8>
 800f5aa:	2386      	movs	r3, #134	@ 0x86
 800f5ac:	e048      	b.n	800f640 <__ieee754_powf+0x42c>
 800f5ae:	4a21      	ldr	r2, [pc, #132]	@ (800f634 <__ieee754_powf+0x420>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d907      	bls.n	800f5c4 <__ieee754_powf+0x3b0>
 800f5b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5bc:	bf4c      	ite	mi
 800f5be:	2001      	movmi	r0, #1
 800f5c0:	2000      	movpl	r0, #0
 800f5c2:	e6c7      	b.n	800f354 <__ieee754_powf+0x140>
 800f5c4:	d138      	bne.n	800f638 <__ieee754_powf+0x424>
 800f5c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5ca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d2:	dbea      	blt.n	800f5aa <__ieee754_powf+0x396>
 800f5d4:	e7ee      	b.n	800f5b4 <__ieee754_powf+0x3a0>
 800f5d6:	bf00      	nop
 800f5d8:	00000000 	.word	0x00000000
 800f5dc:	3f7ffff3 	.word	0x3f7ffff3
 800f5e0:	3f800007 	.word	0x3f800007
 800f5e4:	3eaaaaab 	.word	0x3eaaaaab
 800f5e8:	3fb8aa00 	.word	0x3fb8aa00
 800f5ec:	3fb8aa3b 	.word	0x3fb8aa3b
 800f5f0:	36eca570 	.word	0x36eca570
 800f5f4:	4b800000 	.word	0x4b800000
 800f5f8:	001cc471 	.word	0x001cc471
 800f5fc:	005db3d6 	.word	0x005db3d6
 800f600:	080153ec 	.word	0x080153ec
 800f604:	fffff000 	.word	0xfffff000
 800f608:	3e6c3255 	.word	0x3e6c3255
 800f60c:	3e53f142 	.word	0x3e53f142
 800f610:	3e8ba305 	.word	0x3e8ba305
 800f614:	3edb6db7 	.word	0x3edb6db7
 800f618:	3f19999a 	.word	0x3f19999a
 800f61c:	080153dc 	.word	0x080153dc
 800f620:	3f76384f 	.word	0x3f76384f
 800f624:	3f763800 	.word	0x3f763800
 800f628:	369dc3a0 	.word	0x369dc3a0
 800f62c:	080153e4 	.word	0x080153e4
 800f630:	3338aa3c 	.word	0x3338aa3c
 800f634:	43160000 	.word	0x43160000
 800f638:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f63c:	d96f      	bls.n	800f71e <__ieee754_powf+0x50a>
 800f63e:	15db      	asrs	r3, r3, #23
 800f640:	3b7e      	subs	r3, #126	@ 0x7e
 800f642:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f646:	4118      	asrs	r0, r3
 800f648:	4408      	add	r0, r1
 800f64a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f64e:	4a4e      	ldr	r2, [pc, #312]	@ (800f788 <__ieee754_powf+0x574>)
 800f650:	3b7f      	subs	r3, #127	@ 0x7f
 800f652:	411a      	asrs	r2, r3
 800f654:	4002      	ands	r2, r0
 800f656:	ee07 2a10 	vmov	s14, r2
 800f65a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f65e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f662:	f1c3 0317 	rsb	r3, r3, #23
 800f666:	4118      	asrs	r0, r3
 800f668:	2900      	cmp	r1, #0
 800f66a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f66e:	bfb8      	it	lt
 800f670:	4240      	neglt	r0, r0
 800f672:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f676:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f78c <__ieee754_powf+0x578>
 800f67a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f790 <__ieee754_powf+0x57c>
 800f67e:	ee16 3a90 	vmov	r3, s13
 800f682:	f36f 030b 	bfc	r3, #0, #12
 800f686:	ee06 3a90 	vmov	s13, r3
 800f68a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f68e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f692:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f696:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f794 <__ieee754_powf+0x580>
 800f69a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f69e:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f6a2:	eeb0 7a67 	vmov.f32	s14, s15
 800f6a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f6aa:	eef0 5a47 	vmov.f32	s11, s14
 800f6ae:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f6b2:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f6b6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f6ba:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f798 <__ieee754_powf+0x584>
 800f6be:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f79c <__ieee754_powf+0x588>
 800f6c2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f6c6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f7a0 <__ieee754_powf+0x58c>
 800f6ca:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f6ce:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f7a4 <__ieee754_powf+0x590>
 800f6d2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f6d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f7a8 <__ieee754_powf+0x594>
 800f6da:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f6de:	eeb0 6a47 	vmov.f32	s12, s14
 800f6e2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f6e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f6ea:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f6ee:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f6f2:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f6f6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f6fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f6fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f702:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f706:	ee10 3a10 	vmov	r3, s0
 800f70a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f70e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f712:	da06      	bge.n	800f722 <__ieee754_powf+0x50e>
 800f714:	f000 f854 	bl	800f7c0 <scalbnf>
 800f718:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f71c:	e592      	b.n	800f244 <__ieee754_powf+0x30>
 800f71e:	2000      	movs	r0, #0
 800f720:	e7a7      	b.n	800f672 <__ieee754_powf+0x45e>
 800f722:	ee00 3a10 	vmov	s0, r3
 800f726:	e7f7      	b.n	800f718 <__ieee754_powf+0x504>
 800f728:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f72c:	e58a      	b.n	800f244 <__ieee754_powf+0x30>
 800f72e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f7ac <__ieee754_powf+0x598>
 800f732:	e587      	b.n	800f244 <__ieee754_powf+0x30>
 800f734:	eeb0 0a48 	vmov.f32	s0, s16
 800f738:	e584      	b.n	800f244 <__ieee754_powf+0x30>
 800f73a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f73e:	f43f adbb 	beq.w	800f2b8 <__ieee754_powf+0xa4>
 800f742:	2502      	movs	r5, #2
 800f744:	eeb0 0a48 	vmov.f32	s0, s16
 800f748:	f000 f832 	bl	800f7b0 <fabsf>
 800f74c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f750:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f754:	4647      	mov	r7, r8
 800f756:	d003      	beq.n	800f760 <__ieee754_powf+0x54c>
 800f758:	f1b8 0f00 	cmp.w	r8, #0
 800f75c:	f47f addb 	bne.w	800f316 <__ieee754_powf+0x102>
 800f760:	2c00      	cmp	r4, #0
 800f762:	bfbc      	itt	lt
 800f764:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f768:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f76c:	2e00      	cmp	r6, #0
 800f76e:	f6bf ad69 	bge.w	800f244 <__ieee754_powf+0x30>
 800f772:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f776:	ea58 0805 	orrs.w	r8, r8, r5
 800f77a:	f47f adc7 	bne.w	800f30c <__ieee754_powf+0xf8>
 800f77e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f782:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f786:	e55d      	b.n	800f244 <__ieee754_powf+0x30>
 800f788:	ff800000 	.word	0xff800000
 800f78c:	3f317218 	.word	0x3f317218
 800f790:	3f317200 	.word	0x3f317200
 800f794:	35bfbe8c 	.word	0x35bfbe8c
 800f798:	b5ddea0e 	.word	0xb5ddea0e
 800f79c:	3331bb4c 	.word	0x3331bb4c
 800f7a0:	388ab355 	.word	0x388ab355
 800f7a4:	bb360b61 	.word	0xbb360b61
 800f7a8:	3e2aaaab 	.word	0x3e2aaaab
 800f7ac:	00000000 	.word	0x00000000

0800f7b0 <fabsf>:
 800f7b0:	ee10 3a10 	vmov	r3, s0
 800f7b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7b8:	ee00 3a10 	vmov	s0, r3
 800f7bc:	4770      	bx	lr
	...

0800f7c0 <scalbnf>:
 800f7c0:	ee10 3a10 	vmov	r3, s0
 800f7c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f7c8:	d02b      	beq.n	800f822 <scalbnf+0x62>
 800f7ca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f7ce:	d302      	bcc.n	800f7d6 <scalbnf+0x16>
 800f7d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f7d4:	4770      	bx	lr
 800f7d6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f7da:	d123      	bne.n	800f824 <scalbnf+0x64>
 800f7dc:	4b24      	ldr	r3, [pc, #144]	@ (800f870 <scalbnf+0xb0>)
 800f7de:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f874 <scalbnf+0xb4>
 800f7e2:	4298      	cmp	r0, r3
 800f7e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f7e8:	db17      	blt.n	800f81a <scalbnf+0x5a>
 800f7ea:	ee10 3a10 	vmov	r3, s0
 800f7ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f7f2:	3a19      	subs	r2, #25
 800f7f4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f7f8:	4288      	cmp	r0, r1
 800f7fa:	dd15      	ble.n	800f828 <scalbnf+0x68>
 800f7fc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f878 <scalbnf+0xb8>
 800f800:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f87c <scalbnf+0xbc>
 800f804:	ee10 3a10 	vmov	r3, s0
 800f808:	eeb0 7a67 	vmov.f32	s14, s15
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bfb8      	it	lt
 800f810:	eef0 7a66 	vmovlt.f32	s15, s13
 800f814:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f818:	4770      	bx	lr
 800f81a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f880 <scalbnf+0xc0>
 800f81e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f822:	4770      	bx	lr
 800f824:	0dd2      	lsrs	r2, r2, #23
 800f826:	e7e5      	b.n	800f7f4 <scalbnf+0x34>
 800f828:	4410      	add	r0, r2
 800f82a:	28fe      	cmp	r0, #254	@ 0xfe
 800f82c:	dce6      	bgt.n	800f7fc <scalbnf+0x3c>
 800f82e:	2800      	cmp	r0, #0
 800f830:	dd06      	ble.n	800f840 <scalbnf+0x80>
 800f832:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f836:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f83a:	ee00 3a10 	vmov	s0, r3
 800f83e:	4770      	bx	lr
 800f840:	f110 0f16 	cmn.w	r0, #22
 800f844:	da09      	bge.n	800f85a <scalbnf+0x9a>
 800f846:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f880 <scalbnf+0xc0>
 800f84a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f884 <scalbnf+0xc4>
 800f84e:	ee10 3a10 	vmov	r3, s0
 800f852:	eeb0 7a67 	vmov.f32	s14, s15
 800f856:	2b00      	cmp	r3, #0
 800f858:	e7d9      	b.n	800f80e <scalbnf+0x4e>
 800f85a:	3019      	adds	r0, #25
 800f85c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f860:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f864:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f888 <scalbnf+0xc8>
 800f868:	ee07 3a90 	vmov	s15, r3
 800f86c:	e7d7      	b.n	800f81e <scalbnf+0x5e>
 800f86e:	bf00      	nop
 800f870:	ffff3cb0 	.word	0xffff3cb0
 800f874:	4c000000 	.word	0x4c000000
 800f878:	7149f2ca 	.word	0x7149f2ca
 800f87c:	f149f2ca 	.word	0xf149f2ca
 800f880:	0da24260 	.word	0x0da24260
 800f884:	8da24260 	.word	0x8da24260
 800f888:	33000000 	.word	0x33000000

0800f88c <with_errnof>:
 800f88c:	b510      	push	{r4, lr}
 800f88e:	ed2d 8b02 	vpush	{d8}
 800f892:	eeb0 8a40 	vmov.f32	s16, s0
 800f896:	4604      	mov	r4, r0
 800f898:	f001 f81c 	bl	80108d4 <__errno>
 800f89c:	eeb0 0a48 	vmov.f32	s0, s16
 800f8a0:	ecbd 8b02 	vpop	{d8}
 800f8a4:	6004      	str	r4, [r0, #0]
 800f8a6:	bd10      	pop	{r4, pc}

0800f8a8 <xflowf>:
 800f8a8:	b130      	cbz	r0, 800f8b8 <xflowf+0x10>
 800f8aa:	eef1 7a40 	vneg.f32	s15, s0
 800f8ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f8b2:	2022      	movs	r0, #34	@ 0x22
 800f8b4:	f7ff bfea 	b.w	800f88c <with_errnof>
 800f8b8:	eef0 7a40 	vmov.f32	s15, s0
 800f8bc:	e7f7      	b.n	800f8ae <xflowf+0x6>
	...

0800f8c0 <__math_uflowf>:
 800f8c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8c8 <__math_uflowf+0x8>
 800f8c4:	f7ff bff0 	b.w	800f8a8 <xflowf>
 800f8c8:	10000000 	.word	0x10000000

0800f8cc <__math_oflowf>:
 800f8cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8d4 <__math_oflowf+0x8>
 800f8d0:	f7ff bfea 	b.w	800f8a8 <xflowf>
 800f8d4:	70000000 	.word	0x70000000

0800f8d8 <__ieee754_sqrtf>:
 800f8d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f8dc:	4770      	bx	lr

0800f8de <abort>:
 800f8de:	b508      	push	{r3, lr}
 800f8e0:	2006      	movs	r0, #6
 800f8e2:	f000 ff23 	bl	801072c <raise>
 800f8e6:	2001      	movs	r0, #1
 800f8e8:	f7f7 fb4a 	bl	8006f80 <_exit>

0800f8ec <malloc>:
 800f8ec:	4b02      	ldr	r3, [pc, #8]	@ (800f8f8 <malloc+0xc>)
 800f8ee:	4601      	mov	r1, r0
 800f8f0:	6818      	ldr	r0, [r3, #0]
 800f8f2:	f000 b82d 	b.w	800f950 <_malloc_r>
 800f8f6:	bf00      	nop
 800f8f8:	20000058 	.word	0x20000058

0800f8fc <free>:
 800f8fc:	4b02      	ldr	r3, [pc, #8]	@ (800f908 <free+0xc>)
 800f8fe:	4601      	mov	r1, r0
 800f900:	6818      	ldr	r0, [r3, #0]
 800f902:	f001 be7d 	b.w	8011600 <_free_r>
 800f906:	bf00      	nop
 800f908:	20000058 	.word	0x20000058

0800f90c <sbrk_aligned>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	4e0f      	ldr	r6, [pc, #60]	@ (800f94c <sbrk_aligned+0x40>)
 800f910:	460c      	mov	r4, r1
 800f912:	6831      	ldr	r1, [r6, #0]
 800f914:	4605      	mov	r5, r0
 800f916:	b911      	cbnz	r1, 800f91e <sbrk_aligned+0x12>
 800f918:	f000 ffba 	bl	8010890 <_sbrk_r>
 800f91c:	6030      	str	r0, [r6, #0]
 800f91e:	4621      	mov	r1, r4
 800f920:	4628      	mov	r0, r5
 800f922:	f000 ffb5 	bl	8010890 <_sbrk_r>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	d103      	bne.n	800f932 <sbrk_aligned+0x26>
 800f92a:	f04f 34ff 	mov.w	r4, #4294967295
 800f92e:	4620      	mov	r0, r4
 800f930:	bd70      	pop	{r4, r5, r6, pc}
 800f932:	1cc4      	adds	r4, r0, #3
 800f934:	f024 0403 	bic.w	r4, r4, #3
 800f938:	42a0      	cmp	r0, r4
 800f93a:	d0f8      	beq.n	800f92e <sbrk_aligned+0x22>
 800f93c:	1a21      	subs	r1, r4, r0
 800f93e:	4628      	mov	r0, r5
 800f940:	f000 ffa6 	bl	8010890 <_sbrk_r>
 800f944:	3001      	adds	r0, #1
 800f946:	d1f2      	bne.n	800f92e <sbrk_aligned+0x22>
 800f948:	e7ef      	b.n	800f92a <sbrk_aligned+0x1e>
 800f94a:	bf00      	nop
 800f94c:	2000703c 	.word	0x2000703c

0800f950 <_malloc_r>:
 800f950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f954:	1ccd      	adds	r5, r1, #3
 800f956:	f025 0503 	bic.w	r5, r5, #3
 800f95a:	3508      	adds	r5, #8
 800f95c:	2d0c      	cmp	r5, #12
 800f95e:	bf38      	it	cc
 800f960:	250c      	movcc	r5, #12
 800f962:	2d00      	cmp	r5, #0
 800f964:	4606      	mov	r6, r0
 800f966:	db01      	blt.n	800f96c <_malloc_r+0x1c>
 800f968:	42a9      	cmp	r1, r5
 800f96a:	d904      	bls.n	800f976 <_malloc_r+0x26>
 800f96c:	230c      	movs	r3, #12
 800f96e:	6033      	str	r3, [r6, #0]
 800f970:	2000      	movs	r0, #0
 800f972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa4c <_malloc_r+0xfc>
 800f97a:	f000 f869 	bl	800fa50 <__malloc_lock>
 800f97e:	f8d8 3000 	ldr.w	r3, [r8]
 800f982:	461c      	mov	r4, r3
 800f984:	bb44      	cbnz	r4, 800f9d8 <_malloc_r+0x88>
 800f986:	4629      	mov	r1, r5
 800f988:	4630      	mov	r0, r6
 800f98a:	f7ff ffbf 	bl	800f90c <sbrk_aligned>
 800f98e:	1c43      	adds	r3, r0, #1
 800f990:	4604      	mov	r4, r0
 800f992:	d158      	bne.n	800fa46 <_malloc_r+0xf6>
 800f994:	f8d8 4000 	ldr.w	r4, [r8]
 800f998:	4627      	mov	r7, r4
 800f99a:	2f00      	cmp	r7, #0
 800f99c:	d143      	bne.n	800fa26 <_malloc_r+0xd6>
 800f99e:	2c00      	cmp	r4, #0
 800f9a0:	d04b      	beq.n	800fa3a <_malloc_r+0xea>
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	eb04 0903 	add.w	r9, r4, r3
 800f9ac:	f000 ff70 	bl	8010890 <_sbrk_r>
 800f9b0:	4581      	cmp	r9, r0
 800f9b2:	d142      	bne.n	800fa3a <_malloc_r+0xea>
 800f9b4:	6821      	ldr	r1, [r4, #0]
 800f9b6:	1a6d      	subs	r5, r5, r1
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f7ff ffa6 	bl	800f90c <sbrk_aligned>
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d03a      	beq.n	800fa3a <_malloc_r+0xea>
 800f9c4:	6823      	ldr	r3, [r4, #0]
 800f9c6:	442b      	add	r3, r5
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	bb62      	cbnz	r2, 800fa2c <_malloc_r+0xdc>
 800f9d2:	f8c8 7000 	str.w	r7, [r8]
 800f9d6:	e00f      	b.n	800f9f8 <_malloc_r+0xa8>
 800f9d8:	6822      	ldr	r2, [r4, #0]
 800f9da:	1b52      	subs	r2, r2, r5
 800f9dc:	d420      	bmi.n	800fa20 <_malloc_r+0xd0>
 800f9de:	2a0b      	cmp	r2, #11
 800f9e0:	d917      	bls.n	800fa12 <_malloc_r+0xc2>
 800f9e2:	1961      	adds	r1, r4, r5
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	6025      	str	r5, [r4, #0]
 800f9e8:	bf18      	it	ne
 800f9ea:	6059      	strne	r1, [r3, #4]
 800f9ec:	6863      	ldr	r3, [r4, #4]
 800f9ee:	bf08      	it	eq
 800f9f0:	f8c8 1000 	streq.w	r1, [r8]
 800f9f4:	5162      	str	r2, [r4, r5]
 800f9f6:	604b      	str	r3, [r1, #4]
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f000 f82f 	bl	800fa5c <__malloc_unlock>
 800f9fe:	f104 000b 	add.w	r0, r4, #11
 800fa02:	1d23      	adds	r3, r4, #4
 800fa04:	f020 0007 	bic.w	r0, r0, #7
 800fa08:	1ac2      	subs	r2, r0, r3
 800fa0a:	bf1c      	itt	ne
 800fa0c:	1a1b      	subne	r3, r3, r0
 800fa0e:	50a3      	strne	r3, [r4, r2]
 800fa10:	e7af      	b.n	800f972 <_malloc_r+0x22>
 800fa12:	6862      	ldr	r2, [r4, #4]
 800fa14:	42a3      	cmp	r3, r4
 800fa16:	bf0c      	ite	eq
 800fa18:	f8c8 2000 	streq.w	r2, [r8]
 800fa1c:	605a      	strne	r2, [r3, #4]
 800fa1e:	e7eb      	b.n	800f9f8 <_malloc_r+0xa8>
 800fa20:	4623      	mov	r3, r4
 800fa22:	6864      	ldr	r4, [r4, #4]
 800fa24:	e7ae      	b.n	800f984 <_malloc_r+0x34>
 800fa26:	463c      	mov	r4, r7
 800fa28:	687f      	ldr	r7, [r7, #4]
 800fa2a:	e7b6      	b.n	800f99a <_malloc_r+0x4a>
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	42a3      	cmp	r3, r4
 800fa32:	d1fb      	bne.n	800fa2c <_malloc_r+0xdc>
 800fa34:	2300      	movs	r3, #0
 800fa36:	6053      	str	r3, [r2, #4]
 800fa38:	e7de      	b.n	800f9f8 <_malloc_r+0xa8>
 800fa3a:	230c      	movs	r3, #12
 800fa3c:	6033      	str	r3, [r6, #0]
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f000 f80c 	bl	800fa5c <__malloc_unlock>
 800fa44:	e794      	b.n	800f970 <_malloc_r+0x20>
 800fa46:	6005      	str	r5, [r0, #0]
 800fa48:	e7d6      	b.n	800f9f8 <_malloc_r+0xa8>
 800fa4a:	bf00      	nop
 800fa4c:	20007040 	.word	0x20007040

0800fa50 <__malloc_lock>:
 800fa50:	4801      	ldr	r0, [pc, #4]	@ (800fa58 <__malloc_lock+0x8>)
 800fa52:	f000 bf6a 	b.w	801092a <__retarget_lock_acquire_recursive>
 800fa56:	bf00      	nop
 800fa58:	20007184 	.word	0x20007184

0800fa5c <__malloc_unlock>:
 800fa5c:	4801      	ldr	r0, [pc, #4]	@ (800fa64 <__malloc_unlock+0x8>)
 800fa5e:	f000 bf65 	b.w	801092c <__retarget_lock_release_recursive>
 800fa62:	bf00      	nop
 800fa64:	20007184 	.word	0x20007184

0800fa68 <__cvt>:
 800fa68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	ec57 6b10 	vmov	r6, r7, d0
 800fa70:	2f00      	cmp	r7, #0
 800fa72:	460c      	mov	r4, r1
 800fa74:	4619      	mov	r1, r3
 800fa76:	463b      	mov	r3, r7
 800fa78:	bfbb      	ittet	lt
 800fa7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa7e:	461f      	movlt	r7, r3
 800fa80:	2300      	movge	r3, #0
 800fa82:	232d      	movlt	r3, #45	@ 0x2d
 800fa84:	700b      	strb	r3, [r1, #0]
 800fa86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa8c:	4691      	mov	r9, r2
 800fa8e:	f023 0820 	bic.w	r8, r3, #32
 800fa92:	bfbc      	itt	lt
 800fa94:	4632      	movlt	r2, r6
 800fa96:	4616      	movlt	r6, r2
 800fa98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa9c:	d005      	beq.n	800faaa <__cvt+0x42>
 800fa9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800faa2:	d100      	bne.n	800faa6 <__cvt+0x3e>
 800faa4:	3401      	adds	r4, #1
 800faa6:	2102      	movs	r1, #2
 800faa8:	e000      	b.n	800faac <__cvt+0x44>
 800faaa:	2103      	movs	r1, #3
 800faac:	ab03      	add	r3, sp, #12
 800faae:	9301      	str	r3, [sp, #4]
 800fab0:	ab02      	add	r3, sp, #8
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	ec47 6b10 	vmov	d0, r6, r7
 800fab8:	4653      	mov	r3, sl
 800faba:	4622      	mov	r2, r4
 800fabc:	f000 ffd0 	bl	8010a60 <_dtoa_r>
 800fac0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fac4:	4605      	mov	r5, r0
 800fac6:	d119      	bne.n	800fafc <__cvt+0x94>
 800fac8:	f019 0f01 	tst.w	r9, #1
 800facc:	d00e      	beq.n	800faec <__cvt+0x84>
 800face:	eb00 0904 	add.w	r9, r0, r4
 800fad2:	2200      	movs	r2, #0
 800fad4:	2300      	movs	r3, #0
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f1 f825 	bl	8000b28 <__aeabi_dcmpeq>
 800fade:	b108      	cbz	r0, 800fae4 <__cvt+0x7c>
 800fae0:	f8cd 900c 	str.w	r9, [sp, #12]
 800fae4:	2230      	movs	r2, #48	@ 0x30
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	454b      	cmp	r3, r9
 800faea:	d31e      	bcc.n	800fb2a <__cvt+0xc2>
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faf0:	1b5b      	subs	r3, r3, r5
 800faf2:	4628      	mov	r0, r5
 800faf4:	6013      	str	r3, [r2, #0]
 800faf6:	b004      	add	sp, #16
 800faf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb00:	eb00 0904 	add.w	r9, r0, r4
 800fb04:	d1e5      	bne.n	800fad2 <__cvt+0x6a>
 800fb06:	7803      	ldrb	r3, [r0, #0]
 800fb08:	2b30      	cmp	r3, #48	@ 0x30
 800fb0a:	d10a      	bne.n	800fb22 <__cvt+0xba>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	2300      	movs	r3, #0
 800fb10:	4630      	mov	r0, r6
 800fb12:	4639      	mov	r1, r7
 800fb14:	f7f1 f808 	bl	8000b28 <__aeabi_dcmpeq>
 800fb18:	b918      	cbnz	r0, 800fb22 <__cvt+0xba>
 800fb1a:	f1c4 0401 	rsb	r4, r4, #1
 800fb1e:	f8ca 4000 	str.w	r4, [sl]
 800fb22:	f8da 3000 	ldr.w	r3, [sl]
 800fb26:	4499      	add	r9, r3
 800fb28:	e7d3      	b.n	800fad2 <__cvt+0x6a>
 800fb2a:	1c59      	adds	r1, r3, #1
 800fb2c:	9103      	str	r1, [sp, #12]
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	e7d9      	b.n	800fae6 <__cvt+0x7e>

0800fb32 <__exponent>:
 800fb32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb34:	2900      	cmp	r1, #0
 800fb36:	bfba      	itte	lt
 800fb38:	4249      	neglt	r1, r1
 800fb3a:	232d      	movlt	r3, #45	@ 0x2d
 800fb3c:	232b      	movge	r3, #43	@ 0x2b
 800fb3e:	2909      	cmp	r1, #9
 800fb40:	7002      	strb	r2, [r0, #0]
 800fb42:	7043      	strb	r3, [r0, #1]
 800fb44:	dd29      	ble.n	800fb9a <__exponent+0x68>
 800fb46:	f10d 0307 	add.w	r3, sp, #7
 800fb4a:	461d      	mov	r5, r3
 800fb4c:	270a      	movs	r7, #10
 800fb4e:	461a      	mov	r2, r3
 800fb50:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb54:	fb07 1416 	mls	r4, r7, r6, r1
 800fb58:	3430      	adds	r4, #48	@ 0x30
 800fb5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb5e:	460c      	mov	r4, r1
 800fb60:	2c63      	cmp	r4, #99	@ 0x63
 800fb62:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb66:	4631      	mov	r1, r6
 800fb68:	dcf1      	bgt.n	800fb4e <__exponent+0x1c>
 800fb6a:	3130      	adds	r1, #48	@ 0x30
 800fb6c:	1e94      	subs	r4, r2, #2
 800fb6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb72:	1c41      	adds	r1, r0, #1
 800fb74:	4623      	mov	r3, r4
 800fb76:	42ab      	cmp	r3, r5
 800fb78:	d30a      	bcc.n	800fb90 <__exponent+0x5e>
 800fb7a:	f10d 0309 	add.w	r3, sp, #9
 800fb7e:	1a9b      	subs	r3, r3, r2
 800fb80:	42ac      	cmp	r4, r5
 800fb82:	bf88      	it	hi
 800fb84:	2300      	movhi	r3, #0
 800fb86:	3302      	adds	r3, #2
 800fb88:	4403      	add	r3, r0
 800fb8a:	1a18      	subs	r0, r3, r0
 800fb8c:	b003      	add	sp, #12
 800fb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb90:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb94:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb98:	e7ed      	b.n	800fb76 <__exponent+0x44>
 800fb9a:	2330      	movs	r3, #48	@ 0x30
 800fb9c:	3130      	adds	r1, #48	@ 0x30
 800fb9e:	7083      	strb	r3, [r0, #2]
 800fba0:	70c1      	strb	r1, [r0, #3]
 800fba2:	1d03      	adds	r3, r0, #4
 800fba4:	e7f1      	b.n	800fb8a <__exponent+0x58>
	...

0800fba8 <_printf_float>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	b08d      	sub	sp, #52	@ 0x34
 800fbae:	460c      	mov	r4, r1
 800fbb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	461f      	mov	r7, r3
 800fbb8:	4605      	mov	r5, r0
 800fbba:	f000 fdbf 	bl	801073c <_localeconv_r>
 800fbbe:	6803      	ldr	r3, [r0, #0]
 800fbc0:	9304      	str	r3, [sp, #16]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f0 fb84 	bl	80002d0 <strlen>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbcc:	f8d8 3000 	ldr.w	r3, [r8]
 800fbd0:	9005      	str	r0, [sp, #20]
 800fbd2:	3307      	adds	r3, #7
 800fbd4:	f023 0307 	bic.w	r3, r3, #7
 800fbd8:	f103 0208 	add.w	r2, r3, #8
 800fbdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fbe0:	f8d4 b000 	ldr.w	fp, [r4]
 800fbe4:	f8c8 2000 	str.w	r2, [r8]
 800fbe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	f8cd 8018 	str.w	r8, [sp, #24]
 800fbf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fbfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbfe:	4b9c      	ldr	r3, [pc, #624]	@ (800fe70 <_printf_float+0x2c8>)
 800fc00:	f04f 32ff 	mov.w	r2, #4294967295
 800fc04:	f7f0 ffc2 	bl	8000b8c <__aeabi_dcmpun>
 800fc08:	bb70      	cbnz	r0, 800fc68 <_printf_float+0xc0>
 800fc0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc0e:	4b98      	ldr	r3, [pc, #608]	@ (800fe70 <_printf_float+0x2c8>)
 800fc10:	f04f 32ff 	mov.w	r2, #4294967295
 800fc14:	f7f0 ff9c 	bl	8000b50 <__aeabi_dcmple>
 800fc18:	bb30      	cbnz	r0, 800fc68 <_printf_float+0xc0>
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4640      	mov	r0, r8
 800fc20:	4649      	mov	r1, r9
 800fc22:	f7f0 ff8b 	bl	8000b3c <__aeabi_dcmplt>
 800fc26:	b110      	cbz	r0, 800fc2e <_printf_float+0x86>
 800fc28:	232d      	movs	r3, #45	@ 0x2d
 800fc2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc2e:	4a91      	ldr	r2, [pc, #580]	@ (800fe74 <_printf_float+0x2cc>)
 800fc30:	4b91      	ldr	r3, [pc, #580]	@ (800fe78 <_printf_float+0x2d0>)
 800fc32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc36:	bf8c      	ite	hi
 800fc38:	4690      	movhi	r8, r2
 800fc3a:	4698      	movls	r8, r3
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	f02b 0304 	bic.w	r3, fp, #4
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	f04f 0900 	mov.w	r9, #0
 800fc4a:	9700      	str	r7, [sp, #0]
 800fc4c:	4633      	mov	r3, r6
 800fc4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc50:	4621      	mov	r1, r4
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 f9d2 	bl	800fffc <_printf_common>
 800fc58:	3001      	adds	r0, #1
 800fc5a:	f040 808d 	bne.w	800fd78 <_printf_float+0x1d0>
 800fc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc62:	b00d      	add	sp, #52	@ 0x34
 800fc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc68:	4642      	mov	r2, r8
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	4649      	mov	r1, r9
 800fc70:	f7f0 ff8c 	bl	8000b8c <__aeabi_dcmpun>
 800fc74:	b140      	cbz	r0, 800fc88 <_printf_float+0xe0>
 800fc76:	464b      	mov	r3, r9
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bfbc      	itt	lt
 800fc7c:	232d      	movlt	r3, #45	@ 0x2d
 800fc7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc82:	4a7e      	ldr	r2, [pc, #504]	@ (800fe7c <_printf_float+0x2d4>)
 800fc84:	4b7e      	ldr	r3, [pc, #504]	@ (800fe80 <_printf_float+0x2d8>)
 800fc86:	e7d4      	b.n	800fc32 <_printf_float+0x8a>
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc8e:	9206      	str	r2, [sp, #24]
 800fc90:	1c5a      	adds	r2, r3, #1
 800fc92:	d13b      	bne.n	800fd0c <_printf_float+0x164>
 800fc94:	2306      	movs	r3, #6
 800fc96:	6063      	str	r3, [r4, #4]
 800fc98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6022      	str	r2, [r4, #0]
 800fca0:	9303      	str	r3, [sp, #12]
 800fca2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fca4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fca8:	ab09      	add	r3, sp, #36	@ 0x24
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	6861      	ldr	r1, [r4, #4]
 800fcae:	ec49 8b10 	vmov	d0, r8, r9
 800fcb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f7ff fed6 	bl	800fa68 <__cvt>
 800fcbc:	9b06      	ldr	r3, [sp, #24]
 800fcbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcc0:	2b47      	cmp	r3, #71	@ 0x47
 800fcc2:	4680      	mov	r8, r0
 800fcc4:	d129      	bne.n	800fd1a <_printf_float+0x172>
 800fcc6:	1cc8      	adds	r0, r1, #3
 800fcc8:	db02      	blt.n	800fcd0 <_printf_float+0x128>
 800fcca:	6863      	ldr	r3, [r4, #4]
 800fccc:	4299      	cmp	r1, r3
 800fcce:	dd41      	ble.n	800fd54 <_printf_float+0x1ac>
 800fcd0:	f1aa 0a02 	sub.w	sl, sl, #2
 800fcd4:	fa5f fa8a 	uxtb.w	sl, sl
 800fcd8:	3901      	subs	r1, #1
 800fcda:	4652      	mov	r2, sl
 800fcdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fce0:	9109      	str	r1, [sp, #36]	@ 0x24
 800fce2:	f7ff ff26 	bl	800fb32 <__exponent>
 800fce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fce8:	1813      	adds	r3, r2, r0
 800fcea:	2a01      	cmp	r2, #1
 800fcec:	4681      	mov	r9, r0
 800fcee:	6123      	str	r3, [r4, #16]
 800fcf0:	dc02      	bgt.n	800fcf8 <_printf_float+0x150>
 800fcf2:	6822      	ldr	r2, [r4, #0]
 800fcf4:	07d2      	lsls	r2, r2, #31
 800fcf6:	d501      	bpl.n	800fcfc <_printf_float+0x154>
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0a2      	beq.n	800fc4a <_printf_float+0xa2>
 800fd04:	232d      	movs	r3, #45	@ 0x2d
 800fd06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd0a:	e79e      	b.n	800fc4a <_printf_float+0xa2>
 800fd0c:	9a06      	ldr	r2, [sp, #24]
 800fd0e:	2a47      	cmp	r2, #71	@ 0x47
 800fd10:	d1c2      	bne.n	800fc98 <_printf_float+0xf0>
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1c0      	bne.n	800fc98 <_printf_float+0xf0>
 800fd16:	2301      	movs	r3, #1
 800fd18:	e7bd      	b.n	800fc96 <_printf_float+0xee>
 800fd1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd1e:	d9db      	bls.n	800fcd8 <_printf_float+0x130>
 800fd20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fd24:	d118      	bne.n	800fd58 <_printf_float+0x1b0>
 800fd26:	2900      	cmp	r1, #0
 800fd28:	6863      	ldr	r3, [r4, #4]
 800fd2a:	dd0b      	ble.n	800fd44 <_printf_float+0x19c>
 800fd2c:	6121      	str	r1, [r4, #16]
 800fd2e:	b913      	cbnz	r3, 800fd36 <_printf_float+0x18e>
 800fd30:	6822      	ldr	r2, [r4, #0]
 800fd32:	07d0      	lsls	r0, r2, #31
 800fd34:	d502      	bpl.n	800fd3c <_printf_float+0x194>
 800fd36:	3301      	adds	r3, #1
 800fd38:	440b      	add	r3, r1
 800fd3a:	6123      	str	r3, [r4, #16]
 800fd3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd3e:	f04f 0900 	mov.w	r9, #0
 800fd42:	e7db      	b.n	800fcfc <_printf_float+0x154>
 800fd44:	b913      	cbnz	r3, 800fd4c <_printf_float+0x1a4>
 800fd46:	6822      	ldr	r2, [r4, #0]
 800fd48:	07d2      	lsls	r2, r2, #31
 800fd4a:	d501      	bpl.n	800fd50 <_printf_float+0x1a8>
 800fd4c:	3302      	adds	r3, #2
 800fd4e:	e7f4      	b.n	800fd3a <_printf_float+0x192>
 800fd50:	2301      	movs	r3, #1
 800fd52:	e7f2      	b.n	800fd3a <_printf_float+0x192>
 800fd54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	db05      	blt.n	800fd6a <_printf_float+0x1c2>
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	6121      	str	r1, [r4, #16]
 800fd62:	07d8      	lsls	r0, r3, #31
 800fd64:	d5ea      	bpl.n	800fd3c <_printf_float+0x194>
 800fd66:	1c4b      	adds	r3, r1, #1
 800fd68:	e7e7      	b.n	800fd3a <_printf_float+0x192>
 800fd6a:	2900      	cmp	r1, #0
 800fd6c:	bfd4      	ite	le
 800fd6e:	f1c1 0202 	rsble	r2, r1, #2
 800fd72:	2201      	movgt	r2, #1
 800fd74:	4413      	add	r3, r2
 800fd76:	e7e0      	b.n	800fd3a <_printf_float+0x192>
 800fd78:	6823      	ldr	r3, [r4, #0]
 800fd7a:	055a      	lsls	r2, r3, #21
 800fd7c:	d407      	bmi.n	800fd8e <_printf_float+0x1e6>
 800fd7e:	6923      	ldr	r3, [r4, #16]
 800fd80:	4642      	mov	r2, r8
 800fd82:	4631      	mov	r1, r6
 800fd84:	4628      	mov	r0, r5
 800fd86:	47b8      	blx	r7
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d12b      	bne.n	800fde4 <_printf_float+0x23c>
 800fd8c:	e767      	b.n	800fc5e <_printf_float+0xb6>
 800fd8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd92:	f240 80dd 	bls.w	800ff50 <_printf_float+0x3a8>
 800fd96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f7f0 fec3 	bl	8000b28 <__aeabi_dcmpeq>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d033      	beq.n	800fe0e <_printf_float+0x266>
 800fda6:	4a37      	ldr	r2, [pc, #220]	@ (800fe84 <_printf_float+0x2dc>)
 800fda8:	2301      	movs	r3, #1
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4628      	mov	r0, r5
 800fdae:	47b8      	blx	r7
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f43f af54 	beq.w	800fc5e <_printf_float+0xb6>
 800fdb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdba:	4543      	cmp	r3, r8
 800fdbc:	db02      	blt.n	800fdc4 <_printf_float+0x21c>
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	07d8      	lsls	r0, r3, #31
 800fdc2:	d50f      	bpl.n	800fde4 <_printf_float+0x23c>
 800fdc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdc8:	4631      	mov	r1, r6
 800fdca:	4628      	mov	r0, r5
 800fdcc:	47b8      	blx	r7
 800fdce:	3001      	adds	r0, #1
 800fdd0:	f43f af45 	beq.w	800fc5e <_printf_float+0xb6>
 800fdd4:	f04f 0900 	mov.w	r9, #0
 800fdd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fddc:	f104 0a1a 	add.w	sl, r4, #26
 800fde0:	45c8      	cmp	r8, r9
 800fde2:	dc09      	bgt.n	800fdf8 <_printf_float+0x250>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	079b      	lsls	r3, r3, #30
 800fde8:	f100 8103 	bmi.w	800fff2 <_printf_float+0x44a>
 800fdec:	68e0      	ldr	r0, [r4, #12]
 800fdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdf0:	4298      	cmp	r0, r3
 800fdf2:	bfb8      	it	lt
 800fdf4:	4618      	movlt	r0, r3
 800fdf6:	e734      	b.n	800fc62 <_printf_float+0xba>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	f43f af2b 	beq.w	800fc5e <_printf_float+0xb6>
 800fe08:	f109 0901 	add.w	r9, r9, #1
 800fe0c:	e7e8      	b.n	800fde0 <_printf_float+0x238>
 800fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	dc39      	bgt.n	800fe88 <_printf_float+0x2e0>
 800fe14:	4a1b      	ldr	r2, [pc, #108]	@ (800fe84 <_printf_float+0x2dc>)
 800fe16:	2301      	movs	r3, #1
 800fe18:	4631      	mov	r1, r6
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	47b8      	blx	r7
 800fe1e:	3001      	adds	r0, #1
 800fe20:	f43f af1d 	beq.w	800fc5e <_printf_float+0xb6>
 800fe24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe28:	ea59 0303 	orrs.w	r3, r9, r3
 800fe2c:	d102      	bne.n	800fe34 <_printf_float+0x28c>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	07d9      	lsls	r1, r3, #31
 800fe32:	d5d7      	bpl.n	800fde4 <_printf_float+0x23c>
 800fe34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b8      	blx	r7
 800fe3e:	3001      	adds	r0, #1
 800fe40:	f43f af0d 	beq.w	800fc5e <_printf_float+0xb6>
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	f104 0b1a 	add.w	fp, r4, #26
 800fe4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4e:	425b      	negs	r3, r3
 800fe50:	4553      	cmp	r3, sl
 800fe52:	dc01      	bgt.n	800fe58 <_printf_float+0x2b0>
 800fe54:	464b      	mov	r3, r9
 800fe56:	e793      	b.n	800fd80 <_printf_float+0x1d8>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	465a      	mov	r2, fp
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4628      	mov	r0, r5
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	f43f aefb 	beq.w	800fc5e <_printf_float+0xb6>
 800fe68:	f10a 0a01 	add.w	sl, sl, #1
 800fe6c:	e7ee      	b.n	800fe4c <_printf_float+0x2a4>
 800fe6e:	bf00      	nop
 800fe70:	7fefffff 	.word	0x7fefffff
 800fe74:	080153f8 	.word	0x080153f8
 800fe78:	080153f4 	.word	0x080153f4
 800fe7c:	08015400 	.word	0x08015400
 800fe80:	080153fc 	.word	0x080153fc
 800fe84:	08015404 	.word	0x08015404
 800fe88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe8e:	4553      	cmp	r3, sl
 800fe90:	bfa8      	it	ge
 800fe92:	4653      	movge	r3, sl
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	4699      	mov	r9, r3
 800fe98:	dc36      	bgt.n	800ff08 <_printf_float+0x360>
 800fe9a:	f04f 0b00 	mov.w	fp, #0
 800fe9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fea2:	f104 021a 	add.w	r2, r4, #26
 800fea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fea8:	9306      	str	r3, [sp, #24]
 800feaa:	eba3 0309 	sub.w	r3, r3, r9
 800feae:	455b      	cmp	r3, fp
 800feb0:	dc31      	bgt.n	800ff16 <_printf_float+0x36e>
 800feb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb4:	459a      	cmp	sl, r3
 800feb6:	dc3a      	bgt.n	800ff2e <_printf_float+0x386>
 800feb8:	6823      	ldr	r3, [r4, #0]
 800feba:	07da      	lsls	r2, r3, #31
 800febc:	d437      	bmi.n	800ff2e <_printf_float+0x386>
 800febe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec0:	ebaa 0903 	sub.w	r9, sl, r3
 800fec4:	9b06      	ldr	r3, [sp, #24]
 800fec6:	ebaa 0303 	sub.w	r3, sl, r3
 800feca:	4599      	cmp	r9, r3
 800fecc:	bfa8      	it	ge
 800fece:	4699      	movge	r9, r3
 800fed0:	f1b9 0f00 	cmp.w	r9, #0
 800fed4:	dc33      	bgt.n	800ff3e <_printf_float+0x396>
 800fed6:	f04f 0800 	mov.w	r8, #0
 800feda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fede:	f104 0b1a 	add.w	fp, r4, #26
 800fee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee4:	ebaa 0303 	sub.w	r3, sl, r3
 800fee8:	eba3 0309 	sub.w	r3, r3, r9
 800feec:	4543      	cmp	r3, r8
 800feee:	f77f af79 	ble.w	800fde4 <_printf_float+0x23c>
 800fef2:	2301      	movs	r3, #1
 800fef4:	465a      	mov	r2, fp
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	47b8      	blx	r7
 800fefc:	3001      	adds	r0, #1
 800fefe:	f43f aeae 	beq.w	800fc5e <_printf_float+0xb6>
 800ff02:	f108 0801 	add.w	r8, r8, #1
 800ff06:	e7ec      	b.n	800fee2 <_printf_float+0x33a>
 800ff08:	4642      	mov	r2, r8
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	47b8      	blx	r7
 800ff10:	3001      	adds	r0, #1
 800ff12:	d1c2      	bne.n	800fe9a <_printf_float+0x2f2>
 800ff14:	e6a3      	b.n	800fc5e <_printf_float+0xb6>
 800ff16:	2301      	movs	r3, #1
 800ff18:	4631      	mov	r1, r6
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	9206      	str	r2, [sp, #24]
 800ff1e:	47b8      	blx	r7
 800ff20:	3001      	adds	r0, #1
 800ff22:	f43f ae9c 	beq.w	800fc5e <_printf_float+0xb6>
 800ff26:	9a06      	ldr	r2, [sp, #24]
 800ff28:	f10b 0b01 	add.w	fp, fp, #1
 800ff2c:	e7bb      	b.n	800fea6 <_printf_float+0x2fe>
 800ff2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff32:	4631      	mov	r1, r6
 800ff34:	4628      	mov	r0, r5
 800ff36:	47b8      	blx	r7
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d1c0      	bne.n	800febe <_printf_float+0x316>
 800ff3c:	e68f      	b.n	800fc5e <_printf_float+0xb6>
 800ff3e:	9a06      	ldr	r2, [sp, #24]
 800ff40:	464b      	mov	r3, r9
 800ff42:	4442      	add	r2, r8
 800ff44:	4631      	mov	r1, r6
 800ff46:	4628      	mov	r0, r5
 800ff48:	47b8      	blx	r7
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	d1c3      	bne.n	800fed6 <_printf_float+0x32e>
 800ff4e:	e686      	b.n	800fc5e <_printf_float+0xb6>
 800ff50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff54:	f1ba 0f01 	cmp.w	sl, #1
 800ff58:	dc01      	bgt.n	800ff5e <_printf_float+0x3b6>
 800ff5a:	07db      	lsls	r3, r3, #31
 800ff5c:	d536      	bpl.n	800ffcc <_printf_float+0x424>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4642      	mov	r2, r8
 800ff62:	4631      	mov	r1, r6
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b8      	blx	r7
 800ff68:	3001      	adds	r0, #1
 800ff6a:	f43f ae78 	beq.w	800fc5e <_printf_float+0xb6>
 800ff6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b8      	blx	r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	f43f ae70 	beq.w	800fc5e <_printf_float+0xb6>
 800ff7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff82:	2200      	movs	r2, #0
 800ff84:	2300      	movs	r3, #0
 800ff86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff8a:	f7f0 fdcd 	bl	8000b28 <__aeabi_dcmpeq>
 800ff8e:	b9c0      	cbnz	r0, 800ffc2 <_printf_float+0x41a>
 800ff90:	4653      	mov	r3, sl
 800ff92:	f108 0201 	add.w	r2, r8, #1
 800ff96:	4631      	mov	r1, r6
 800ff98:	4628      	mov	r0, r5
 800ff9a:	47b8      	blx	r7
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d10c      	bne.n	800ffba <_printf_float+0x412>
 800ffa0:	e65d      	b.n	800fc5e <_printf_float+0xb6>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	465a      	mov	r2, fp
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	47b8      	blx	r7
 800ffac:	3001      	adds	r0, #1
 800ffae:	f43f ae56 	beq.w	800fc5e <_printf_float+0xb6>
 800ffb2:	f108 0801 	add.w	r8, r8, #1
 800ffb6:	45d0      	cmp	r8, sl
 800ffb8:	dbf3      	blt.n	800ffa2 <_printf_float+0x3fa>
 800ffba:	464b      	mov	r3, r9
 800ffbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ffc0:	e6df      	b.n	800fd82 <_printf_float+0x1da>
 800ffc2:	f04f 0800 	mov.w	r8, #0
 800ffc6:	f104 0b1a 	add.w	fp, r4, #26
 800ffca:	e7f4      	b.n	800ffb6 <_printf_float+0x40e>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4642      	mov	r2, r8
 800ffd0:	e7e1      	b.n	800ff96 <_printf_float+0x3ee>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	464a      	mov	r2, r9
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4628      	mov	r0, r5
 800ffda:	47b8      	blx	r7
 800ffdc:	3001      	adds	r0, #1
 800ffde:	f43f ae3e 	beq.w	800fc5e <_printf_float+0xb6>
 800ffe2:	f108 0801 	add.w	r8, r8, #1
 800ffe6:	68e3      	ldr	r3, [r4, #12]
 800ffe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ffea:	1a5b      	subs	r3, r3, r1
 800ffec:	4543      	cmp	r3, r8
 800ffee:	dcf0      	bgt.n	800ffd2 <_printf_float+0x42a>
 800fff0:	e6fc      	b.n	800fdec <_printf_float+0x244>
 800fff2:	f04f 0800 	mov.w	r8, #0
 800fff6:	f104 0919 	add.w	r9, r4, #25
 800fffa:	e7f4      	b.n	800ffe6 <_printf_float+0x43e>

0800fffc <_printf_common>:
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	4616      	mov	r6, r2
 8010002:	4698      	mov	r8, r3
 8010004:	688a      	ldr	r2, [r1, #8]
 8010006:	690b      	ldr	r3, [r1, #16]
 8010008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801000c:	4293      	cmp	r3, r2
 801000e:	bfb8      	it	lt
 8010010:	4613      	movlt	r3, r2
 8010012:	6033      	str	r3, [r6, #0]
 8010014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010018:	4607      	mov	r7, r0
 801001a:	460c      	mov	r4, r1
 801001c:	b10a      	cbz	r2, 8010022 <_printf_common+0x26>
 801001e:	3301      	adds	r3, #1
 8010020:	6033      	str	r3, [r6, #0]
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	0699      	lsls	r1, r3, #26
 8010026:	bf42      	ittt	mi
 8010028:	6833      	ldrmi	r3, [r6, #0]
 801002a:	3302      	addmi	r3, #2
 801002c:	6033      	strmi	r3, [r6, #0]
 801002e:	6825      	ldr	r5, [r4, #0]
 8010030:	f015 0506 	ands.w	r5, r5, #6
 8010034:	d106      	bne.n	8010044 <_printf_common+0x48>
 8010036:	f104 0a19 	add.w	sl, r4, #25
 801003a:	68e3      	ldr	r3, [r4, #12]
 801003c:	6832      	ldr	r2, [r6, #0]
 801003e:	1a9b      	subs	r3, r3, r2
 8010040:	42ab      	cmp	r3, r5
 8010042:	dc26      	bgt.n	8010092 <_printf_common+0x96>
 8010044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010048:	6822      	ldr	r2, [r4, #0]
 801004a:	3b00      	subs	r3, #0
 801004c:	bf18      	it	ne
 801004e:	2301      	movne	r3, #1
 8010050:	0692      	lsls	r2, r2, #26
 8010052:	d42b      	bmi.n	80100ac <_printf_common+0xb0>
 8010054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010058:	4641      	mov	r1, r8
 801005a:	4638      	mov	r0, r7
 801005c:	47c8      	blx	r9
 801005e:	3001      	adds	r0, #1
 8010060:	d01e      	beq.n	80100a0 <_printf_common+0xa4>
 8010062:	6823      	ldr	r3, [r4, #0]
 8010064:	6922      	ldr	r2, [r4, #16]
 8010066:	f003 0306 	and.w	r3, r3, #6
 801006a:	2b04      	cmp	r3, #4
 801006c:	bf02      	ittt	eq
 801006e:	68e5      	ldreq	r5, [r4, #12]
 8010070:	6833      	ldreq	r3, [r6, #0]
 8010072:	1aed      	subeq	r5, r5, r3
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	bf0c      	ite	eq
 8010078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801007c:	2500      	movne	r5, #0
 801007e:	4293      	cmp	r3, r2
 8010080:	bfc4      	itt	gt
 8010082:	1a9b      	subgt	r3, r3, r2
 8010084:	18ed      	addgt	r5, r5, r3
 8010086:	2600      	movs	r6, #0
 8010088:	341a      	adds	r4, #26
 801008a:	42b5      	cmp	r5, r6
 801008c:	d11a      	bne.n	80100c4 <_printf_common+0xc8>
 801008e:	2000      	movs	r0, #0
 8010090:	e008      	b.n	80100a4 <_printf_common+0xa8>
 8010092:	2301      	movs	r3, #1
 8010094:	4652      	mov	r2, sl
 8010096:	4641      	mov	r1, r8
 8010098:	4638      	mov	r0, r7
 801009a:	47c8      	blx	r9
 801009c:	3001      	adds	r0, #1
 801009e:	d103      	bne.n	80100a8 <_printf_common+0xac>
 80100a0:	f04f 30ff 	mov.w	r0, #4294967295
 80100a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a8:	3501      	adds	r5, #1
 80100aa:	e7c6      	b.n	801003a <_printf_common+0x3e>
 80100ac:	18e1      	adds	r1, r4, r3
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	2030      	movs	r0, #48	@ 0x30
 80100b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100b6:	4422      	add	r2, r4
 80100b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100c0:	3302      	adds	r3, #2
 80100c2:	e7c7      	b.n	8010054 <_printf_common+0x58>
 80100c4:	2301      	movs	r3, #1
 80100c6:	4622      	mov	r2, r4
 80100c8:	4641      	mov	r1, r8
 80100ca:	4638      	mov	r0, r7
 80100cc:	47c8      	blx	r9
 80100ce:	3001      	adds	r0, #1
 80100d0:	d0e6      	beq.n	80100a0 <_printf_common+0xa4>
 80100d2:	3601      	adds	r6, #1
 80100d4:	e7d9      	b.n	801008a <_printf_common+0x8e>
	...

080100d8 <_printf_i>:
 80100d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100dc:	7e0f      	ldrb	r7, [r1, #24]
 80100de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100e0:	2f78      	cmp	r7, #120	@ 0x78
 80100e2:	4691      	mov	r9, r2
 80100e4:	4680      	mov	r8, r0
 80100e6:	460c      	mov	r4, r1
 80100e8:	469a      	mov	sl, r3
 80100ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100ee:	d807      	bhi.n	8010100 <_printf_i+0x28>
 80100f0:	2f62      	cmp	r7, #98	@ 0x62
 80100f2:	d80a      	bhi.n	801010a <_printf_i+0x32>
 80100f4:	2f00      	cmp	r7, #0
 80100f6:	f000 80d1 	beq.w	801029c <_printf_i+0x1c4>
 80100fa:	2f58      	cmp	r7, #88	@ 0x58
 80100fc:	f000 80b8 	beq.w	8010270 <_printf_i+0x198>
 8010100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010108:	e03a      	b.n	8010180 <_printf_i+0xa8>
 801010a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801010e:	2b15      	cmp	r3, #21
 8010110:	d8f6      	bhi.n	8010100 <_printf_i+0x28>
 8010112:	a101      	add	r1, pc, #4	@ (adr r1, 8010118 <_printf_i+0x40>)
 8010114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010118:	08010171 	.word	0x08010171
 801011c:	08010185 	.word	0x08010185
 8010120:	08010101 	.word	0x08010101
 8010124:	08010101 	.word	0x08010101
 8010128:	08010101 	.word	0x08010101
 801012c:	08010101 	.word	0x08010101
 8010130:	08010185 	.word	0x08010185
 8010134:	08010101 	.word	0x08010101
 8010138:	08010101 	.word	0x08010101
 801013c:	08010101 	.word	0x08010101
 8010140:	08010101 	.word	0x08010101
 8010144:	08010283 	.word	0x08010283
 8010148:	080101af 	.word	0x080101af
 801014c:	0801023d 	.word	0x0801023d
 8010150:	08010101 	.word	0x08010101
 8010154:	08010101 	.word	0x08010101
 8010158:	080102a5 	.word	0x080102a5
 801015c:	08010101 	.word	0x08010101
 8010160:	080101af 	.word	0x080101af
 8010164:	08010101 	.word	0x08010101
 8010168:	08010101 	.word	0x08010101
 801016c:	08010245 	.word	0x08010245
 8010170:	6833      	ldr	r3, [r6, #0]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6032      	str	r2, [r6, #0]
 8010178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801017c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010180:	2301      	movs	r3, #1
 8010182:	e09c      	b.n	80102be <_printf_i+0x1e6>
 8010184:	6833      	ldr	r3, [r6, #0]
 8010186:	6820      	ldr	r0, [r4, #0]
 8010188:	1d19      	adds	r1, r3, #4
 801018a:	6031      	str	r1, [r6, #0]
 801018c:	0606      	lsls	r6, r0, #24
 801018e:	d501      	bpl.n	8010194 <_printf_i+0xbc>
 8010190:	681d      	ldr	r5, [r3, #0]
 8010192:	e003      	b.n	801019c <_printf_i+0xc4>
 8010194:	0645      	lsls	r5, r0, #25
 8010196:	d5fb      	bpl.n	8010190 <_printf_i+0xb8>
 8010198:	f9b3 5000 	ldrsh.w	r5, [r3]
 801019c:	2d00      	cmp	r5, #0
 801019e:	da03      	bge.n	80101a8 <_printf_i+0xd0>
 80101a0:	232d      	movs	r3, #45	@ 0x2d
 80101a2:	426d      	negs	r5, r5
 80101a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101a8:	4858      	ldr	r0, [pc, #352]	@ (801030c <_printf_i+0x234>)
 80101aa:	230a      	movs	r3, #10
 80101ac:	e011      	b.n	80101d2 <_printf_i+0xfa>
 80101ae:	6821      	ldr	r1, [r4, #0]
 80101b0:	6833      	ldr	r3, [r6, #0]
 80101b2:	0608      	lsls	r0, r1, #24
 80101b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80101b8:	d402      	bmi.n	80101c0 <_printf_i+0xe8>
 80101ba:	0649      	lsls	r1, r1, #25
 80101bc:	bf48      	it	mi
 80101be:	b2ad      	uxthmi	r5, r5
 80101c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80101c2:	4852      	ldr	r0, [pc, #328]	@ (801030c <_printf_i+0x234>)
 80101c4:	6033      	str	r3, [r6, #0]
 80101c6:	bf14      	ite	ne
 80101c8:	230a      	movne	r3, #10
 80101ca:	2308      	moveq	r3, #8
 80101cc:	2100      	movs	r1, #0
 80101ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101d2:	6866      	ldr	r6, [r4, #4]
 80101d4:	60a6      	str	r6, [r4, #8]
 80101d6:	2e00      	cmp	r6, #0
 80101d8:	db05      	blt.n	80101e6 <_printf_i+0x10e>
 80101da:	6821      	ldr	r1, [r4, #0]
 80101dc:	432e      	orrs	r6, r5
 80101de:	f021 0104 	bic.w	r1, r1, #4
 80101e2:	6021      	str	r1, [r4, #0]
 80101e4:	d04b      	beq.n	801027e <_printf_i+0x1a6>
 80101e6:	4616      	mov	r6, r2
 80101e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80101ec:	fb03 5711 	mls	r7, r3, r1, r5
 80101f0:	5dc7      	ldrb	r7, [r0, r7]
 80101f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101f6:	462f      	mov	r7, r5
 80101f8:	42bb      	cmp	r3, r7
 80101fa:	460d      	mov	r5, r1
 80101fc:	d9f4      	bls.n	80101e8 <_printf_i+0x110>
 80101fe:	2b08      	cmp	r3, #8
 8010200:	d10b      	bne.n	801021a <_printf_i+0x142>
 8010202:	6823      	ldr	r3, [r4, #0]
 8010204:	07df      	lsls	r7, r3, #31
 8010206:	d508      	bpl.n	801021a <_printf_i+0x142>
 8010208:	6923      	ldr	r3, [r4, #16]
 801020a:	6861      	ldr	r1, [r4, #4]
 801020c:	4299      	cmp	r1, r3
 801020e:	bfde      	ittt	le
 8010210:	2330      	movle	r3, #48	@ 0x30
 8010212:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010216:	f106 36ff 	addle.w	r6, r6, #4294967295
 801021a:	1b92      	subs	r2, r2, r6
 801021c:	6122      	str	r2, [r4, #16]
 801021e:	f8cd a000 	str.w	sl, [sp]
 8010222:	464b      	mov	r3, r9
 8010224:	aa03      	add	r2, sp, #12
 8010226:	4621      	mov	r1, r4
 8010228:	4640      	mov	r0, r8
 801022a:	f7ff fee7 	bl	800fffc <_printf_common>
 801022e:	3001      	adds	r0, #1
 8010230:	d14a      	bne.n	80102c8 <_printf_i+0x1f0>
 8010232:	f04f 30ff 	mov.w	r0, #4294967295
 8010236:	b004      	add	sp, #16
 8010238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	f043 0320 	orr.w	r3, r3, #32
 8010242:	6023      	str	r3, [r4, #0]
 8010244:	4832      	ldr	r0, [pc, #200]	@ (8010310 <_printf_i+0x238>)
 8010246:	2778      	movs	r7, #120	@ 0x78
 8010248:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	6831      	ldr	r1, [r6, #0]
 8010250:	061f      	lsls	r7, r3, #24
 8010252:	f851 5b04 	ldr.w	r5, [r1], #4
 8010256:	d402      	bmi.n	801025e <_printf_i+0x186>
 8010258:	065f      	lsls	r7, r3, #25
 801025a:	bf48      	it	mi
 801025c:	b2ad      	uxthmi	r5, r5
 801025e:	6031      	str	r1, [r6, #0]
 8010260:	07d9      	lsls	r1, r3, #31
 8010262:	bf44      	itt	mi
 8010264:	f043 0320 	orrmi.w	r3, r3, #32
 8010268:	6023      	strmi	r3, [r4, #0]
 801026a:	b11d      	cbz	r5, 8010274 <_printf_i+0x19c>
 801026c:	2310      	movs	r3, #16
 801026e:	e7ad      	b.n	80101cc <_printf_i+0xf4>
 8010270:	4826      	ldr	r0, [pc, #152]	@ (801030c <_printf_i+0x234>)
 8010272:	e7e9      	b.n	8010248 <_printf_i+0x170>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	f023 0320 	bic.w	r3, r3, #32
 801027a:	6023      	str	r3, [r4, #0]
 801027c:	e7f6      	b.n	801026c <_printf_i+0x194>
 801027e:	4616      	mov	r6, r2
 8010280:	e7bd      	b.n	80101fe <_printf_i+0x126>
 8010282:	6833      	ldr	r3, [r6, #0]
 8010284:	6825      	ldr	r5, [r4, #0]
 8010286:	6961      	ldr	r1, [r4, #20]
 8010288:	1d18      	adds	r0, r3, #4
 801028a:	6030      	str	r0, [r6, #0]
 801028c:	062e      	lsls	r6, r5, #24
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	d501      	bpl.n	8010296 <_printf_i+0x1be>
 8010292:	6019      	str	r1, [r3, #0]
 8010294:	e002      	b.n	801029c <_printf_i+0x1c4>
 8010296:	0668      	lsls	r0, r5, #25
 8010298:	d5fb      	bpl.n	8010292 <_printf_i+0x1ba>
 801029a:	8019      	strh	r1, [r3, #0]
 801029c:	2300      	movs	r3, #0
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	4616      	mov	r6, r2
 80102a2:	e7bc      	b.n	801021e <_printf_i+0x146>
 80102a4:	6833      	ldr	r3, [r6, #0]
 80102a6:	1d1a      	adds	r2, r3, #4
 80102a8:	6032      	str	r2, [r6, #0]
 80102aa:	681e      	ldr	r6, [r3, #0]
 80102ac:	6862      	ldr	r2, [r4, #4]
 80102ae:	2100      	movs	r1, #0
 80102b0:	4630      	mov	r0, r6
 80102b2:	f7ef ffbd 	bl	8000230 <memchr>
 80102b6:	b108      	cbz	r0, 80102bc <_printf_i+0x1e4>
 80102b8:	1b80      	subs	r0, r0, r6
 80102ba:	6060      	str	r0, [r4, #4]
 80102bc:	6863      	ldr	r3, [r4, #4]
 80102be:	6123      	str	r3, [r4, #16]
 80102c0:	2300      	movs	r3, #0
 80102c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102c6:	e7aa      	b.n	801021e <_printf_i+0x146>
 80102c8:	6923      	ldr	r3, [r4, #16]
 80102ca:	4632      	mov	r2, r6
 80102cc:	4649      	mov	r1, r9
 80102ce:	4640      	mov	r0, r8
 80102d0:	47d0      	blx	sl
 80102d2:	3001      	adds	r0, #1
 80102d4:	d0ad      	beq.n	8010232 <_printf_i+0x15a>
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	079b      	lsls	r3, r3, #30
 80102da:	d413      	bmi.n	8010304 <_printf_i+0x22c>
 80102dc:	68e0      	ldr	r0, [r4, #12]
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	4298      	cmp	r0, r3
 80102e2:	bfb8      	it	lt
 80102e4:	4618      	movlt	r0, r3
 80102e6:	e7a6      	b.n	8010236 <_printf_i+0x15e>
 80102e8:	2301      	movs	r3, #1
 80102ea:	4632      	mov	r2, r6
 80102ec:	4649      	mov	r1, r9
 80102ee:	4640      	mov	r0, r8
 80102f0:	47d0      	blx	sl
 80102f2:	3001      	adds	r0, #1
 80102f4:	d09d      	beq.n	8010232 <_printf_i+0x15a>
 80102f6:	3501      	adds	r5, #1
 80102f8:	68e3      	ldr	r3, [r4, #12]
 80102fa:	9903      	ldr	r1, [sp, #12]
 80102fc:	1a5b      	subs	r3, r3, r1
 80102fe:	42ab      	cmp	r3, r5
 8010300:	dcf2      	bgt.n	80102e8 <_printf_i+0x210>
 8010302:	e7eb      	b.n	80102dc <_printf_i+0x204>
 8010304:	2500      	movs	r5, #0
 8010306:	f104 0619 	add.w	r6, r4, #25
 801030a:	e7f5      	b.n	80102f8 <_printf_i+0x220>
 801030c:	08015406 	.word	0x08015406
 8010310:	08015417 	.word	0x08015417

08010314 <std>:
 8010314:	2300      	movs	r3, #0
 8010316:	b510      	push	{r4, lr}
 8010318:	4604      	mov	r4, r0
 801031a:	e9c0 3300 	strd	r3, r3, [r0]
 801031e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010322:	6083      	str	r3, [r0, #8]
 8010324:	8181      	strh	r1, [r0, #12]
 8010326:	6643      	str	r3, [r0, #100]	@ 0x64
 8010328:	81c2      	strh	r2, [r0, #14]
 801032a:	6183      	str	r3, [r0, #24]
 801032c:	4619      	mov	r1, r3
 801032e:	2208      	movs	r2, #8
 8010330:	305c      	adds	r0, #92	@ 0x5c
 8010332:	f000 f9b5 	bl	80106a0 <memset>
 8010336:	4b0d      	ldr	r3, [pc, #52]	@ (801036c <std+0x58>)
 8010338:	6263      	str	r3, [r4, #36]	@ 0x24
 801033a:	4b0d      	ldr	r3, [pc, #52]	@ (8010370 <std+0x5c>)
 801033c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801033e:	4b0d      	ldr	r3, [pc, #52]	@ (8010374 <std+0x60>)
 8010340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010342:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <std+0x64>)
 8010344:	6323      	str	r3, [r4, #48]	@ 0x30
 8010346:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <std+0x68>)
 8010348:	6224      	str	r4, [r4, #32]
 801034a:	429c      	cmp	r4, r3
 801034c:	d006      	beq.n	801035c <std+0x48>
 801034e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010352:	4294      	cmp	r4, r2
 8010354:	d002      	beq.n	801035c <std+0x48>
 8010356:	33d0      	adds	r3, #208	@ 0xd0
 8010358:	429c      	cmp	r4, r3
 801035a:	d105      	bne.n	8010368 <std+0x54>
 801035c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010364:	f000 bae0 	b.w	8010928 <__retarget_lock_init_recursive>
 8010368:	bd10      	pop	{r4, pc}
 801036a:	bf00      	nop
 801036c:	0801056d 	.word	0x0801056d
 8010370:	0801058f 	.word	0x0801058f
 8010374:	080105c7 	.word	0x080105c7
 8010378:	080105eb 	.word	0x080105eb
 801037c:	20007044 	.word	0x20007044

08010380 <stdio_exit_handler>:
 8010380:	4a02      	ldr	r2, [pc, #8]	@ (801038c <stdio_exit_handler+0xc>)
 8010382:	4903      	ldr	r1, [pc, #12]	@ (8010390 <stdio_exit_handler+0x10>)
 8010384:	4803      	ldr	r0, [pc, #12]	@ (8010394 <stdio_exit_handler+0x14>)
 8010386:	f000 b869 	b.w	801045c <_fwalk_sglue>
 801038a:	bf00      	nop
 801038c:	2000004c 	.word	0x2000004c
 8010390:	080123c5 	.word	0x080123c5
 8010394:	2000005c 	.word	0x2000005c

08010398 <cleanup_stdio>:
 8010398:	6841      	ldr	r1, [r0, #4]
 801039a:	4b0c      	ldr	r3, [pc, #48]	@ (80103cc <cleanup_stdio+0x34>)
 801039c:	4299      	cmp	r1, r3
 801039e:	b510      	push	{r4, lr}
 80103a0:	4604      	mov	r4, r0
 80103a2:	d001      	beq.n	80103a8 <cleanup_stdio+0x10>
 80103a4:	f002 f80e 	bl	80123c4 <_fflush_r>
 80103a8:	68a1      	ldr	r1, [r4, #8]
 80103aa:	4b09      	ldr	r3, [pc, #36]	@ (80103d0 <cleanup_stdio+0x38>)
 80103ac:	4299      	cmp	r1, r3
 80103ae:	d002      	beq.n	80103b6 <cleanup_stdio+0x1e>
 80103b0:	4620      	mov	r0, r4
 80103b2:	f002 f807 	bl	80123c4 <_fflush_r>
 80103b6:	68e1      	ldr	r1, [r4, #12]
 80103b8:	4b06      	ldr	r3, [pc, #24]	@ (80103d4 <cleanup_stdio+0x3c>)
 80103ba:	4299      	cmp	r1, r3
 80103bc:	d004      	beq.n	80103c8 <cleanup_stdio+0x30>
 80103be:	4620      	mov	r0, r4
 80103c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c4:	f001 bffe 	b.w	80123c4 <_fflush_r>
 80103c8:	bd10      	pop	{r4, pc}
 80103ca:	bf00      	nop
 80103cc:	20007044 	.word	0x20007044
 80103d0:	200070ac 	.word	0x200070ac
 80103d4:	20007114 	.word	0x20007114

080103d8 <global_stdio_init.part.0>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	4b0b      	ldr	r3, [pc, #44]	@ (8010408 <global_stdio_init.part.0+0x30>)
 80103dc:	4c0b      	ldr	r4, [pc, #44]	@ (801040c <global_stdio_init.part.0+0x34>)
 80103de:	4a0c      	ldr	r2, [pc, #48]	@ (8010410 <global_stdio_init.part.0+0x38>)
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	4620      	mov	r0, r4
 80103e4:	2200      	movs	r2, #0
 80103e6:	2104      	movs	r1, #4
 80103e8:	f7ff ff94 	bl	8010314 <std>
 80103ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103f0:	2201      	movs	r2, #1
 80103f2:	2109      	movs	r1, #9
 80103f4:	f7ff ff8e 	bl	8010314 <std>
 80103f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80103fc:	2202      	movs	r2, #2
 80103fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010402:	2112      	movs	r1, #18
 8010404:	f7ff bf86 	b.w	8010314 <std>
 8010408:	2000717c 	.word	0x2000717c
 801040c:	20007044 	.word	0x20007044
 8010410:	08010381 	.word	0x08010381

08010414 <__sfp_lock_acquire>:
 8010414:	4801      	ldr	r0, [pc, #4]	@ (801041c <__sfp_lock_acquire+0x8>)
 8010416:	f000 ba88 	b.w	801092a <__retarget_lock_acquire_recursive>
 801041a:	bf00      	nop
 801041c:	20007185 	.word	0x20007185

08010420 <__sfp_lock_release>:
 8010420:	4801      	ldr	r0, [pc, #4]	@ (8010428 <__sfp_lock_release+0x8>)
 8010422:	f000 ba83 	b.w	801092c <__retarget_lock_release_recursive>
 8010426:	bf00      	nop
 8010428:	20007185 	.word	0x20007185

0801042c <__sinit>:
 801042c:	b510      	push	{r4, lr}
 801042e:	4604      	mov	r4, r0
 8010430:	f7ff fff0 	bl	8010414 <__sfp_lock_acquire>
 8010434:	6a23      	ldr	r3, [r4, #32]
 8010436:	b11b      	cbz	r3, 8010440 <__sinit+0x14>
 8010438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801043c:	f7ff bff0 	b.w	8010420 <__sfp_lock_release>
 8010440:	4b04      	ldr	r3, [pc, #16]	@ (8010454 <__sinit+0x28>)
 8010442:	6223      	str	r3, [r4, #32]
 8010444:	4b04      	ldr	r3, [pc, #16]	@ (8010458 <__sinit+0x2c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1f5      	bne.n	8010438 <__sinit+0xc>
 801044c:	f7ff ffc4 	bl	80103d8 <global_stdio_init.part.0>
 8010450:	e7f2      	b.n	8010438 <__sinit+0xc>
 8010452:	bf00      	nop
 8010454:	08010399 	.word	0x08010399
 8010458:	2000717c 	.word	0x2000717c

0801045c <_fwalk_sglue>:
 801045c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010460:	4607      	mov	r7, r0
 8010462:	4688      	mov	r8, r1
 8010464:	4614      	mov	r4, r2
 8010466:	2600      	movs	r6, #0
 8010468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801046c:	f1b9 0901 	subs.w	r9, r9, #1
 8010470:	d505      	bpl.n	801047e <_fwalk_sglue+0x22>
 8010472:	6824      	ldr	r4, [r4, #0]
 8010474:	2c00      	cmp	r4, #0
 8010476:	d1f7      	bne.n	8010468 <_fwalk_sglue+0xc>
 8010478:	4630      	mov	r0, r6
 801047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047e:	89ab      	ldrh	r3, [r5, #12]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d907      	bls.n	8010494 <_fwalk_sglue+0x38>
 8010484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010488:	3301      	adds	r3, #1
 801048a:	d003      	beq.n	8010494 <_fwalk_sglue+0x38>
 801048c:	4629      	mov	r1, r5
 801048e:	4638      	mov	r0, r7
 8010490:	47c0      	blx	r8
 8010492:	4306      	orrs	r6, r0
 8010494:	3568      	adds	r5, #104	@ 0x68
 8010496:	e7e9      	b.n	801046c <_fwalk_sglue+0x10>

08010498 <iprintf>:
 8010498:	b40f      	push	{r0, r1, r2, r3}
 801049a:	b507      	push	{r0, r1, r2, lr}
 801049c:	4906      	ldr	r1, [pc, #24]	@ (80104b8 <iprintf+0x20>)
 801049e:	ab04      	add	r3, sp, #16
 80104a0:	6808      	ldr	r0, [r1, #0]
 80104a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a6:	6881      	ldr	r1, [r0, #8]
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	f001 fdef 	bl	801208c <_vfiprintf_r>
 80104ae:	b003      	add	sp, #12
 80104b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104b4:	b004      	add	sp, #16
 80104b6:	4770      	bx	lr
 80104b8:	20000058 	.word	0x20000058

080104bc <sniprintf>:
 80104bc:	b40c      	push	{r2, r3}
 80104be:	b530      	push	{r4, r5, lr}
 80104c0:	4b18      	ldr	r3, [pc, #96]	@ (8010524 <sniprintf+0x68>)
 80104c2:	1e0c      	subs	r4, r1, #0
 80104c4:	681d      	ldr	r5, [r3, #0]
 80104c6:	b09d      	sub	sp, #116	@ 0x74
 80104c8:	da08      	bge.n	80104dc <sniprintf+0x20>
 80104ca:	238b      	movs	r3, #139	@ 0x8b
 80104cc:	602b      	str	r3, [r5, #0]
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
 80104d2:	b01d      	add	sp, #116	@ 0x74
 80104d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104d8:	b002      	add	sp, #8
 80104da:	4770      	bx	lr
 80104dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80104e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104e4:	f04f 0300 	mov.w	r3, #0
 80104e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80104ea:	bf14      	ite	ne
 80104ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80104f0:	4623      	moveq	r3, r4
 80104f2:	9304      	str	r3, [sp, #16]
 80104f4:	9307      	str	r3, [sp, #28]
 80104f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104fa:	9002      	str	r0, [sp, #8]
 80104fc:	9006      	str	r0, [sp, #24]
 80104fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010502:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010504:	ab21      	add	r3, sp, #132	@ 0x84
 8010506:	a902      	add	r1, sp, #8
 8010508:	4628      	mov	r0, r5
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	f001 fc98 	bl	8011e40 <_svfiprintf_r>
 8010510:	1c43      	adds	r3, r0, #1
 8010512:	bfbc      	itt	lt
 8010514:	238b      	movlt	r3, #139	@ 0x8b
 8010516:	602b      	strlt	r3, [r5, #0]
 8010518:	2c00      	cmp	r4, #0
 801051a:	d0da      	beq.n	80104d2 <sniprintf+0x16>
 801051c:	9b02      	ldr	r3, [sp, #8]
 801051e:	2200      	movs	r2, #0
 8010520:	701a      	strb	r2, [r3, #0]
 8010522:	e7d6      	b.n	80104d2 <sniprintf+0x16>
 8010524:	20000058 	.word	0x20000058

08010528 <siprintf>:
 8010528:	b40e      	push	{r1, r2, r3}
 801052a:	b510      	push	{r4, lr}
 801052c:	b09d      	sub	sp, #116	@ 0x74
 801052e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010530:	9002      	str	r0, [sp, #8]
 8010532:	9006      	str	r0, [sp, #24]
 8010534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010538:	480a      	ldr	r0, [pc, #40]	@ (8010564 <siprintf+0x3c>)
 801053a:	9107      	str	r1, [sp, #28]
 801053c:	9104      	str	r1, [sp, #16]
 801053e:	490a      	ldr	r1, [pc, #40]	@ (8010568 <siprintf+0x40>)
 8010540:	f853 2b04 	ldr.w	r2, [r3], #4
 8010544:	9105      	str	r1, [sp, #20]
 8010546:	2400      	movs	r4, #0
 8010548:	a902      	add	r1, sp, #8
 801054a:	6800      	ldr	r0, [r0, #0]
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010550:	f001 fc76 	bl	8011e40 <_svfiprintf_r>
 8010554:	9b02      	ldr	r3, [sp, #8]
 8010556:	701c      	strb	r4, [r3, #0]
 8010558:	b01d      	add	sp, #116	@ 0x74
 801055a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801055e:	b003      	add	sp, #12
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	20000058 	.word	0x20000058
 8010568:	ffff0208 	.word	0xffff0208

0801056c <__sread>:
 801056c:	b510      	push	{r4, lr}
 801056e:	460c      	mov	r4, r1
 8010570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010574:	f000 f966 	bl	8010844 <_read_r>
 8010578:	2800      	cmp	r0, #0
 801057a:	bfab      	itete	ge
 801057c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801057e:	89a3      	ldrhlt	r3, [r4, #12]
 8010580:	181b      	addge	r3, r3, r0
 8010582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010586:	bfac      	ite	ge
 8010588:	6563      	strge	r3, [r4, #84]	@ 0x54
 801058a:	81a3      	strhlt	r3, [r4, #12]
 801058c:	bd10      	pop	{r4, pc}

0801058e <__swrite>:
 801058e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010592:	461f      	mov	r7, r3
 8010594:	898b      	ldrh	r3, [r1, #12]
 8010596:	05db      	lsls	r3, r3, #23
 8010598:	4605      	mov	r5, r0
 801059a:	460c      	mov	r4, r1
 801059c:	4616      	mov	r6, r2
 801059e:	d505      	bpl.n	80105ac <__swrite+0x1e>
 80105a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a4:	2302      	movs	r3, #2
 80105a6:	2200      	movs	r2, #0
 80105a8:	f000 f93a 	bl	8010820 <_lseek_r>
 80105ac:	89a3      	ldrh	r3, [r4, #12]
 80105ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80105b6:	81a3      	strh	r3, [r4, #12]
 80105b8:	4632      	mov	r2, r6
 80105ba:	463b      	mov	r3, r7
 80105bc:	4628      	mov	r0, r5
 80105be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105c2:	f000 b975 	b.w	80108b0 <_write_r>

080105c6 <__sseek>:
 80105c6:	b510      	push	{r4, lr}
 80105c8:	460c      	mov	r4, r1
 80105ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ce:	f000 f927 	bl	8010820 <_lseek_r>
 80105d2:	1c43      	adds	r3, r0, #1
 80105d4:	89a3      	ldrh	r3, [r4, #12]
 80105d6:	bf15      	itete	ne
 80105d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80105da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80105de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80105e2:	81a3      	strheq	r3, [r4, #12]
 80105e4:	bf18      	it	ne
 80105e6:	81a3      	strhne	r3, [r4, #12]
 80105e8:	bd10      	pop	{r4, pc}

080105ea <__sclose>:
 80105ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ee:	f000 b8a9 	b.w	8010744 <_close_r>

080105f2 <_vsniprintf_r>:
 80105f2:	b530      	push	{r4, r5, lr}
 80105f4:	4614      	mov	r4, r2
 80105f6:	2c00      	cmp	r4, #0
 80105f8:	b09b      	sub	sp, #108	@ 0x6c
 80105fa:	4605      	mov	r5, r0
 80105fc:	461a      	mov	r2, r3
 80105fe:	da05      	bge.n	801060c <_vsniprintf_r+0x1a>
 8010600:	238b      	movs	r3, #139	@ 0x8b
 8010602:	6003      	str	r3, [r0, #0]
 8010604:	f04f 30ff 	mov.w	r0, #4294967295
 8010608:	b01b      	add	sp, #108	@ 0x6c
 801060a:	bd30      	pop	{r4, r5, pc}
 801060c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010610:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010614:	f04f 0300 	mov.w	r3, #0
 8010618:	9319      	str	r3, [sp, #100]	@ 0x64
 801061a:	bf14      	ite	ne
 801061c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010620:	4623      	moveq	r3, r4
 8010622:	9302      	str	r3, [sp, #8]
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801062a:	9100      	str	r1, [sp, #0]
 801062c:	9104      	str	r1, [sp, #16]
 801062e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010632:	4669      	mov	r1, sp
 8010634:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010636:	f001 fc03 	bl	8011e40 <_svfiprintf_r>
 801063a:	1c43      	adds	r3, r0, #1
 801063c:	bfbc      	itt	lt
 801063e:	238b      	movlt	r3, #139	@ 0x8b
 8010640:	602b      	strlt	r3, [r5, #0]
 8010642:	2c00      	cmp	r4, #0
 8010644:	d0e0      	beq.n	8010608 <_vsniprintf_r+0x16>
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	2200      	movs	r2, #0
 801064a:	701a      	strb	r2, [r3, #0]
 801064c:	e7dc      	b.n	8010608 <_vsniprintf_r+0x16>
	...

08010650 <vsniprintf>:
 8010650:	b507      	push	{r0, r1, r2, lr}
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	4613      	mov	r3, r2
 8010656:	460a      	mov	r2, r1
 8010658:	4601      	mov	r1, r0
 801065a:	4803      	ldr	r0, [pc, #12]	@ (8010668 <vsniprintf+0x18>)
 801065c:	6800      	ldr	r0, [r0, #0]
 801065e:	f7ff ffc8 	bl	80105f2 <_vsniprintf_r>
 8010662:	b003      	add	sp, #12
 8010664:	f85d fb04 	ldr.w	pc, [sp], #4
 8010668:	20000058 	.word	0x20000058

0801066c <memmove>:
 801066c:	4288      	cmp	r0, r1
 801066e:	b510      	push	{r4, lr}
 8010670:	eb01 0402 	add.w	r4, r1, r2
 8010674:	d902      	bls.n	801067c <memmove+0x10>
 8010676:	4284      	cmp	r4, r0
 8010678:	4623      	mov	r3, r4
 801067a:	d807      	bhi.n	801068c <memmove+0x20>
 801067c:	1e43      	subs	r3, r0, #1
 801067e:	42a1      	cmp	r1, r4
 8010680:	d008      	beq.n	8010694 <memmove+0x28>
 8010682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801068a:	e7f8      	b.n	801067e <memmove+0x12>
 801068c:	4402      	add	r2, r0
 801068e:	4601      	mov	r1, r0
 8010690:	428a      	cmp	r2, r1
 8010692:	d100      	bne.n	8010696 <memmove+0x2a>
 8010694:	bd10      	pop	{r4, pc}
 8010696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801069a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801069e:	e7f7      	b.n	8010690 <memmove+0x24>

080106a0 <memset>:
 80106a0:	4402      	add	r2, r0
 80106a2:	4603      	mov	r3, r0
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d100      	bne.n	80106aa <memset+0xa>
 80106a8:	4770      	bx	lr
 80106aa:	f803 1b01 	strb.w	r1, [r3], #1
 80106ae:	e7f9      	b.n	80106a4 <memset+0x4>

080106b0 <strstr>:
 80106b0:	780a      	ldrb	r2, [r1, #0]
 80106b2:	b570      	push	{r4, r5, r6, lr}
 80106b4:	b96a      	cbnz	r2, 80106d2 <strstr+0x22>
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d109      	bne.n	80106d0 <strstr+0x20>
 80106bc:	460c      	mov	r4, r1
 80106be:	4605      	mov	r5, r0
 80106c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d0f6      	beq.n	80106b6 <strstr+0x6>
 80106c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80106cc:	429e      	cmp	r6, r3
 80106ce:	d0f7      	beq.n	80106c0 <strstr+0x10>
 80106d0:	3001      	adds	r0, #1
 80106d2:	7803      	ldrb	r3, [r0, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1ef      	bne.n	80106b8 <strstr+0x8>
 80106d8:	4618      	mov	r0, r3
 80106da:	e7ec      	b.n	80106b6 <strstr+0x6>

080106dc <_raise_r>:
 80106dc:	291f      	cmp	r1, #31
 80106de:	b538      	push	{r3, r4, r5, lr}
 80106e0:	4605      	mov	r5, r0
 80106e2:	460c      	mov	r4, r1
 80106e4:	d904      	bls.n	80106f0 <_raise_r+0x14>
 80106e6:	2316      	movs	r3, #22
 80106e8:	6003      	str	r3, [r0, #0]
 80106ea:	f04f 30ff 	mov.w	r0, #4294967295
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80106f2:	b112      	cbz	r2, 80106fa <_raise_r+0x1e>
 80106f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106f8:	b94b      	cbnz	r3, 801070e <_raise_r+0x32>
 80106fa:	4628      	mov	r0, r5
 80106fc:	f000 f8c6 	bl	801088c <_getpid_r>
 8010700:	4622      	mov	r2, r4
 8010702:	4601      	mov	r1, r0
 8010704:	4628      	mov	r0, r5
 8010706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801070a:	f000 b8ad 	b.w	8010868 <_kill_r>
 801070e:	2b01      	cmp	r3, #1
 8010710:	d00a      	beq.n	8010728 <_raise_r+0x4c>
 8010712:	1c59      	adds	r1, r3, #1
 8010714:	d103      	bne.n	801071e <_raise_r+0x42>
 8010716:	2316      	movs	r3, #22
 8010718:	6003      	str	r3, [r0, #0]
 801071a:	2001      	movs	r0, #1
 801071c:	e7e7      	b.n	80106ee <_raise_r+0x12>
 801071e:	2100      	movs	r1, #0
 8010720:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010724:	4620      	mov	r0, r4
 8010726:	4798      	blx	r3
 8010728:	2000      	movs	r0, #0
 801072a:	e7e0      	b.n	80106ee <_raise_r+0x12>

0801072c <raise>:
 801072c:	4b02      	ldr	r3, [pc, #8]	@ (8010738 <raise+0xc>)
 801072e:	4601      	mov	r1, r0
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	f7ff bfd3 	b.w	80106dc <_raise_r>
 8010736:	bf00      	nop
 8010738:	20000058 	.word	0x20000058

0801073c <_localeconv_r>:
 801073c:	4800      	ldr	r0, [pc, #0]	@ (8010740 <_localeconv_r+0x4>)
 801073e:	4770      	bx	lr
 8010740:	20000198 	.word	0x20000198

08010744 <_close_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4d06      	ldr	r5, [pc, #24]	@ (8010760 <_close_r+0x1c>)
 8010748:	2300      	movs	r3, #0
 801074a:	4604      	mov	r4, r0
 801074c:	4608      	mov	r0, r1
 801074e:	602b      	str	r3, [r5, #0]
 8010750:	f7f6 fc5a 	bl	8007008 <_close>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d102      	bne.n	801075e <_close_r+0x1a>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	b103      	cbz	r3, 801075e <_close_r+0x1a>
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	20007180 	.word	0x20007180

08010764 <_reclaim_reent>:
 8010764:	4b2d      	ldr	r3, [pc, #180]	@ (801081c <_reclaim_reent+0xb8>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4283      	cmp	r3, r0
 801076a:	b570      	push	{r4, r5, r6, lr}
 801076c:	4604      	mov	r4, r0
 801076e:	d053      	beq.n	8010818 <_reclaim_reent+0xb4>
 8010770:	69c3      	ldr	r3, [r0, #28]
 8010772:	b31b      	cbz	r3, 80107bc <_reclaim_reent+0x58>
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	b163      	cbz	r3, 8010792 <_reclaim_reent+0x2e>
 8010778:	2500      	movs	r5, #0
 801077a:	69e3      	ldr	r3, [r4, #28]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	5959      	ldr	r1, [r3, r5]
 8010780:	b9b1      	cbnz	r1, 80107b0 <_reclaim_reent+0x4c>
 8010782:	3504      	adds	r5, #4
 8010784:	2d80      	cmp	r5, #128	@ 0x80
 8010786:	d1f8      	bne.n	801077a <_reclaim_reent+0x16>
 8010788:	69e3      	ldr	r3, [r4, #28]
 801078a:	4620      	mov	r0, r4
 801078c:	68d9      	ldr	r1, [r3, #12]
 801078e:	f000 ff37 	bl	8011600 <_free_r>
 8010792:	69e3      	ldr	r3, [r4, #28]
 8010794:	6819      	ldr	r1, [r3, #0]
 8010796:	b111      	cbz	r1, 801079e <_reclaim_reent+0x3a>
 8010798:	4620      	mov	r0, r4
 801079a:	f000 ff31 	bl	8011600 <_free_r>
 801079e:	69e3      	ldr	r3, [r4, #28]
 80107a0:	689d      	ldr	r5, [r3, #8]
 80107a2:	b15d      	cbz	r5, 80107bc <_reclaim_reent+0x58>
 80107a4:	4629      	mov	r1, r5
 80107a6:	4620      	mov	r0, r4
 80107a8:	682d      	ldr	r5, [r5, #0]
 80107aa:	f000 ff29 	bl	8011600 <_free_r>
 80107ae:	e7f8      	b.n	80107a2 <_reclaim_reent+0x3e>
 80107b0:	680e      	ldr	r6, [r1, #0]
 80107b2:	4620      	mov	r0, r4
 80107b4:	f000 ff24 	bl	8011600 <_free_r>
 80107b8:	4631      	mov	r1, r6
 80107ba:	e7e1      	b.n	8010780 <_reclaim_reent+0x1c>
 80107bc:	6961      	ldr	r1, [r4, #20]
 80107be:	b111      	cbz	r1, 80107c6 <_reclaim_reent+0x62>
 80107c0:	4620      	mov	r0, r4
 80107c2:	f000 ff1d 	bl	8011600 <_free_r>
 80107c6:	69e1      	ldr	r1, [r4, #28]
 80107c8:	b111      	cbz	r1, 80107d0 <_reclaim_reent+0x6c>
 80107ca:	4620      	mov	r0, r4
 80107cc:	f000 ff18 	bl	8011600 <_free_r>
 80107d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80107d2:	b111      	cbz	r1, 80107da <_reclaim_reent+0x76>
 80107d4:	4620      	mov	r0, r4
 80107d6:	f000 ff13 	bl	8011600 <_free_r>
 80107da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107dc:	b111      	cbz	r1, 80107e4 <_reclaim_reent+0x80>
 80107de:	4620      	mov	r0, r4
 80107e0:	f000 ff0e 	bl	8011600 <_free_r>
 80107e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80107e6:	b111      	cbz	r1, 80107ee <_reclaim_reent+0x8a>
 80107e8:	4620      	mov	r0, r4
 80107ea:	f000 ff09 	bl	8011600 <_free_r>
 80107ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80107f0:	b111      	cbz	r1, 80107f8 <_reclaim_reent+0x94>
 80107f2:	4620      	mov	r0, r4
 80107f4:	f000 ff04 	bl	8011600 <_free_r>
 80107f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80107fa:	b111      	cbz	r1, 8010802 <_reclaim_reent+0x9e>
 80107fc:	4620      	mov	r0, r4
 80107fe:	f000 feff 	bl	8011600 <_free_r>
 8010802:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010804:	b111      	cbz	r1, 801080c <_reclaim_reent+0xa8>
 8010806:	4620      	mov	r0, r4
 8010808:	f000 fefa 	bl	8011600 <_free_r>
 801080c:	6a23      	ldr	r3, [r4, #32]
 801080e:	b11b      	cbz	r3, 8010818 <_reclaim_reent+0xb4>
 8010810:	4620      	mov	r0, r4
 8010812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010816:	4718      	bx	r3
 8010818:	bd70      	pop	{r4, r5, r6, pc}
 801081a:	bf00      	nop
 801081c:	20000058 	.word	0x20000058

08010820 <_lseek_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d07      	ldr	r5, [pc, #28]	@ (8010840 <_lseek_r+0x20>)
 8010824:	4604      	mov	r4, r0
 8010826:	4608      	mov	r0, r1
 8010828:	4611      	mov	r1, r2
 801082a:	2200      	movs	r2, #0
 801082c:	602a      	str	r2, [r5, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	f7f6 fc11 	bl	8007056 <_lseek>
 8010834:	1c43      	adds	r3, r0, #1
 8010836:	d102      	bne.n	801083e <_lseek_r+0x1e>
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	b103      	cbz	r3, 801083e <_lseek_r+0x1e>
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	bd38      	pop	{r3, r4, r5, pc}
 8010840:	20007180 	.word	0x20007180

08010844 <_read_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4d07      	ldr	r5, [pc, #28]	@ (8010864 <_read_r+0x20>)
 8010848:	4604      	mov	r4, r0
 801084a:	4608      	mov	r0, r1
 801084c:	4611      	mov	r1, r2
 801084e:	2200      	movs	r2, #0
 8010850:	602a      	str	r2, [r5, #0]
 8010852:	461a      	mov	r2, r3
 8010854:	f7f6 fb9f 	bl	8006f96 <_read>
 8010858:	1c43      	adds	r3, r0, #1
 801085a:	d102      	bne.n	8010862 <_read_r+0x1e>
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	b103      	cbz	r3, 8010862 <_read_r+0x1e>
 8010860:	6023      	str	r3, [r4, #0]
 8010862:	bd38      	pop	{r3, r4, r5, pc}
 8010864:	20007180 	.word	0x20007180

08010868 <_kill_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d07      	ldr	r5, [pc, #28]	@ (8010888 <_kill_r+0x20>)
 801086c:	2300      	movs	r3, #0
 801086e:	4604      	mov	r4, r0
 8010870:	4608      	mov	r0, r1
 8010872:	4611      	mov	r1, r2
 8010874:	602b      	str	r3, [r5, #0]
 8010876:	f7f6 fb73 	bl	8006f60 <_kill>
 801087a:	1c43      	adds	r3, r0, #1
 801087c:	d102      	bne.n	8010884 <_kill_r+0x1c>
 801087e:	682b      	ldr	r3, [r5, #0]
 8010880:	b103      	cbz	r3, 8010884 <_kill_r+0x1c>
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	bd38      	pop	{r3, r4, r5, pc}
 8010886:	bf00      	nop
 8010888:	20007180 	.word	0x20007180

0801088c <_getpid_r>:
 801088c:	f7f6 bb60 	b.w	8006f50 <_getpid>

08010890 <_sbrk_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d06      	ldr	r5, [pc, #24]	@ (80108ac <_sbrk_r+0x1c>)
 8010894:	2300      	movs	r3, #0
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	602b      	str	r3, [r5, #0]
 801089c:	f7f6 fbe8 	bl	8007070 <_sbrk>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_sbrk_r+0x1a>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_sbrk_r+0x1a>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20007180 	.word	0x20007180

080108b0 <_write_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d07      	ldr	r5, [pc, #28]	@ (80108d0 <_write_r+0x20>)
 80108b4:	4604      	mov	r4, r0
 80108b6:	4608      	mov	r0, r1
 80108b8:	4611      	mov	r1, r2
 80108ba:	2200      	movs	r2, #0
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	461a      	mov	r2, r3
 80108c0:	f7f6 fb86 	bl	8006fd0 <_write>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_write_r+0x1e>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_write_r+0x1e>
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	20007180 	.word	0x20007180

080108d4 <__errno>:
 80108d4:	4b01      	ldr	r3, [pc, #4]	@ (80108dc <__errno+0x8>)
 80108d6:	6818      	ldr	r0, [r3, #0]
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop
 80108dc:	20000058 	.word	0x20000058

080108e0 <__libc_init_array>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	4d0d      	ldr	r5, [pc, #52]	@ (8010918 <__libc_init_array+0x38>)
 80108e4:	4c0d      	ldr	r4, [pc, #52]	@ (801091c <__libc_init_array+0x3c>)
 80108e6:	1b64      	subs	r4, r4, r5
 80108e8:	10a4      	asrs	r4, r4, #2
 80108ea:	2600      	movs	r6, #0
 80108ec:	42a6      	cmp	r6, r4
 80108ee:	d109      	bne.n	8010904 <__libc_init_array+0x24>
 80108f0:	4d0b      	ldr	r5, [pc, #44]	@ (8010920 <__libc_init_array+0x40>)
 80108f2:	4c0c      	ldr	r4, [pc, #48]	@ (8010924 <__libc_init_array+0x44>)
 80108f4:	f001 ff40 	bl	8012778 <_init>
 80108f8:	1b64      	subs	r4, r4, r5
 80108fa:	10a4      	asrs	r4, r4, #2
 80108fc:	2600      	movs	r6, #0
 80108fe:	42a6      	cmp	r6, r4
 8010900:	d105      	bne.n	801090e <__libc_init_array+0x2e>
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	f855 3b04 	ldr.w	r3, [r5], #4
 8010908:	4798      	blx	r3
 801090a:	3601      	adds	r6, #1
 801090c:	e7ee      	b.n	80108ec <__libc_init_array+0xc>
 801090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010912:	4798      	blx	r3
 8010914:	3601      	adds	r6, #1
 8010916:	e7f2      	b.n	80108fe <__libc_init_array+0x1e>
 8010918:	08015774 	.word	0x08015774
 801091c:	08015774 	.word	0x08015774
 8010920:	08015774 	.word	0x08015774
 8010924:	08015780 	.word	0x08015780

08010928 <__retarget_lock_init_recursive>:
 8010928:	4770      	bx	lr

0801092a <__retarget_lock_acquire_recursive>:
 801092a:	4770      	bx	lr

0801092c <__retarget_lock_release_recursive>:
 801092c:	4770      	bx	lr

0801092e <memcpy>:
 801092e:	440a      	add	r2, r1
 8010930:	4291      	cmp	r1, r2
 8010932:	f100 33ff 	add.w	r3, r0, #4294967295
 8010936:	d100      	bne.n	801093a <memcpy+0xc>
 8010938:	4770      	bx	lr
 801093a:	b510      	push	{r4, lr}
 801093c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010944:	4291      	cmp	r1, r2
 8010946:	d1f9      	bne.n	801093c <memcpy+0xe>
 8010948:	bd10      	pop	{r4, pc}

0801094a <quorem>:
 801094a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094e:	6903      	ldr	r3, [r0, #16]
 8010950:	690c      	ldr	r4, [r1, #16]
 8010952:	42a3      	cmp	r3, r4
 8010954:	4607      	mov	r7, r0
 8010956:	db7e      	blt.n	8010a56 <quorem+0x10c>
 8010958:	3c01      	subs	r4, #1
 801095a:	f101 0814 	add.w	r8, r1, #20
 801095e:	00a3      	lsls	r3, r4, #2
 8010960:	f100 0514 	add.w	r5, r0, #20
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010974:	3301      	adds	r3, #1
 8010976:	429a      	cmp	r2, r3
 8010978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801097c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010980:	d32e      	bcc.n	80109e0 <quorem+0x96>
 8010982:	f04f 0a00 	mov.w	sl, #0
 8010986:	46c4      	mov	ip, r8
 8010988:	46ae      	mov	lr, r5
 801098a:	46d3      	mov	fp, sl
 801098c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010990:	b298      	uxth	r0, r3
 8010992:	fb06 a000 	mla	r0, r6, r0, sl
 8010996:	0c02      	lsrs	r2, r0, #16
 8010998:	0c1b      	lsrs	r3, r3, #16
 801099a:	fb06 2303 	mla	r3, r6, r3, r2
 801099e:	f8de 2000 	ldr.w	r2, [lr]
 80109a2:	b280      	uxth	r0, r0
 80109a4:	b292      	uxth	r2, r2
 80109a6:	1a12      	subs	r2, r2, r0
 80109a8:	445a      	add	r2, fp
 80109aa:	f8de 0000 	ldr.w	r0, [lr]
 80109ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80109b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80109bc:	b292      	uxth	r2, r2
 80109be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80109c2:	45e1      	cmp	r9, ip
 80109c4:	f84e 2b04 	str.w	r2, [lr], #4
 80109c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80109cc:	d2de      	bcs.n	801098c <quorem+0x42>
 80109ce:	9b00      	ldr	r3, [sp, #0]
 80109d0:	58eb      	ldr	r3, [r5, r3]
 80109d2:	b92b      	cbnz	r3, 80109e0 <quorem+0x96>
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	3b04      	subs	r3, #4
 80109d8:	429d      	cmp	r5, r3
 80109da:	461a      	mov	r2, r3
 80109dc:	d32f      	bcc.n	8010a3e <quorem+0xf4>
 80109de:	613c      	str	r4, [r7, #16]
 80109e0:	4638      	mov	r0, r7
 80109e2:	f001 f8c9 	bl	8011b78 <__mcmp>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	db25      	blt.n	8010a36 <quorem+0xec>
 80109ea:	4629      	mov	r1, r5
 80109ec:	2000      	movs	r0, #0
 80109ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80109f2:	f8d1 c000 	ldr.w	ip, [r1]
 80109f6:	fa1f fe82 	uxth.w	lr, r2
 80109fa:	fa1f f38c 	uxth.w	r3, ip
 80109fe:	eba3 030e 	sub.w	r3, r3, lr
 8010a02:	4403      	add	r3, r0
 8010a04:	0c12      	lsrs	r2, r2, #16
 8010a06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010a0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a14:	45c1      	cmp	r9, r8
 8010a16:	f841 3b04 	str.w	r3, [r1], #4
 8010a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010a1e:	d2e6      	bcs.n	80109ee <quorem+0xa4>
 8010a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a28:	b922      	cbnz	r2, 8010a34 <quorem+0xea>
 8010a2a:	3b04      	subs	r3, #4
 8010a2c:	429d      	cmp	r5, r3
 8010a2e:	461a      	mov	r2, r3
 8010a30:	d30b      	bcc.n	8010a4a <quorem+0x100>
 8010a32:	613c      	str	r4, [r7, #16]
 8010a34:	3601      	adds	r6, #1
 8010a36:	4630      	mov	r0, r6
 8010a38:	b003      	add	sp, #12
 8010a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3e:	6812      	ldr	r2, [r2, #0]
 8010a40:	3b04      	subs	r3, #4
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	d1cb      	bne.n	80109de <quorem+0x94>
 8010a46:	3c01      	subs	r4, #1
 8010a48:	e7c6      	b.n	80109d8 <quorem+0x8e>
 8010a4a:	6812      	ldr	r2, [r2, #0]
 8010a4c:	3b04      	subs	r3, #4
 8010a4e:	2a00      	cmp	r2, #0
 8010a50:	d1ef      	bne.n	8010a32 <quorem+0xe8>
 8010a52:	3c01      	subs	r4, #1
 8010a54:	e7ea      	b.n	8010a2c <quorem+0xe2>
 8010a56:	2000      	movs	r0, #0
 8010a58:	e7ee      	b.n	8010a38 <quorem+0xee>
 8010a5a:	0000      	movs	r0, r0
 8010a5c:	0000      	movs	r0, r0
	...

08010a60 <_dtoa_r>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	69c7      	ldr	r7, [r0, #28]
 8010a66:	b097      	sub	sp, #92	@ 0x5c
 8010a68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010a6c:	ec55 4b10 	vmov	r4, r5, d0
 8010a70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010a72:	9107      	str	r1, [sp, #28]
 8010a74:	4681      	mov	r9, r0
 8010a76:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a78:	9311      	str	r3, [sp, #68]	@ 0x44
 8010a7a:	b97f      	cbnz	r7, 8010a9c <_dtoa_r+0x3c>
 8010a7c:	2010      	movs	r0, #16
 8010a7e:	f7fe ff35 	bl	800f8ec <malloc>
 8010a82:	4602      	mov	r2, r0
 8010a84:	f8c9 001c 	str.w	r0, [r9, #28]
 8010a88:	b920      	cbnz	r0, 8010a94 <_dtoa_r+0x34>
 8010a8a:	4ba9      	ldr	r3, [pc, #676]	@ (8010d30 <_dtoa_r+0x2d0>)
 8010a8c:	21ef      	movs	r1, #239	@ 0xef
 8010a8e:	48a9      	ldr	r0, [pc, #676]	@ (8010d34 <_dtoa_r+0x2d4>)
 8010a90:	f001 fd54 	bl	801253c <__assert_func>
 8010a94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010a98:	6007      	str	r7, [r0, #0]
 8010a9a:	60c7      	str	r7, [r0, #12]
 8010a9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010aa0:	6819      	ldr	r1, [r3, #0]
 8010aa2:	b159      	cbz	r1, 8010abc <_dtoa_r+0x5c>
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	604a      	str	r2, [r1, #4]
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	4093      	lsls	r3, r2
 8010aac:	608b      	str	r3, [r1, #8]
 8010aae:	4648      	mov	r0, r9
 8010ab0:	f000 fe30 	bl	8011714 <_Bfree>
 8010ab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	1e2b      	subs	r3, r5, #0
 8010abe:	bfb9      	ittee	lt
 8010ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ac4:	9305      	strlt	r3, [sp, #20]
 8010ac6:	2300      	movge	r3, #0
 8010ac8:	6033      	strge	r3, [r6, #0]
 8010aca:	9f05      	ldr	r7, [sp, #20]
 8010acc:	4b9a      	ldr	r3, [pc, #616]	@ (8010d38 <_dtoa_r+0x2d8>)
 8010ace:	bfbc      	itt	lt
 8010ad0:	2201      	movlt	r2, #1
 8010ad2:	6032      	strlt	r2, [r6, #0]
 8010ad4:	43bb      	bics	r3, r7
 8010ad6:	d112      	bne.n	8010afe <_dtoa_r+0x9e>
 8010ad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ada:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ae4:	4323      	orrs	r3, r4
 8010ae6:	f000 855a 	beq.w	801159e <_dtoa_r+0xb3e>
 8010aea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010aec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010d4c <_dtoa_r+0x2ec>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f000 855c 	beq.w	80115ae <_dtoa_r+0xb4e>
 8010af6:	f10a 0303 	add.w	r3, sl, #3
 8010afa:	f000 bd56 	b.w	80115aa <_dtoa_r+0xb4a>
 8010afe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010b02:	2200      	movs	r2, #0
 8010b04:	ec51 0b17 	vmov	r0, r1, d7
 8010b08:	2300      	movs	r3, #0
 8010b0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010b0e:	f7f0 f80b 	bl	8000b28 <__aeabi_dcmpeq>
 8010b12:	4680      	mov	r8, r0
 8010b14:	b158      	cbz	r0, 8010b2e <_dtoa_r+0xce>
 8010b16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b18:	2301      	movs	r3, #1
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b1e:	b113      	cbz	r3, 8010b26 <_dtoa_r+0xc6>
 8010b20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010b22:	4b86      	ldr	r3, [pc, #536]	@ (8010d3c <_dtoa_r+0x2dc>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010d50 <_dtoa_r+0x2f0>
 8010b2a:	f000 bd40 	b.w	80115ae <_dtoa_r+0xb4e>
 8010b2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010b32:	aa14      	add	r2, sp, #80	@ 0x50
 8010b34:	a915      	add	r1, sp, #84	@ 0x54
 8010b36:	4648      	mov	r0, r9
 8010b38:	f001 f8ce 	bl	8011cd8 <__d2b>
 8010b3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010b40:	9002      	str	r0, [sp, #8]
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d078      	beq.n	8010c38 <_dtoa_r+0x1d8>
 8010b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010b54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010b58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010b5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010b60:	4619      	mov	r1, r3
 8010b62:	2200      	movs	r2, #0
 8010b64:	4b76      	ldr	r3, [pc, #472]	@ (8010d40 <_dtoa_r+0x2e0>)
 8010b66:	f7ef fbbf 	bl	80002e8 <__aeabi_dsub>
 8010b6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010d18 <_dtoa_r+0x2b8>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef fd72 	bl	8000658 <__aeabi_dmul>
 8010b74:	a36a      	add	r3, pc, #424	@ (adr r3, 8010d20 <_dtoa_r+0x2c0>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fbb7 	bl	80002ec <__adddf3>
 8010b7e:	4604      	mov	r4, r0
 8010b80:	4630      	mov	r0, r6
 8010b82:	460d      	mov	r5, r1
 8010b84:	f7ef fcfe 	bl	8000584 <__aeabi_i2d>
 8010b88:	a367      	add	r3, pc, #412	@ (adr r3, 8010d28 <_dtoa_r+0x2c8>)
 8010b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8e:	f7ef fd63 	bl	8000658 <__aeabi_dmul>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4620      	mov	r0, r4
 8010b98:	4629      	mov	r1, r5
 8010b9a:	f7ef fba7 	bl	80002ec <__adddf3>
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	f7f0 f809 	bl	8000bb8 <__aeabi_d2iz>
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4607      	mov	r7, r0
 8010baa:	2300      	movs	r3, #0
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f7ef ffc4 	bl	8000b3c <__aeabi_dcmplt>
 8010bb4:	b140      	cbz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ef fce4 	bl	8000584 <__aeabi_i2d>
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	f7ef ffb2 	bl	8000b28 <__aeabi_dcmpeq>
 8010bc4:	b900      	cbnz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bc6:	3f01      	subs	r7, #1
 8010bc8:	2f16      	cmp	r7, #22
 8010bca:	d852      	bhi.n	8010c72 <_dtoa_r+0x212>
 8010bcc:	4b5d      	ldr	r3, [pc, #372]	@ (8010d44 <_dtoa_r+0x2e4>)
 8010bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010bda:	f7ef ffaf 	bl	8000b3c <__aeabi_dcmplt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d049      	beq.n	8010c76 <_dtoa_r+0x216>
 8010be2:	3f01      	subs	r7, #1
 8010be4:	2300      	movs	r3, #0
 8010be6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010be8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010bea:	1b9b      	subs	r3, r3, r6
 8010bec:	1e5a      	subs	r2, r3, #1
 8010bee:	bf45      	ittet	mi
 8010bf0:	f1c3 0301 	rsbmi	r3, r3, #1
 8010bf4:	9300      	strmi	r3, [sp, #0]
 8010bf6:	2300      	movpl	r3, #0
 8010bf8:	2300      	movmi	r3, #0
 8010bfa:	9206      	str	r2, [sp, #24]
 8010bfc:	bf54      	ite	pl
 8010bfe:	9300      	strpl	r3, [sp, #0]
 8010c00:	9306      	strmi	r3, [sp, #24]
 8010c02:	2f00      	cmp	r7, #0
 8010c04:	db39      	blt.n	8010c7a <_dtoa_r+0x21a>
 8010c06:	9b06      	ldr	r3, [sp, #24]
 8010c08:	970d      	str	r7, [sp, #52]	@ 0x34
 8010c0a:	443b      	add	r3, r7
 8010c0c:	9306      	str	r3, [sp, #24]
 8010c0e:	2300      	movs	r3, #0
 8010c10:	9308      	str	r3, [sp, #32]
 8010c12:	9b07      	ldr	r3, [sp, #28]
 8010c14:	2b09      	cmp	r3, #9
 8010c16:	d863      	bhi.n	8010ce0 <_dtoa_r+0x280>
 8010c18:	2b05      	cmp	r3, #5
 8010c1a:	bfc4      	itt	gt
 8010c1c:	3b04      	subgt	r3, #4
 8010c1e:	9307      	strgt	r3, [sp, #28]
 8010c20:	9b07      	ldr	r3, [sp, #28]
 8010c22:	f1a3 0302 	sub.w	r3, r3, #2
 8010c26:	bfcc      	ite	gt
 8010c28:	2400      	movgt	r4, #0
 8010c2a:	2401      	movle	r4, #1
 8010c2c:	2b03      	cmp	r3, #3
 8010c2e:	d863      	bhi.n	8010cf8 <_dtoa_r+0x298>
 8010c30:	e8df f003 	tbb	[pc, r3]
 8010c34:	2b375452 	.word	0x2b375452
 8010c38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010c3c:	441e      	add	r6, r3
 8010c3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010c42:	2b20      	cmp	r3, #32
 8010c44:	bfc1      	itttt	gt
 8010c46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010c4a:	409f      	lslgt	r7, r3
 8010c4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010c50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010c54:	bfd6      	itet	le
 8010c56:	f1c3 0320 	rsble	r3, r3, #32
 8010c5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010c5e:	fa04 f003 	lslle.w	r0, r4, r3
 8010c62:	f7ef fc7f 	bl	8000564 <__aeabi_ui2d>
 8010c66:	2201      	movs	r2, #1
 8010c68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010c6c:	3e01      	subs	r6, #1
 8010c6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010c70:	e776      	b.n	8010b60 <_dtoa_r+0x100>
 8010c72:	2301      	movs	r3, #1
 8010c74:	e7b7      	b.n	8010be6 <_dtoa_r+0x186>
 8010c76:	9010      	str	r0, [sp, #64]	@ 0x40
 8010c78:	e7b6      	b.n	8010be8 <_dtoa_r+0x188>
 8010c7a:	9b00      	ldr	r3, [sp, #0]
 8010c7c:	1bdb      	subs	r3, r3, r7
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	427b      	negs	r3, r7
 8010c82:	9308      	str	r3, [sp, #32]
 8010c84:	2300      	movs	r3, #0
 8010c86:	930d      	str	r3, [sp, #52]	@ 0x34
 8010c88:	e7c3      	b.n	8010c12 <_dtoa_r+0x1b2>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c90:	eb07 0b03 	add.w	fp, r7, r3
 8010c94:	f10b 0301 	add.w	r3, fp, #1
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	9303      	str	r3, [sp, #12]
 8010c9c:	bfb8      	it	lt
 8010c9e:	2301      	movlt	r3, #1
 8010ca0:	e006      	b.n	8010cb0 <_dtoa_r+0x250>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dd28      	ble.n	8010cfe <_dtoa_r+0x29e>
 8010cac:	469b      	mov	fp, r3
 8010cae:	9303      	str	r3, [sp, #12]
 8010cb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	f102 0514 	add.w	r5, r2, #20
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	d926      	bls.n	8010d0e <_dtoa_r+0x2ae>
 8010cc0:	6041      	str	r1, [r0, #4]
 8010cc2:	4648      	mov	r0, r9
 8010cc4:	f000 fce6 	bl	8011694 <_Balloc>
 8010cc8:	4682      	mov	sl, r0
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d142      	bne.n	8010d54 <_dtoa_r+0x2f4>
 8010cce:	4b1e      	ldr	r3, [pc, #120]	@ (8010d48 <_dtoa_r+0x2e8>)
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8010cd6:	e6da      	b.n	8010a8e <_dtoa_r+0x2e>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e7e3      	b.n	8010ca4 <_dtoa_r+0x244>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	e7d5      	b.n	8010c8c <_dtoa_r+0x22c>
 8010ce0:	2401      	movs	r4, #1
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	9307      	str	r3, [sp, #28]
 8010ce6:	9409      	str	r4, [sp, #36]	@ 0x24
 8010ce8:	f04f 3bff 	mov.w	fp, #4294967295
 8010cec:	2200      	movs	r2, #0
 8010cee:	f8cd b00c 	str.w	fp, [sp, #12]
 8010cf2:	2312      	movs	r3, #18
 8010cf4:	920c      	str	r2, [sp, #48]	@ 0x30
 8010cf6:	e7db      	b.n	8010cb0 <_dtoa_r+0x250>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cfc:	e7f4      	b.n	8010ce8 <_dtoa_r+0x288>
 8010cfe:	f04f 0b01 	mov.w	fp, #1
 8010d02:	f8cd b00c 	str.w	fp, [sp, #12]
 8010d06:	465b      	mov	r3, fp
 8010d08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010d0c:	e7d0      	b.n	8010cb0 <_dtoa_r+0x250>
 8010d0e:	3101      	adds	r1, #1
 8010d10:	0052      	lsls	r2, r2, #1
 8010d12:	e7d1      	b.n	8010cb8 <_dtoa_r+0x258>
 8010d14:	f3af 8000 	nop.w
 8010d18:	636f4361 	.word	0x636f4361
 8010d1c:	3fd287a7 	.word	0x3fd287a7
 8010d20:	8b60c8b3 	.word	0x8b60c8b3
 8010d24:	3fc68a28 	.word	0x3fc68a28
 8010d28:	509f79fb 	.word	0x509f79fb
 8010d2c:	3fd34413 	.word	0x3fd34413
 8010d30:	08015435 	.word	0x08015435
 8010d34:	0801544c 	.word	0x0801544c
 8010d38:	7ff00000 	.word	0x7ff00000
 8010d3c:	08015405 	.word	0x08015405
 8010d40:	3ff80000 	.word	0x3ff80000
 8010d44:	080155a0 	.word	0x080155a0
 8010d48:	080154a4 	.word	0x080154a4
 8010d4c:	08015431 	.word	0x08015431
 8010d50:	08015404 	.word	0x08015404
 8010d54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010d58:	6018      	str	r0, [r3, #0]
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	2b0e      	cmp	r3, #14
 8010d5e:	f200 80a1 	bhi.w	8010ea4 <_dtoa_r+0x444>
 8010d62:	2c00      	cmp	r4, #0
 8010d64:	f000 809e 	beq.w	8010ea4 <_dtoa_r+0x444>
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	dd33      	ble.n	8010dd4 <_dtoa_r+0x374>
 8010d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8010fe0 <_dtoa_r+0x580>)
 8010d6e:	f007 020f 	and.w	r2, r7, #15
 8010d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d76:	ed93 7b00 	vldr	d7, [r3]
 8010d7a:	05f8      	lsls	r0, r7, #23
 8010d7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010d84:	d516      	bpl.n	8010db4 <_dtoa_r+0x354>
 8010d86:	4b97      	ldr	r3, [pc, #604]	@ (8010fe4 <_dtoa_r+0x584>)
 8010d88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d90:	f7ef fd8c 	bl	80008ac <__aeabi_ddiv>
 8010d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d98:	f004 040f 	and.w	r4, r4, #15
 8010d9c:	2603      	movs	r6, #3
 8010d9e:	4d91      	ldr	r5, [pc, #580]	@ (8010fe4 <_dtoa_r+0x584>)
 8010da0:	b954      	cbnz	r4, 8010db8 <_dtoa_r+0x358>
 8010da2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010daa:	f7ef fd7f 	bl	80008ac <__aeabi_ddiv>
 8010dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010db2:	e028      	b.n	8010e06 <_dtoa_r+0x3a6>
 8010db4:	2602      	movs	r6, #2
 8010db6:	e7f2      	b.n	8010d9e <_dtoa_r+0x33e>
 8010db8:	07e1      	lsls	r1, r4, #31
 8010dba:	d508      	bpl.n	8010dce <_dtoa_r+0x36e>
 8010dbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dc4:	f7ef fc48 	bl	8000658 <__aeabi_dmul>
 8010dc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010dcc:	3601      	adds	r6, #1
 8010dce:	1064      	asrs	r4, r4, #1
 8010dd0:	3508      	adds	r5, #8
 8010dd2:	e7e5      	b.n	8010da0 <_dtoa_r+0x340>
 8010dd4:	f000 80af 	beq.w	8010f36 <_dtoa_r+0x4d6>
 8010dd8:	427c      	negs	r4, r7
 8010dda:	4b81      	ldr	r3, [pc, #516]	@ (8010fe0 <_dtoa_r+0x580>)
 8010ddc:	4d81      	ldr	r5, [pc, #516]	@ (8010fe4 <_dtoa_r+0x584>)
 8010dde:	f004 020f 	and.w	r2, r4, #15
 8010de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010dee:	f7ef fc33 	bl	8000658 <__aeabi_dmul>
 8010df2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010df6:	1124      	asrs	r4, r4, #4
 8010df8:	2300      	movs	r3, #0
 8010dfa:	2602      	movs	r6, #2
 8010dfc:	2c00      	cmp	r4, #0
 8010dfe:	f040 808f 	bne.w	8010f20 <_dtoa_r+0x4c0>
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1d3      	bne.n	8010dae <_dtoa_r+0x34e>
 8010e06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f000 8094 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e12:	4b75      	ldr	r3, [pc, #468]	@ (8010fe8 <_dtoa_r+0x588>)
 8010e14:	2200      	movs	r2, #0
 8010e16:	4620      	mov	r0, r4
 8010e18:	4629      	mov	r1, r5
 8010e1a:	f7ef fe8f 	bl	8000b3c <__aeabi_dcmplt>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f000 808b 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f000 8087 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e2c:	f1bb 0f00 	cmp.w	fp, #0
 8010e30:	dd34      	ble.n	8010e9c <_dtoa_r+0x43c>
 8010e32:	4620      	mov	r0, r4
 8010e34:	4b6d      	ldr	r3, [pc, #436]	@ (8010fec <_dtoa_r+0x58c>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fc0d 	bl	8000658 <__aeabi_dmul>
 8010e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e42:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e46:	3601      	adds	r6, #1
 8010e48:	465c      	mov	r4, fp
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7ef fb9a 	bl	8000584 <__aeabi_i2d>
 8010e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e54:	f7ef fc00 	bl	8000658 <__aeabi_dmul>
 8010e58:	4b65      	ldr	r3, [pc, #404]	@ (8010ff0 <_dtoa_r+0x590>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f7ef fa46 	bl	80002ec <__adddf3>
 8010e60:	4605      	mov	r5, r0
 8010e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010e66:	2c00      	cmp	r4, #0
 8010e68:	d16a      	bne.n	8010f40 <_dtoa_r+0x4e0>
 8010e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e6e:	4b61      	ldr	r3, [pc, #388]	@ (8010ff4 <_dtoa_r+0x594>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	f7ef fa39 	bl	80002e8 <__aeabi_dsub>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4633      	mov	r3, r6
 8010e82:	f7ef fe79 	bl	8000b78 <__aeabi_dcmpgt>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	f040 8298 	bne.w	80113bc <_dtoa_r+0x95c>
 8010e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e90:	462a      	mov	r2, r5
 8010e92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010e96:	f7ef fe51 	bl	8000b3c <__aeabi_dcmplt>
 8010e9a:	bb38      	cbnz	r0, 8010eec <_dtoa_r+0x48c>
 8010e9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010ea0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010ea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f2c0 8157 	blt.w	801115a <_dtoa_r+0x6fa>
 8010eac:	2f0e      	cmp	r7, #14
 8010eae:	f300 8154 	bgt.w	801115a <_dtoa_r+0x6fa>
 8010eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8010fe0 <_dtoa_r+0x580>)
 8010eb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010eb8:	ed93 7b00 	vldr	d7, [r3]
 8010ebc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	ed8d 7b00 	vstr	d7, [sp]
 8010ec4:	f280 80e5 	bge.w	8011092 <_dtoa_r+0x632>
 8010ec8:	9b03      	ldr	r3, [sp, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f300 80e1 	bgt.w	8011092 <_dtoa_r+0x632>
 8010ed0:	d10c      	bne.n	8010eec <_dtoa_r+0x48c>
 8010ed2:	4b48      	ldr	r3, [pc, #288]	@ (8010ff4 <_dtoa_r+0x594>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	ec51 0b17 	vmov	r0, r1, d7
 8010eda:	f7ef fbbd 	bl	8000658 <__aeabi_dmul>
 8010ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ee2:	f7ef fe3f 	bl	8000b64 <__aeabi_dcmpge>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f000 8266 	beq.w	80113b8 <_dtoa_r+0x958>
 8010eec:	2400      	movs	r4, #0
 8010eee:	4625      	mov	r5, r4
 8010ef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ef2:	4656      	mov	r6, sl
 8010ef4:	ea6f 0803 	mvn.w	r8, r3
 8010ef8:	2700      	movs	r7, #0
 8010efa:	4621      	mov	r1, r4
 8010efc:	4648      	mov	r0, r9
 8010efe:	f000 fc09 	bl	8011714 <_Bfree>
 8010f02:	2d00      	cmp	r5, #0
 8010f04:	f000 80bd 	beq.w	8011082 <_dtoa_r+0x622>
 8010f08:	b12f      	cbz	r7, 8010f16 <_dtoa_r+0x4b6>
 8010f0a:	42af      	cmp	r7, r5
 8010f0c:	d003      	beq.n	8010f16 <_dtoa_r+0x4b6>
 8010f0e:	4639      	mov	r1, r7
 8010f10:	4648      	mov	r0, r9
 8010f12:	f000 fbff 	bl	8011714 <_Bfree>
 8010f16:	4629      	mov	r1, r5
 8010f18:	4648      	mov	r0, r9
 8010f1a:	f000 fbfb 	bl	8011714 <_Bfree>
 8010f1e:	e0b0      	b.n	8011082 <_dtoa_r+0x622>
 8010f20:	07e2      	lsls	r2, r4, #31
 8010f22:	d505      	bpl.n	8010f30 <_dtoa_r+0x4d0>
 8010f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f28:	f7ef fb96 	bl	8000658 <__aeabi_dmul>
 8010f2c:	3601      	adds	r6, #1
 8010f2e:	2301      	movs	r3, #1
 8010f30:	1064      	asrs	r4, r4, #1
 8010f32:	3508      	adds	r5, #8
 8010f34:	e762      	b.n	8010dfc <_dtoa_r+0x39c>
 8010f36:	2602      	movs	r6, #2
 8010f38:	e765      	b.n	8010e06 <_dtoa_r+0x3a6>
 8010f3a:	9c03      	ldr	r4, [sp, #12]
 8010f3c:	46b8      	mov	r8, r7
 8010f3e:	e784      	b.n	8010e4a <_dtoa_r+0x3ea>
 8010f40:	4b27      	ldr	r3, [pc, #156]	@ (8010fe0 <_dtoa_r+0x580>)
 8010f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f4c:	4454      	add	r4, sl
 8010f4e:	2900      	cmp	r1, #0
 8010f50:	d054      	beq.n	8010ffc <_dtoa_r+0x59c>
 8010f52:	4929      	ldr	r1, [pc, #164]	@ (8010ff8 <_dtoa_r+0x598>)
 8010f54:	2000      	movs	r0, #0
 8010f56:	f7ef fca9 	bl	80008ac <__aeabi_ddiv>
 8010f5a:	4633      	mov	r3, r6
 8010f5c:	462a      	mov	r2, r5
 8010f5e:	f7ef f9c3 	bl	80002e8 <__aeabi_dsub>
 8010f62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010f66:	4656      	mov	r6, sl
 8010f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f6c:	f7ef fe24 	bl	8000bb8 <__aeabi_d2iz>
 8010f70:	4605      	mov	r5, r0
 8010f72:	f7ef fb07 	bl	8000584 <__aeabi_i2d>
 8010f76:	4602      	mov	r2, r0
 8010f78:	460b      	mov	r3, r1
 8010f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f7e:	f7ef f9b3 	bl	80002e8 <__aeabi_dsub>
 8010f82:	3530      	adds	r5, #48	@ 0x30
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f8c:	f806 5b01 	strb.w	r5, [r6], #1
 8010f90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010f94:	f7ef fdd2 	bl	8000b3c <__aeabi_dcmplt>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d172      	bne.n	8011082 <_dtoa_r+0x622>
 8010f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fa0:	4911      	ldr	r1, [pc, #68]	@ (8010fe8 <_dtoa_r+0x588>)
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f7ef f9a0 	bl	80002e8 <__aeabi_dsub>
 8010fa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010fac:	f7ef fdc6 	bl	8000b3c <__aeabi_dcmplt>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	f040 80b4 	bne.w	801111e <_dtoa_r+0x6be>
 8010fb6:	42a6      	cmp	r6, r4
 8010fb8:	f43f af70 	beq.w	8010e9c <_dtoa_r+0x43c>
 8010fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8010fec <_dtoa_r+0x58c>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f7ef fb48 	bl	8000658 <__aeabi_dmul>
 8010fc8:	4b08      	ldr	r3, [pc, #32]	@ (8010fec <_dtoa_r+0x58c>)
 8010fca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010fce:	2200      	movs	r2, #0
 8010fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fd4:	f7ef fb40 	bl	8000658 <__aeabi_dmul>
 8010fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fdc:	e7c4      	b.n	8010f68 <_dtoa_r+0x508>
 8010fde:	bf00      	nop
 8010fe0:	080155a0 	.word	0x080155a0
 8010fe4:	08015578 	.word	0x08015578
 8010fe8:	3ff00000 	.word	0x3ff00000
 8010fec:	40240000 	.word	0x40240000
 8010ff0:	401c0000 	.word	0x401c0000
 8010ff4:	40140000 	.word	0x40140000
 8010ff8:	3fe00000 	.word	0x3fe00000
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4628      	mov	r0, r5
 8011000:	f7ef fb2a 	bl	8000658 <__aeabi_dmul>
 8011004:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011008:	9413      	str	r4, [sp, #76]	@ 0x4c
 801100a:	4656      	mov	r6, sl
 801100c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011010:	f7ef fdd2 	bl	8000bb8 <__aeabi_d2iz>
 8011014:	4605      	mov	r5, r0
 8011016:	f7ef fab5 	bl	8000584 <__aeabi_i2d>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011022:	f7ef f961 	bl	80002e8 <__aeabi_dsub>
 8011026:	3530      	adds	r5, #48	@ 0x30
 8011028:	f806 5b01 	strb.w	r5, [r6], #1
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	42a6      	cmp	r6, r4
 8011032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011036:	f04f 0200 	mov.w	r2, #0
 801103a:	d124      	bne.n	8011086 <_dtoa_r+0x626>
 801103c:	4baf      	ldr	r3, [pc, #700]	@ (80112fc <_dtoa_r+0x89c>)
 801103e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011042:	f7ef f953 	bl	80002ec <__adddf3>
 8011046:	4602      	mov	r2, r0
 8011048:	460b      	mov	r3, r1
 801104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801104e:	f7ef fd93 	bl	8000b78 <__aeabi_dcmpgt>
 8011052:	2800      	cmp	r0, #0
 8011054:	d163      	bne.n	801111e <_dtoa_r+0x6be>
 8011056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801105a:	49a8      	ldr	r1, [pc, #672]	@ (80112fc <_dtoa_r+0x89c>)
 801105c:	2000      	movs	r0, #0
 801105e:	f7ef f943 	bl	80002e8 <__aeabi_dsub>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801106a:	f7ef fd67 	bl	8000b3c <__aeabi_dcmplt>
 801106e:	2800      	cmp	r0, #0
 8011070:	f43f af14 	beq.w	8010e9c <_dtoa_r+0x43c>
 8011074:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011076:	1e73      	subs	r3, r6, #1
 8011078:	9313      	str	r3, [sp, #76]	@ 0x4c
 801107a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801107e:	2b30      	cmp	r3, #48	@ 0x30
 8011080:	d0f8      	beq.n	8011074 <_dtoa_r+0x614>
 8011082:	4647      	mov	r7, r8
 8011084:	e03b      	b.n	80110fe <_dtoa_r+0x69e>
 8011086:	4b9e      	ldr	r3, [pc, #632]	@ (8011300 <_dtoa_r+0x8a0>)
 8011088:	f7ef fae6 	bl	8000658 <__aeabi_dmul>
 801108c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011090:	e7bc      	b.n	801100c <_dtoa_r+0x5ac>
 8011092:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011096:	4656      	mov	r6, sl
 8011098:	e9dd 2300 	ldrd	r2, r3, [sp]
 801109c:	4620      	mov	r0, r4
 801109e:	4629      	mov	r1, r5
 80110a0:	f7ef fc04 	bl	80008ac <__aeabi_ddiv>
 80110a4:	f7ef fd88 	bl	8000bb8 <__aeabi_d2iz>
 80110a8:	4680      	mov	r8, r0
 80110aa:	f7ef fa6b 	bl	8000584 <__aeabi_i2d>
 80110ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110b2:	f7ef fad1 	bl	8000658 <__aeabi_dmul>
 80110b6:	4602      	mov	r2, r0
 80110b8:	460b      	mov	r3, r1
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80110c2:	f7ef f911 	bl	80002e8 <__aeabi_dsub>
 80110c6:	f806 4b01 	strb.w	r4, [r6], #1
 80110ca:	9d03      	ldr	r5, [sp, #12]
 80110cc:	eba6 040a 	sub.w	r4, r6, sl
 80110d0:	42a5      	cmp	r5, r4
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	d133      	bne.n	8011140 <_dtoa_r+0x6e0>
 80110d8:	f7ef f908 	bl	80002ec <__adddf3>
 80110dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	f7ef fd48 	bl	8000b78 <__aeabi_dcmpgt>
 80110e8:	b9c0      	cbnz	r0, 801111c <_dtoa_r+0x6bc>
 80110ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7ef fd19 	bl	8000b28 <__aeabi_dcmpeq>
 80110f6:	b110      	cbz	r0, 80110fe <_dtoa_r+0x69e>
 80110f8:	f018 0f01 	tst.w	r8, #1
 80110fc:	d10e      	bne.n	801111c <_dtoa_r+0x6bc>
 80110fe:	9902      	ldr	r1, [sp, #8]
 8011100:	4648      	mov	r0, r9
 8011102:	f000 fb07 	bl	8011714 <_Bfree>
 8011106:	2300      	movs	r3, #0
 8011108:	7033      	strb	r3, [r6, #0]
 801110a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801110c:	3701      	adds	r7, #1
 801110e:	601f      	str	r7, [r3, #0]
 8011110:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 824b 	beq.w	80115ae <_dtoa_r+0xb4e>
 8011118:	601e      	str	r6, [r3, #0]
 801111a:	e248      	b.n	80115ae <_dtoa_r+0xb4e>
 801111c:	46b8      	mov	r8, r7
 801111e:	4633      	mov	r3, r6
 8011120:	461e      	mov	r6, r3
 8011122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011126:	2a39      	cmp	r2, #57	@ 0x39
 8011128:	d106      	bne.n	8011138 <_dtoa_r+0x6d8>
 801112a:	459a      	cmp	sl, r3
 801112c:	d1f8      	bne.n	8011120 <_dtoa_r+0x6c0>
 801112e:	2230      	movs	r2, #48	@ 0x30
 8011130:	f108 0801 	add.w	r8, r8, #1
 8011134:	f88a 2000 	strb.w	r2, [sl]
 8011138:	781a      	ldrb	r2, [r3, #0]
 801113a:	3201      	adds	r2, #1
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	e7a0      	b.n	8011082 <_dtoa_r+0x622>
 8011140:	4b6f      	ldr	r3, [pc, #444]	@ (8011300 <_dtoa_r+0x8a0>)
 8011142:	2200      	movs	r2, #0
 8011144:	f7ef fa88 	bl	8000658 <__aeabi_dmul>
 8011148:	2200      	movs	r2, #0
 801114a:	2300      	movs	r3, #0
 801114c:	4604      	mov	r4, r0
 801114e:	460d      	mov	r5, r1
 8011150:	f7ef fcea 	bl	8000b28 <__aeabi_dcmpeq>
 8011154:	2800      	cmp	r0, #0
 8011156:	d09f      	beq.n	8011098 <_dtoa_r+0x638>
 8011158:	e7d1      	b.n	80110fe <_dtoa_r+0x69e>
 801115a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801115c:	2a00      	cmp	r2, #0
 801115e:	f000 80ea 	beq.w	8011336 <_dtoa_r+0x8d6>
 8011162:	9a07      	ldr	r2, [sp, #28]
 8011164:	2a01      	cmp	r2, #1
 8011166:	f300 80cd 	bgt.w	8011304 <_dtoa_r+0x8a4>
 801116a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801116c:	2a00      	cmp	r2, #0
 801116e:	f000 80c1 	beq.w	80112f4 <_dtoa_r+0x894>
 8011172:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011176:	9c08      	ldr	r4, [sp, #32]
 8011178:	9e00      	ldr	r6, [sp, #0]
 801117a:	9a00      	ldr	r2, [sp, #0]
 801117c:	441a      	add	r2, r3
 801117e:	9200      	str	r2, [sp, #0]
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	2101      	movs	r1, #1
 8011184:	441a      	add	r2, r3
 8011186:	4648      	mov	r0, r9
 8011188:	9206      	str	r2, [sp, #24]
 801118a:	f000 fb77 	bl	801187c <__i2b>
 801118e:	4605      	mov	r5, r0
 8011190:	b166      	cbz	r6, 80111ac <_dtoa_r+0x74c>
 8011192:	9b06      	ldr	r3, [sp, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	dd09      	ble.n	80111ac <_dtoa_r+0x74c>
 8011198:	42b3      	cmp	r3, r6
 801119a:	9a00      	ldr	r2, [sp, #0]
 801119c:	bfa8      	it	ge
 801119e:	4633      	movge	r3, r6
 80111a0:	1ad2      	subs	r2, r2, r3
 80111a2:	9200      	str	r2, [sp, #0]
 80111a4:	9a06      	ldr	r2, [sp, #24]
 80111a6:	1af6      	subs	r6, r6, r3
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	9306      	str	r3, [sp, #24]
 80111ac:	9b08      	ldr	r3, [sp, #32]
 80111ae:	b30b      	cbz	r3, 80111f4 <_dtoa_r+0x794>
 80111b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 80c6 	beq.w	8011344 <_dtoa_r+0x8e4>
 80111b8:	2c00      	cmp	r4, #0
 80111ba:	f000 80c0 	beq.w	801133e <_dtoa_r+0x8de>
 80111be:	4629      	mov	r1, r5
 80111c0:	4622      	mov	r2, r4
 80111c2:	4648      	mov	r0, r9
 80111c4:	f000 fc12 	bl	80119ec <__pow5mult>
 80111c8:	9a02      	ldr	r2, [sp, #8]
 80111ca:	4601      	mov	r1, r0
 80111cc:	4605      	mov	r5, r0
 80111ce:	4648      	mov	r0, r9
 80111d0:	f000 fb6a 	bl	80118a8 <__multiply>
 80111d4:	9902      	ldr	r1, [sp, #8]
 80111d6:	4680      	mov	r8, r0
 80111d8:	4648      	mov	r0, r9
 80111da:	f000 fa9b 	bl	8011714 <_Bfree>
 80111de:	9b08      	ldr	r3, [sp, #32]
 80111e0:	1b1b      	subs	r3, r3, r4
 80111e2:	9308      	str	r3, [sp, #32]
 80111e4:	f000 80b1 	beq.w	801134a <_dtoa_r+0x8ea>
 80111e8:	9a08      	ldr	r2, [sp, #32]
 80111ea:	4641      	mov	r1, r8
 80111ec:	4648      	mov	r0, r9
 80111ee:	f000 fbfd 	bl	80119ec <__pow5mult>
 80111f2:	9002      	str	r0, [sp, #8]
 80111f4:	2101      	movs	r1, #1
 80111f6:	4648      	mov	r0, r9
 80111f8:	f000 fb40 	bl	801187c <__i2b>
 80111fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111fe:	4604      	mov	r4, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 81d8 	beq.w	80115b6 <_dtoa_r+0xb56>
 8011206:	461a      	mov	r2, r3
 8011208:	4601      	mov	r1, r0
 801120a:	4648      	mov	r0, r9
 801120c:	f000 fbee 	bl	80119ec <__pow5mult>
 8011210:	9b07      	ldr	r3, [sp, #28]
 8011212:	2b01      	cmp	r3, #1
 8011214:	4604      	mov	r4, r0
 8011216:	f300 809f 	bgt.w	8011358 <_dtoa_r+0x8f8>
 801121a:	9b04      	ldr	r3, [sp, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	f040 8097 	bne.w	8011350 <_dtoa_r+0x8f0>
 8011222:	9b05      	ldr	r3, [sp, #20]
 8011224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011228:	2b00      	cmp	r3, #0
 801122a:	f040 8093 	bne.w	8011354 <_dtoa_r+0x8f4>
 801122e:	9b05      	ldr	r3, [sp, #20]
 8011230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011234:	0d1b      	lsrs	r3, r3, #20
 8011236:	051b      	lsls	r3, r3, #20
 8011238:	b133      	cbz	r3, 8011248 <_dtoa_r+0x7e8>
 801123a:	9b00      	ldr	r3, [sp, #0]
 801123c:	3301      	adds	r3, #1
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	9b06      	ldr	r3, [sp, #24]
 8011242:	3301      	adds	r3, #1
 8011244:	9306      	str	r3, [sp, #24]
 8011246:	2301      	movs	r3, #1
 8011248:	9308      	str	r3, [sp, #32]
 801124a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801124c:	2b00      	cmp	r3, #0
 801124e:	f000 81b8 	beq.w	80115c2 <_dtoa_r+0xb62>
 8011252:	6923      	ldr	r3, [r4, #16]
 8011254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011258:	6918      	ldr	r0, [r3, #16]
 801125a:	f000 fac3 	bl	80117e4 <__hi0bits>
 801125e:	f1c0 0020 	rsb	r0, r0, #32
 8011262:	9b06      	ldr	r3, [sp, #24]
 8011264:	4418      	add	r0, r3
 8011266:	f010 001f 	ands.w	r0, r0, #31
 801126a:	f000 8082 	beq.w	8011372 <_dtoa_r+0x912>
 801126e:	f1c0 0320 	rsb	r3, r0, #32
 8011272:	2b04      	cmp	r3, #4
 8011274:	dd73      	ble.n	801135e <_dtoa_r+0x8fe>
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	f1c0 001c 	rsb	r0, r0, #28
 801127c:	4403      	add	r3, r0
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	9b06      	ldr	r3, [sp, #24]
 8011282:	4403      	add	r3, r0
 8011284:	4406      	add	r6, r0
 8011286:	9306      	str	r3, [sp, #24]
 8011288:	9b00      	ldr	r3, [sp, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	dd05      	ble.n	801129a <_dtoa_r+0x83a>
 801128e:	9902      	ldr	r1, [sp, #8]
 8011290:	461a      	mov	r2, r3
 8011292:	4648      	mov	r0, r9
 8011294:	f000 fc04 	bl	8011aa0 <__lshift>
 8011298:	9002      	str	r0, [sp, #8]
 801129a:	9b06      	ldr	r3, [sp, #24]
 801129c:	2b00      	cmp	r3, #0
 801129e:	dd05      	ble.n	80112ac <_dtoa_r+0x84c>
 80112a0:	4621      	mov	r1, r4
 80112a2:	461a      	mov	r2, r3
 80112a4:	4648      	mov	r0, r9
 80112a6:	f000 fbfb 	bl	8011aa0 <__lshift>
 80112aa:	4604      	mov	r4, r0
 80112ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d061      	beq.n	8011376 <_dtoa_r+0x916>
 80112b2:	9802      	ldr	r0, [sp, #8]
 80112b4:	4621      	mov	r1, r4
 80112b6:	f000 fc5f 	bl	8011b78 <__mcmp>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	da5b      	bge.n	8011376 <_dtoa_r+0x916>
 80112be:	2300      	movs	r3, #0
 80112c0:	9902      	ldr	r1, [sp, #8]
 80112c2:	220a      	movs	r2, #10
 80112c4:	4648      	mov	r0, r9
 80112c6:	f000 fa47 	bl	8011758 <__multadd>
 80112ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112cc:	9002      	str	r0, [sp, #8]
 80112ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f000 8177 	beq.w	80115c6 <_dtoa_r+0xb66>
 80112d8:	4629      	mov	r1, r5
 80112da:	2300      	movs	r3, #0
 80112dc:	220a      	movs	r2, #10
 80112de:	4648      	mov	r0, r9
 80112e0:	f000 fa3a 	bl	8011758 <__multadd>
 80112e4:	f1bb 0f00 	cmp.w	fp, #0
 80112e8:	4605      	mov	r5, r0
 80112ea:	dc6f      	bgt.n	80113cc <_dtoa_r+0x96c>
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	dc49      	bgt.n	8011386 <_dtoa_r+0x926>
 80112f2:	e06b      	b.n	80113cc <_dtoa_r+0x96c>
 80112f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80112fa:	e73c      	b.n	8011176 <_dtoa_r+0x716>
 80112fc:	3fe00000 	.word	0x3fe00000
 8011300:	40240000 	.word	0x40240000
 8011304:	9b03      	ldr	r3, [sp, #12]
 8011306:	1e5c      	subs	r4, r3, #1
 8011308:	9b08      	ldr	r3, [sp, #32]
 801130a:	42a3      	cmp	r3, r4
 801130c:	db09      	blt.n	8011322 <_dtoa_r+0x8c2>
 801130e:	1b1c      	subs	r4, r3, r4
 8011310:	9b03      	ldr	r3, [sp, #12]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f6bf af30 	bge.w	8011178 <_dtoa_r+0x718>
 8011318:	9b00      	ldr	r3, [sp, #0]
 801131a:	9a03      	ldr	r2, [sp, #12]
 801131c:	1a9e      	subs	r6, r3, r2
 801131e:	2300      	movs	r3, #0
 8011320:	e72b      	b.n	801117a <_dtoa_r+0x71a>
 8011322:	9b08      	ldr	r3, [sp, #32]
 8011324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011326:	9408      	str	r4, [sp, #32]
 8011328:	1ae3      	subs	r3, r4, r3
 801132a:	441a      	add	r2, r3
 801132c:	9e00      	ldr	r6, [sp, #0]
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	920d      	str	r2, [sp, #52]	@ 0x34
 8011332:	2400      	movs	r4, #0
 8011334:	e721      	b.n	801117a <_dtoa_r+0x71a>
 8011336:	9c08      	ldr	r4, [sp, #32]
 8011338:	9e00      	ldr	r6, [sp, #0]
 801133a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801133c:	e728      	b.n	8011190 <_dtoa_r+0x730>
 801133e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011342:	e751      	b.n	80111e8 <_dtoa_r+0x788>
 8011344:	9a08      	ldr	r2, [sp, #32]
 8011346:	9902      	ldr	r1, [sp, #8]
 8011348:	e750      	b.n	80111ec <_dtoa_r+0x78c>
 801134a:	f8cd 8008 	str.w	r8, [sp, #8]
 801134e:	e751      	b.n	80111f4 <_dtoa_r+0x794>
 8011350:	2300      	movs	r3, #0
 8011352:	e779      	b.n	8011248 <_dtoa_r+0x7e8>
 8011354:	9b04      	ldr	r3, [sp, #16]
 8011356:	e777      	b.n	8011248 <_dtoa_r+0x7e8>
 8011358:	2300      	movs	r3, #0
 801135a:	9308      	str	r3, [sp, #32]
 801135c:	e779      	b.n	8011252 <_dtoa_r+0x7f2>
 801135e:	d093      	beq.n	8011288 <_dtoa_r+0x828>
 8011360:	9a00      	ldr	r2, [sp, #0]
 8011362:	331c      	adds	r3, #28
 8011364:	441a      	add	r2, r3
 8011366:	9200      	str	r2, [sp, #0]
 8011368:	9a06      	ldr	r2, [sp, #24]
 801136a:	441a      	add	r2, r3
 801136c:	441e      	add	r6, r3
 801136e:	9206      	str	r2, [sp, #24]
 8011370:	e78a      	b.n	8011288 <_dtoa_r+0x828>
 8011372:	4603      	mov	r3, r0
 8011374:	e7f4      	b.n	8011360 <_dtoa_r+0x900>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	46b8      	mov	r8, r7
 801137c:	dc20      	bgt.n	80113c0 <_dtoa_r+0x960>
 801137e:	469b      	mov	fp, r3
 8011380:	9b07      	ldr	r3, [sp, #28]
 8011382:	2b02      	cmp	r3, #2
 8011384:	dd1e      	ble.n	80113c4 <_dtoa_r+0x964>
 8011386:	f1bb 0f00 	cmp.w	fp, #0
 801138a:	f47f adb1 	bne.w	8010ef0 <_dtoa_r+0x490>
 801138e:	4621      	mov	r1, r4
 8011390:	465b      	mov	r3, fp
 8011392:	2205      	movs	r2, #5
 8011394:	4648      	mov	r0, r9
 8011396:	f000 f9df 	bl	8011758 <__multadd>
 801139a:	4601      	mov	r1, r0
 801139c:	4604      	mov	r4, r0
 801139e:	9802      	ldr	r0, [sp, #8]
 80113a0:	f000 fbea 	bl	8011b78 <__mcmp>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f77f ada3 	ble.w	8010ef0 <_dtoa_r+0x490>
 80113aa:	4656      	mov	r6, sl
 80113ac:	2331      	movs	r3, #49	@ 0x31
 80113ae:	f806 3b01 	strb.w	r3, [r6], #1
 80113b2:	f108 0801 	add.w	r8, r8, #1
 80113b6:	e59f      	b.n	8010ef8 <_dtoa_r+0x498>
 80113b8:	9c03      	ldr	r4, [sp, #12]
 80113ba:	46b8      	mov	r8, r7
 80113bc:	4625      	mov	r5, r4
 80113be:	e7f4      	b.n	80113aa <_dtoa_r+0x94a>
 80113c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80113c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8101 	beq.w	80115ce <_dtoa_r+0xb6e>
 80113cc:	2e00      	cmp	r6, #0
 80113ce:	dd05      	ble.n	80113dc <_dtoa_r+0x97c>
 80113d0:	4629      	mov	r1, r5
 80113d2:	4632      	mov	r2, r6
 80113d4:	4648      	mov	r0, r9
 80113d6:	f000 fb63 	bl	8011aa0 <__lshift>
 80113da:	4605      	mov	r5, r0
 80113dc:	9b08      	ldr	r3, [sp, #32]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d05c      	beq.n	801149c <_dtoa_r+0xa3c>
 80113e2:	6869      	ldr	r1, [r5, #4]
 80113e4:	4648      	mov	r0, r9
 80113e6:	f000 f955 	bl	8011694 <_Balloc>
 80113ea:	4606      	mov	r6, r0
 80113ec:	b928      	cbnz	r0, 80113fa <_dtoa_r+0x99a>
 80113ee:	4b82      	ldr	r3, [pc, #520]	@ (80115f8 <_dtoa_r+0xb98>)
 80113f0:	4602      	mov	r2, r0
 80113f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80113f6:	f7ff bb4a 	b.w	8010a8e <_dtoa_r+0x2e>
 80113fa:	692a      	ldr	r2, [r5, #16]
 80113fc:	3202      	adds	r2, #2
 80113fe:	0092      	lsls	r2, r2, #2
 8011400:	f105 010c 	add.w	r1, r5, #12
 8011404:	300c      	adds	r0, #12
 8011406:	f7ff fa92 	bl	801092e <memcpy>
 801140a:	2201      	movs	r2, #1
 801140c:	4631      	mov	r1, r6
 801140e:	4648      	mov	r0, r9
 8011410:	f000 fb46 	bl	8011aa0 <__lshift>
 8011414:	f10a 0301 	add.w	r3, sl, #1
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	eb0a 030b 	add.w	r3, sl, fp
 801141e:	9308      	str	r3, [sp, #32]
 8011420:	9b04      	ldr	r3, [sp, #16]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	462f      	mov	r7, r5
 8011428:	9306      	str	r3, [sp, #24]
 801142a:	4605      	mov	r5, r0
 801142c:	9b00      	ldr	r3, [sp, #0]
 801142e:	9802      	ldr	r0, [sp, #8]
 8011430:	4621      	mov	r1, r4
 8011432:	f103 3bff 	add.w	fp, r3, #4294967295
 8011436:	f7ff fa88 	bl	801094a <quorem>
 801143a:	4603      	mov	r3, r0
 801143c:	3330      	adds	r3, #48	@ 0x30
 801143e:	9003      	str	r0, [sp, #12]
 8011440:	4639      	mov	r1, r7
 8011442:	9802      	ldr	r0, [sp, #8]
 8011444:	9309      	str	r3, [sp, #36]	@ 0x24
 8011446:	f000 fb97 	bl	8011b78 <__mcmp>
 801144a:	462a      	mov	r2, r5
 801144c:	9004      	str	r0, [sp, #16]
 801144e:	4621      	mov	r1, r4
 8011450:	4648      	mov	r0, r9
 8011452:	f000 fbad 	bl	8011bb0 <__mdiff>
 8011456:	68c2      	ldr	r2, [r0, #12]
 8011458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801145a:	4606      	mov	r6, r0
 801145c:	bb02      	cbnz	r2, 80114a0 <_dtoa_r+0xa40>
 801145e:	4601      	mov	r1, r0
 8011460:	9802      	ldr	r0, [sp, #8]
 8011462:	f000 fb89 	bl	8011b78 <__mcmp>
 8011466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011468:	4602      	mov	r2, r0
 801146a:	4631      	mov	r1, r6
 801146c:	4648      	mov	r0, r9
 801146e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011470:	9309      	str	r3, [sp, #36]	@ 0x24
 8011472:	f000 f94f 	bl	8011714 <_Bfree>
 8011476:	9b07      	ldr	r3, [sp, #28]
 8011478:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801147a:	9e00      	ldr	r6, [sp, #0]
 801147c:	ea42 0103 	orr.w	r1, r2, r3
 8011480:	9b06      	ldr	r3, [sp, #24]
 8011482:	4319      	orrs	r1, r3
 8011484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011486:	d10d      	bne.n	80114a4 <_dtoa_r+0xa44>
 8011488:	2b39      	cmp	r3, #57	@ 0x39
 801148a:	d027      	beq.n	80114dc <_dtoa_r+0xa7c>
 801148c:	9a04      	ldr	r2, [sp, #16]
 801148e:	2a00      	cmp	r2, #0
 8011490:	dd01      	ble.n	8011496 <_dtoa_r+0xa36>
 8011492:	9b03      	ldr	r3, [sp, #12]
 8011494:	3331      	adds	r3, #49	@ 0x31
 8011496:	f88b 3000 	strb.w	r3, [fp]
 801149a:	e52e      	b.n	8010efa <_dtoa_r+0x49a>
 801149c:	4628      	mov	r0, r5
 801149e:	e7b9      	b.n	8011414 <_dtoa_r+0x9b4>
 80114a0:	2201      	movs	r2, #1
 80114a2:	e7e2      	b.n	801146a <_dtoa_r+0xa0a>
 80114a4:	9904      	ldr	r1, [sp, #16]
 80114a6:	2900      	cmp	r1, #0
 80114a8:	db04      	blt.n	80114b4 <_dtoa_r+0xa54>
 80114aa:	9807      	ldr	r0, [sp, #28]
 80114ac:	4301      	orrs	r1, r0
 80114ae:	9806      	ldr	r0, [sp, #24]
 80114b0:	4301      	orrs	r1, r0
 80114b2:	d120      	bne.n	80114f6 <_dtoa_r+0xa96>
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	ddee      	ble.n	8011496 <_dtoa_r+0xa36>
 80114b8:	9902      	ldr	r1, [sp, #8]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2201      	movs	r2, #1
 80114be:	4648      	mov	r0, r9
 80114c0:	f000 faee 	bl	8011aa0 <__lshift>
 80114c4:	4621      	mov	r1, r4
 80114c6:	9002      	str	r0, [sp, #8]
 80114c8:	f000 fb56 	bl	8011b78 <__mcmp>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	9b00      	ldr	r3, [sp, #0]
 80114d0:	dc02      	bgt.n	80114d8 <_dtoa_r+0xa78>
 80114d2:	d1e0      	bne.n	8011496 <_dtoa_r+0xa36>
 80114d4:	07da      	lsls	r2, r3, #31
 80114d6:	d5de      	bpl.n	8011496 <_dtoa_r+0xa36>
 80114d8:	2b39      	cmp	r3, #57	@ 0x39
 80114da:	d1da      	bne.n	8011492 <_dtoa_r+0xa32>
 80114dc:	2339      	movs	r3, #57	@ 0x39
 80114de:	f88b 3000 	strb.w	r3, [fp]
 80114e2:	4633      	mov	r3, r6
 80114e4:	461e      	mov	r6, r3
 80114e6:	3b01      	subs	r3, #1
 80114e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80114ec:	2a39      	cmp	r2, #57	@ 0x39
 80114ee:	d04e      	beq.n	801158e <_dtoa_r+0xb2e>
 80114f0:	3201      	adds	r2, #1
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	e501      	b.n	8010efa <_dtoa_r+0x49a>
 80114f6:	2a00      	cmp	r2, #0
 80114f8:	dd03      	ble.n	8011502 <_dtoa_r+0xaa2>
 80114fa:	2b39      	cmp	r3, #57	@ 0x39
 80114fc:	d0ee      	beq.n	80114dc <_dtoa_r+0xa7c>
 80114fe:	3301      	adds	r3, #1
 8011500:	e7c9      	b.n	8011496 <_dtoa_r+0xa36>
 8011502:	9a00      	ldr	r2, [sp, #0]
 8011504:	9908      	ldr	r1, [sp, #32]
 8011506:	f802 3c01 	strb.w	r3, [r2, #-1]
 801150a:	428a      	cmp	r2, r1
 801150c:	d028      	beq.n	8011560 <_dtoa_r+0xb00>
 801150e:	9902      	ldr	r1, [sp, #8]
 8011510:	2300      	movs	r3, #0
 8011512:	220a      	movs	r2, #10
 8011514:	4648      	mov	r0, r9
 8011516:	f000 f91f 	bl	8011758 <__multadd>
 801151a:	42af      	cmp	r7, r5
 801151c:	9002      	str	r0, [sp, #8]
 801151e:	f04f 0300 	mov.w	r3, #0
 8011522:	f04f 020a 	mov.w	r2, #10
 8011526:	4639      	mov	r1, r7
 8011528:	4648      	mov	r0, r9
 801152a:	d107      	bne.n	801153c <_dtoa_r+0xadc>
 801152c:	f000 f914 	bl	8011758 <__multadd>
 8011530:	4607      	mov	r7, r0
 8011532:	4605      	mov	r5, r0
 8011534:	9b00      	ldr	r3, [sp, #0]
 8011536:	3301      	adds	r3, #1
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	e777      	b.n	801142c <_dtoa_r+0x9cc>
 801153c:	f000 f90c 	bl	8011758 <__multadd>
 8011540:	4629      	mov	r1, r5
 8011542:	4607      	mov	r7, r0
 8011544:	2300      	movs	r3, #0
 8011546:	220a      	movs	r2, #10
 8011548:	4648      	mov	r0, r9
 801154a:	f000 f905 	bl	8011758 <__multadd>
 801154e:	4605      	mov	r5, r0
 8011550:	e7f0      	b.n	8011534 <_dtoa_r+0xad4>
 8011552:	f1bb 0f00 	cmp.w	fp, #0
 8011556:	bfcc      	ite	gt
 8011558:	465e      	movgt	r6, fp
 801155a:	2601      	movle	r6, #1
 801155c:	4456      	add	r6, sl
 801155e:	2700      	movs	r7, #0
 8011560:	9902      	ldr	r1, [sp, #8]
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	2201      	movs	r2, #1
 8011566:	4648      	mov	r0, r9
 8011568:	f000 fa9a 	bl	8011aa0 <__lshift>
 801156c:	4621      	mov	r1, r4
 801156e:	9002      	str	r0, [sp, #8]
 8011570:	f000 fb02 	bl	8011b78 <__mcmp>
 8011574:	2800      	cmp	r0, #0
 8011576:	dcb4      	bgt.n	80114e2 <_dtoa_r+0xa82>
 8011578:	d102      	bne.n	8011580 <_dtoa_r+0xb20>
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	07db      	lsls	r3, r3, #31
 801157e:	d4b0      	bmi.n	80114e2 <_dtoa_r+0xa82>
 8011580:	4633      	mov	r3, r6
 8011582:	461e      	mov	r6, r3
 8011584:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011588:	2a30      	cmp	r2, #48	@ 0x30
 801158a:	d0fa      	beq.n	8011582 <_dtoa_r+0xb22>
 801158c:	e4b5      	b.n	8010efa <_dtoa_r+0x49a>
 801158e:	459a      	cmp	sl, r3
 8011590:	d1a8      	bne.n	80114e4 <_dtoa_r+0xa84>
 8011592:	2331      	movs	r3, #49	@ 0x31
 8011594:	f108 0801 	add.w	r8, r8, #1
 8011598:	f88a 3000 	strb.w	r3, [sl]
 801159c:	e4ad      	b.n	8010efa <_dtoa_r+0x49a>
 801159e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80115a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80115fc <_dtoa_r+0xb9c>
 80115a4:	b11b      	cbz	r3, 80115ae <_dtoa_r+0xb4e>
 80115a6:	f10a 0308 	add.w	r3, sl, #8
 80115aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	4650      	mov	r0, sl
 80115b0:	b017      	add	sp, #92	@ 0x5c
 80115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b6:	9b07      	ldr	r3, [sp, #28]
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	f77f ae2e 	ble.w	801121a <_dtoa_r+0x7ba>
 80115be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115c0:	9308      	str	r3, [sp, #32]
 80115c2:	2001      	movs	r0, #1
 80115c4:	e64d      	b.n	8011262 <_dtoa_r+0x802>
 80115c6:	f1bb 0f00 	cmp.w	fp, #0
 80115ca:	f77f aed9 	ble.w	8011380 <_dtoa_r+0x920>
 80115ce:	4656      	mov	r6, sl
 80115d0:	9802      	ldr	r0, [sp, #8]
 80115d2:	4621      	mov	r1, r4
 80115d4:	f7ff f9b9 	bl	801094a <quorem>
 80115d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80115dc:	f806 3b01 	strb.w	r3, [r6], #1
 80115e0:	eba6 020a 	sub.w	r2, r6, sl
 80115e4:	4593      	cmp	fp, r2
 80115e6:	ddb4      	ble.n	8011552 <_dtoa_r+0xaf2>
 80115e8:	9902      	ldr	r1, [sp, #8]
 80115ea:	2300      	movs	r3, #0
 80115ec:	220a      	movs	r2, #10
 80115ee:	4648      	mov	r0, r9
 80115f0:	f000 f8b2 	bl	8011758 <__multadd>
 80115f4:	9002      	str	r0, [sp, #8]
 80115f6:	e7eb      	b.n	80115d0 <_dtoa_r+0xb70>
 80115f8:	080154a4 	.word	0x080154a4
 80115fc:	08015428 	.word	0x08015428

08011600 <_free_r>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4605      	mov	r5, r0
 8011604:	2900      	cmp	r1, #0
 8011606:	d041      	beq.n	801168c <_free_r+0x8c>
 8011608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801160c:	1f0c      	subs	r4, r1, #4
 801160e:	2b00      	cmp	r3, #0
 8011610:	bfb8      	it	lt
 8011612:	18e4      	addlt	r4, r4, r3
 8011614:	f7fe fa1c 	bl	800fa50 <__malloc_lock>
 8011618:	4a1d      	ldr	r2, [pc, #116]	@ (8011690 <_free_r+0x90>)
 801161a:	6813      	ldr	r3, [r2, #0]
 801161c:	b933      	cbnz	r3, 801162c <_free_r+0x2c>
 801161e:	6063      	str	r3, [r4, #4]
 8011620:	6014      	str	r4, [r2, #0]
 8011622:	4628      	mov	r0, r5
 8011624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011628:	f7fe ba18 	b.w	800fa5c <__malloc_unlock>
 801162c:	42a3      	cmp	r3, r4
 801162e:	d908      	bls.n	8011642 <_free_r+0x42>
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	1821      	adds	r1, r4, r0
 8011634:	428b      	cmp	r3, r1
 8011636:	bf01      	itttt	eq
 8011638:	6819      	ldreq	r1, [r3, #0]
 801163a:	685b      	ldreq	r3, [r3, #4]
 801163c:	1809      	addeq	r1, r1, r0
 801163e:	6021      	streq	r1, [r4, #0]
 8011640:	e7ed      	b.n	801161e <_free_r+0x1e>
 8011642:	461a      	mov	r2, r3
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	b10b      	cbz	r3, 801164c <_free_r+0x4c>
 8011648:	42a3      	cmp	r3, r4
 801164a:	d9fa      	bls.n	8011642 <_free_r+0x42>
 801164c:	6811      	ldr	r1, [r2, #0]
 801164e:	1850      	adds	r0, r2, r1
 8011650:	42a0      	cmp	r0, r4
 8011652:	d10b      	bne.n	801166c <_free_r+0x6c>
 8011654:	6820      	ldr	r0, [r4, #0]
 8011656:	4401      	add	r1, r0
 8011658:	1850      	adds	r0, r2, r1
 801165a:	4283      	cmp	r3, r0
 801165c:	6011      	str	r1, [r2, #0]
 801165e:	d1e0      	bne.n	8011622 <_free_r+0x22>
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	6053      	str	r3, [r2, #4]
 8011666:	4408      	add	r0, r1
 8011668:	6010      	str	r0, [r2, #0]
 801166a:	e7da      	b.n	8011622 <_free_r+0x22>
 801166c:	d902      	bls.n	8011674 <_free_r+0x74>
 801166e:	230c      	movs	r3, #12
 8011670:	602b      	str	r3, [r5, #0]
 8011672:	e7d6      	b.n	8011622 <_free_r+0x22>
 8011674:	6820      	ldr	r0, [r4, #0]
 8011676:	1821      	adds	r1, r4, r0
 8011678:	428b      	cmp	r3, r1
 801167a:	bf04      	itt	eq
 801167c:	6819      	ldreq	r1, [r3, #0]
 801167e:	685b      	ldreq	r3, [r3, #4]
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	bf04      	itt	eq
 8011684:	1809      	addeq	r1, r1, r0
 8011686:	6021      	streq	r1, [r4, #0]
 8011688:	6054      	str	r4, [r2, #4]
 801168a:	e7ca      	b.n	8011622 <_free_r+0x22>
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	bf00      	nop
 8011690:	20007040 	.word	0x20007040

08011694 <_Balloc>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	69c6      	ldr	r6, [r0, #28]
 8011698:	4604      	mov	r4, r0
 801169a:	460d      	mov	r5, r1
 801169c:	b976      	cbnz	r6, 80116bc <_Balloc+0x28>
 801169e:	2010      	movs	r0, #16
 80116a0:	f7fe f924 	bl	800f8ec <malloc>
 80116a4:	4602      	mov	r2, r0
 80116a6:	61e0      	str	r0, [r4, #28]
 80116a8:	b920      	cbnz	r0, 80116b4 <_Balloc+0x20>
 80116aa:	4b18      	ldr	r3, [pc, #96]	@ (801170c <_Balloc+0x78>)
 80116ac:	4818      	ldr	r0, [pc, #96]	@ (8011710 <_Balloc+0x7c>)
 80116ae:	216b      	movs	r1, #107	@ 0x6b
 80116b0:	f000 ff44 	bl	801253c <__assert_func>
 80116b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116b8:	6006      	str	r6, [r0, #0]
 80116ba:	60c6      	str	r6, [r0, #12]
 80116bc:	69e6      	ldr	r6, [r4, #28]
 80116be:	68f3      	ldr	r3, [r6, #12]
 80116c0:	b183      	cbz	r3, 80116e4 <_Balloc+0x50>
 80116c2:	69e3      	ldr	r3, [r4, #28]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116ca:	b9b8      	cbnz	r0, 80116fc <_Balloc+0x68>
 80116cc:	2101      	movs	r1, #1
 80116ce:	fa01 f605 	lsl.w	r6, r1, r5
 80116d2:	1d72      	adds	r2, r6, #5
 80116d4:	0092      	lsls	r2, r2, #2
 80116d6:	4620      	mov	r0, r4
 80116d8:	f000 ff4e 	bl	8012578 <_calloc_r>
 80116dc:	b160      	cbz	r0, 80116f8 <_Balloc+0x64>
 80116de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116e2:	e00e      	b.n	8011702 <_Balloc+0x6e>
 80116e4:	2221      	movs	r2, #33	@ 0x21
 80116e6:	2104      	movs	r1, #4
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 ff45 	bl	8012578 <_calloc_r>
 80116ee:	69e3      	ldr	r3, [r4, #28]
 80116f0:	60f0      	str	r0, [r6, #12]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1e4      	bne.n	80116c2 <_Balloc+0x2e>
 80116f8:	2000      	movs	r0, #0
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
 80116fc:	6802      	ldr	r2, [r0, #0]
 80116fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011702:	2300      	movs	r3, #0
 8011704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011708:	e7f7      	b.n	80116fa <_Balloc+0x66>
 801170a:	bf00      	nop
 801170c:	08015435 	.word	0x08015435
 8011710:	080154b5 	.word	0x080154b5

08011714 <_Bfree>:
 8011714:	b570      	push	{r4, r5, r6, lr}
 8011716:	69c6      	ldr	r6, [r0, #28]
 8011718:	4605      	mov	r5, r0
 801171a:	460c      	mov	r4, r1
 801171c:	b976      	cbnz	r6, 801173c <_Bfree+0x28>
 801171e:	2010      	movs	r0, #16
 8011720:	f7fe f8e4 	bl	800f8ec <malloc>
 8011724:	4602      	mov	r2, r0
 8011726:	61e8      	str	r0, [r5, #28]
 8011728:	b920      	cbnz	r0, 8011734 <_Bfree+0x20>
 801172a:	4b09      	ldr	r3, [pc, #36]	@ (8011750 <_Bfree+0x3c>)
 801172c:	4809      	ldr	r0, [pc, #36]	@ (8011754 <_Bfree+0x40>)
 801172e:	218f      	movs	r1, #143	@ 0x8f
 8011730:	f000 ff04 	bl	801253c <__assert_func>
 8011734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011738:	6006      	str	r6, [r0, #0]
 801173a:	60c6      	str	r6, [r0, #12]
 801173c:	b13c      	cbz	r4, 801174e <_Bfree+0x3a>
 801173e:	69eb      	ldr	r3, [r5, #28]
 8011740:	6862      	ldr	r2, [r4, #4]
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011748:	6021      	str	r1, [r4, #0]
 801174a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801174e:	bd70      	pop	{r4, r5, r6, pc}
 8011750:	08015435 	.word	0x08015435
 8011754:	080154b5 	.word	0x080154b5

08011758 <__multadd>:
 8011758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175c:	690d      	ldr	r5, [r1, #16]
 801175e:	4607      	mov	r7, r0
 8011760:	460c      	mov	r4, r1
 8011762:	461e      	mov	r6, r3
 8011764:	f101 0c14 	add.w	ip, r1, #20
 8011768:	2000      	movs	r0, #0
 801176a:	f8dc 3000 	ldr.w	r3, [ip]
 801176e:	b299      	uxth	r1, r3
 8011770:	fb02 6101 	mla	r1, r2, r1, r6
 8011774:	0c1e      	lsrs	r6, r3, #16
 8011776:	0c0b      	lsrs	r3, r1, #16
 8011778:	fb02 3306 	mla	r3, r2, r6, r3
 801177c:	b289      	uxth	r1, r1
 801177e:	3001      	adds	r0, #1
 8011780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011784:	4285      	cmp	r5, r0
 8011786:	f84c 1b04 	str.w	r1, [ip], #4
 801178a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801178e:	dcec      	bgt.n	801176a <__multadd+0x12>
 8011790:	b30e      	cbz	r6, 80117d6 <__multadd+0x7e>
 8011792:	68a3      	ldr	r3, [r4, #8]
 8011794:	42ab      	cmp	r3, r5
 8011796:	dc19      	bgt.n	80117cc <__multadd+0x74>
 8011798:	6861      	ldr	r1, [r4, #4]
 801179a:	4638      	mov	r0, r7
 801179c:	3101      	adds	r1, #1
 801179e:	f7ff ff79 	bl	8011694 <_Balloc>
 80117a2:	4680      	mov	r8, r0
 80117a4:	b928      	cbnz	r0, 80117b2 <__multadd+0x5a>
 80117a6:	4602      	mov	r2, r0
 80117a8:	4b0c      	ldr	r3, [pc, #48]	@ (80117dc <__multadd+0x84>)
 80117aa:	480d      	ldr	r0, [pc, #52]	@ (80117e0 <__multadd+0x88>)
 80117ac:	21ba      	movs	r1, #186	@ 0xba
 80117ae:	f000 fec5 	bl	801253c <__assert_func>
 80117b2:	6922      	ldr	r2, [r4, #16]
 80117b4:	3202      	adds	r2, #2
 80117b6:	f104 010c 	add.w	r1, r4, #12
 80117ba:	0092      	lsls	r2, r2, #2
 80117bc:	300c      	adds	r0, #12
 80117be:	f7ff f8b6 	bl	801092e <memcpy>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7ff ffa5 	bl	8011714 <_Bfree>
 80117ca:	4644      	mov	r4, r8
 80117cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117d0:	3501      	adds	r5, #1
 80117d2:	615e      	str	r6, [r3, #20]
 80117d4:	6125      	str	r5, [r4, #16]
 80117d6:	4620      	mov	r0, r4
 80117d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117dc:	080154a4 	.word	0x080154a4
 80117e0:	080154b5 	.word	0x080154b5

080117e4 <__hi0bits>:
 80117e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80117e8:	4603      	mov	r3, r0
 80117ea:	bf36      	itet	cc
 80117ec:	0403      	lslcc	r3, r0, #16
 80117ee:	2000      	movcs	r0, #0
 80117f0:	2010      	movcc	r0, #16
 80117f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80117f6:	bf3c      	itt	cc
 80117f8:	021b      	lslcc	r3, r3, #8
 80117fa:	3008      	addcc	r0, #8
 80117fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011800:	bf3c      	itt	cc
 8011802:	011b      	lslcc	r3, r3, #4
 8011804:	3004      	addcc	r0, #4
 8011806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801180a:	bf3c      	itt	cc
 801180c:	009b      	lslcc	r3, r3, #2
 801180e:	3002      	addcc	r0, #2
 8011810:	2b00      	cmp	r3, #0
 8011812:	db05      	blt.n	8011820 <__hi0bits+0x3c>
 8011814:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011818:	f100 0001 	add.w	r0, r0, #1
 801181c:	bf08      	it	eq
 801181e:	2020      	moveq	r0, #32
 8011820:	4770      	bx	lr

08011822 <__lo0bits>:
 8011822:	6803      	ldr	r3, [r0, #0]
 8011824:	4602      	mov	r2, r0
 8011826:	f013 0007 	ands.w	r0, r3, #7
 801182a:	d00b      	beq.n	8011844 <__lo0bits+0x22>
 801182c:	07d9      	lsls	r1, r3, #31
 801182e:	d421      	bmi.n	8011874 <__lo0bits+0x52>
 8011830:	0798      	lsls	r0, r3, #30
 8011832:	bf49      	itett	mi
 8011834:	085b      	lsrmi	r3, r3, #1
 8011836:	089b      	lsrpl	r3, r3, #2
 8011838:	2001      	movmi	r0, #1
 801183a:	6013      	strmi	r3, [r2, #0]
 801183c:	bf5c      	itt	pl
 801183e:	6013      	strpl	r3, [r2, #0]
 8011840:	2002      	movpl	r0, #2
 8011842:	4770      	bx	lr
 8011844:	b299      	uxth	r1, r3
 8011846:	b909      	cbnz	r1, 801184c <__lo0bits+0x2a>
 8011848:	0c1b      	lsrs	r3, r3, #16
 801184a:	2010      	movs	r0, #16
 801184c:	b2d9      	uxtb	r1, r3
 801184e:	b909      	cbnz	r1, 8011854 <__lo0bits+0x32>
 8011850:	3008      	adds	r0, #8
 8011852:	0a1b      	lsrs	r3, r3, #8
 8011854:	0719      	lsls	r1, r3, #28
 8011856:	bf04      	itt	eq
 8011858:	091b      	lsreq	r3, r3, #4
 801185a:	3004      	addeq	r0, #4
 801185c:	0799      	lsls	r1, r3, #30
 801185e:	bf04      	itt	eq
 8011860:	089b      	lsreq	r3, r3, #2
 8011862:	3002      	addeq	r0, #2
 8011864:	07d9      	lsls	r1, r3, #31
 8011866:	d403      	bmi.n	8011870 <__lo0bits+0x4e>
 8011868:	085b      	lsrs	r3, r3, #1
 801186a:	f100 0001 	add.w	r0, r0, #1
 801186e:	d003      	beq.n	8011878 <__lo0bits+0x56>
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	4770      	bx	lr
 8011874:	2000      	movs	r0, #0
 8011876:	4770      	bx	lr
 8011878:	2020      	movs	r0, #32
 801187a:	4770      	bx	lr

0801187c <__i2b>:
 801187c:	b510      	push	{r4, lr}
 801187e:	460c      	mov	r4, r1
 8011880:	2101      	movs	r1, #1
 8011882:	f7ff ff07 	bl	8011694 <_Balloc>
 8011886:	4602      	mov	r2, r0
 8011888:	b928      	cbnz	r0, 8011896 <__i2b+0x1a>
 801188a:	4b05      	ldr	r3, [pc, #20]	@ (80118a0 <__i2b+0x24>)
 801188c:	4805      	ldr	r0, [pc, #20]	@ (80118a4 <__i2b+0x28>)
 801188e:	f240 1145 	movw	r1, #325	@ 0x145
 8011892:	f000 fe53 	bl	801253c <__assert_func>
 8011896:	2301      	movs	r3, #1
 8011898:	6144      	str	r4, [r0, #20]
 801189a:	6103      	str	r3, [r0, #16]
 801189c:	bd10      	pop	{r4, pc}
 801189e:	bf00      	nop
 80118a0:	080154a4 	.word	0x080154a4
 80118a4:	080154b5 	.word	0x080154b5

080118a8 <__multiply>:
 80118a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ac:	4617      	mov	r7, r2
 80118ae:	690a      	ldr	r2, [r1, #16]
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	bfa8      	it	ge
 80118b6:	463b      	movge	r3, r7
 80118b8:	4689      	mov	r9, r1
 80118ba:	bfa4      	itt	ge
 80118bc:	460f      	movge	r7, r1
 80118be:	4699      	movge	r9, r3
 80118c0:	693d      	ldr	r5, [r7, #16]
 80118c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	6879      	ldr	r1, [r7, #4]
 80118ca:	eb05 060a 	add.w	r6, r5, sl
 80118ce:	42b3      	cmp	r3, r6
 80118d0:	b085      	sub	sp, #20
 80118d2:	bfb8      	it	lt
 80118d4:	3101      	addlt	r1, #1
 80118d6:	f7ff fedd 	bl	8011694 <_Balloc>
 80118da:	b930      	cbnz	r0, 80118ea <__multiply+0x42>
 80118dc:	4602      	mov	r2, r0
 80118de:	4b41      	ldr	r3, [pc, #260]	@ (80119e4 <__multiply+0x13c>)
 80118e0:	4841      	ldr	r0, [pc, #260]	@ (80119e8 <__multiply+0x140>)
 80118e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80118e6:	f000 fe29 	bl	801253c <__assert_func>
 80118ea:	f100 0414 	add.w	r4, r0, #20
 80118ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80118f2:	4623      	mov	r3, r4
 80118f4:	2200      	movs	r2, #0
 80118f6:	4573      	cmp	r3, lr
 80118f8:	d320      	bcc.n	801193c <__multiply+0x94>
 80118fa:	f107 0814 	add.w	r8, r7, #20
 80118fe:	f109 0114 	add.w	r1, r9, #20
 8011902:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011906:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801190a:	9302      	str	r3, [sp, #8]
 801190c:	1beb      	subs	r3, r5, r7
 801190e:	3b15      	subs	r3, #21
 8011910:	f023 0303 	bic.w	r3, r3, #3
 8011914:	3304      	adds	r3, #4
 8011916:	3715      	adds	r7, #21
 8011918:	42bd      	cmp	r5, r7
 801191a:	bf38      	it	cc
 801191c:	2304      	movcc	r3, #4
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	9b02      	ldr	r3, [sp, #8]
 8011922:	9103      	str	r1, [sp, #12]
 8011924:	428b      	cmp	r3, r1
 8011926:	d80c      	bhi.n	8011942 <__multiply+0x9a>
 8011928:	2e00      	cmp	r6, #0
 801192a:	dd03      	ble.n	8011934 <__multiply+0x8c>
 801192c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011930:	2b00      	cmp	r3, #0
 8011932:	d055      	beq.n	80119e0 <__multiply+0x138>
 8011934:	6106      	str	r6, [r0, #16]
 8011936:	b005      	add	sp, #20
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	f843 2b04 	str.w	r2, [r3], #4
 8011940:	e7d9      	b.n	80118f6 <__multiply+0x4e>
 8011942:	f8b1 a000 	ldrh.w	sl, [r1]
 8011946:	f1ba 0f00 	cmp.w	sl, #0
 801194a:	d01f      	beq.n	801198c <__multiply+0xe4>
 801194c:	46c4      	mov	ip, r8
 801194e:	46a1      	mov	r9, r4
 8011950:	2700      	movs	r7, #0
 8011952:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011956:	f8d9 3000 	ldr.w	r3, [r9]
 801195a:	fa1f fb82 	uxth.w	fp, r2
 801195e:	b29b      	uxth	r3, r3
 8011960:	fb0a 330b 	mla	r3, sl, fp, r3
 8011964:	443b      	add	r3, r7
 8011966:	f8d9 7000 	ldr.w	r7, [r9]
 801196a:	0c12      	lsrs	r2, r2, #16
 801196c:	0c3f      	lsrs	r7, r7, #16
 801196e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011972:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011976:	b29b      	uxth	r3, r3
 8011978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801197c:	4565      	cmp	r5, ip
 801197e:	f849 3b04 	str.w	r3, [r9], #4
 8011982:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011986:	d8e4      	bhi.n	8011952 <__multiply+0xaa>
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	50e7      	str	r7, [r4, r3]
 801198c:	9b03      	ldr	r3, [sp, #12]
 801198e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011992:	3104      	adds	r1, #4
 8011994:	f1b9 0f00 	cmp.w	r9, #0
 8011998:	d020      	beq.n	80119dc <__multiply+0x134>
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	4647      	mov	r7, r8
 801199e:	46a4      	mov	ip, r4
 80119a0:	f04f 0a00 	mov.w	sl, #0
 80119a4:	f8b7 b000 	ldrh.w	fp, [r7]
 80119a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80119ac:	fb09 220b 	mla	r2, r9, fp, r2
 80119b0:	4452      	add	r2, sl
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119b8:	f84c 3b04 	str.w	r3, [ip], #4
 80119bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80119c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119c4:	f8bc 3000 	ldrh.w	r3, [ip]
 80119c8:	fb09 330a 	mla	r3, r9, sl, r3
 80119cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80119d0:	42bd      	cmp	r5, r7
 80119d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119d6:	d8e5      	bhi.n	80119a4 <__multiply+0xfc>
 80119d8:	9a01      	ldr	r2, [sp, #4]
 80119da:	50a3      	str	r3, [r4, r2]
 80119dc:	3404      	adds	r4, #4
 80119de:	e79f      	b.n	8011920 <__multiply+0x78>
 80119e0:	3e01      	subs	r6, #1
 80119e2:	e7a1      	b.n	8011928 <__multiply+0x80>
 80119e4:	080154a4 	.word	0x080154a4
 80119e8:	080154b5 	.word	0x080154b5

080119ec <__pow5mult>:
 80119ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	4615      	mov	r5, r2
 80119f2:	f012 0203 	ands.w	r2, r2, #3
 80119f6:	4607      	mov	r7, r0
 80119f8:	460e      	mov	r6, r1
 80119fa:	d007      	beq.n	8011a0c <__pow5mult+0x20>
 80119fc:	4c25      	ldr	r4, [pc, #148]	@ (8011a94 <__pow5mult+0xa8>)
 80119fe:	3a01      	subs	r2, #1
 8011a00:	2300      	movs	r3, #0
 8011a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a06:	f7ff fea7 	bl	8011758 <__multadd>
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	10ad      	asrs	r5, r5, #2
 8011a0e:	d03d      	beq.n	8011a8c <__pow5mult+0xa0>
 8011a10:	69fc      	ldr	r4, [r7, #28]
 8011a12:	b97c      	cbnz	r4, 8011a34 <__pow5mult+0x48>
 8011a14:	2010      	movs	r0, #16
 8011a16:	f7fd ff69 	bl	800f8ec <malloc>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	61f8      	str	r0, [r7, #28]
 8011a1e:	b928      	cbnz	r0, 8011a2c <__pow5mult+0x40>
 8011a20:	4b1d      	ldr	r3, [pc, #116]	@ (8011a98 <__pow5mult+0xac>)
 8011a22:	481e      	ldr	r0, [pc, #120]	@ (8011a9c <__pow5mult+0xb0>)
 8011a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011a28:	f000 fd88 	bl	801253c <__assert_func>
 8011a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a30:	6004      	str	r4, [r0, #0]
 8011a32:	60c4      	str	r4, [r0, #12]
 8011a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a3c:	b94c      	cbnz	r4, 8011a52 <__pow5mult+0x66>
 8011a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8011a42:	4638      	mov	r0, r7
 8011a44:	f7ff ff1a 	bl	801187c <__i2b>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a4e:	4604      	mov	r4, r0
 8011a50:	6003      	str	r3, [r0, #0]
 8011a52:	f04f 0900 	mov.w	r9, #0
 8011a56:	07eb      	lsls	r3, r5, #31
 8011a58:	d50a      	bpl.n	8011a70 <__pow5mult+0x84>
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	4622      	mov	r2, r4
 8011a5e:	4638      	mov	r0, r7
 8011a60:	f7ff ff22 	bl	80118a8 <__multiply>
 8011a64:	4631      	mov	r1, r6
 8011a66:	4680      	mov	r8, r0
 8011a68:	4638      	mov	r0, r7
 8011a6a:	f7ff fe53 	bl	8011714 <_Bfree>
 8011a6e:	4646      	mov	r6, r8
 8011a70:	106d      	asrs	r5, r5, #1
 8011a72:	d00b      	beq.n	8011a8c <__pow5mult+0xa0>
 8011a74:	6820      	ldr	r0, [r4, #0]
 8011a76:	b938      	cbnz	r0, 8011a88 <__pow5mult+0x9c>
 8011a78:	4622      	mov	r2, r4
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7ff ff13 	bl	80118a8 <__multiply>
 8011a82:	6020      	str	r0, [r4, #0]
 8011a84:	f8c0 9000 	str.w	r9, [r0]
 8011a88:	4604      	mov	r4, r0
 8011a8a:	e7e4      	b.n	8011a56 <__pow5mult+0x6a>
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a92:	bf00      	nop
 8011a94:	08015568 	.word	0x08015568
 8011a98:	08015435 	.word	0x08015435
 8011a9c:	080154b5 	.word	0x080154b5

08011aa0 <__lshift>:
 8011aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	6849      	ldr	r1, [r1, #4]
 8011aa8:	6923      	ldr	r3, [r4, #16]
 8011aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011aae:	68a3      	ldr	r3, [r4, #8]
 8011ab0:	4607      	mov	r7, r0
 8011ab2:	4691      	mov	r9, r2
 8011ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ab8:	f108 0601 	add.w	r6, r8, #1
 8011abc:	42b3      	cmp	r3, r6
 8011abe:	db0b      	blt.n	8011ad8 <__lshift+0x38>
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f7ff fde7 	bl	8011694 <_Balloc>
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	b948      	cbnz	r0, 8011ade <__lshift+0x3e>
 8011aca:	4602      	mov	r2, r0
 8011acc:	4b28      	ldr	r3, [pc, #160]	@ (8011b70 <__lshift+0xd0>)
 8011ace:	4829      	ldr	r0, [pc, #164]	@ (8011b74 <__lshift+0xd4>)
 8011ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011ad4:	f000 fd32 	bl	801253c <__assert_func>
 8011ad8:	3101      	adds	r1, #1
 8011ada:	005b      	lsls	r3, r3, #1
 8011adc:	e7ee      	b.n	8011abc <__lshift+0x1c>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	f100 0114 	add.w	r1, r0, #20
 8011ae4:	f100 0210 	add.w	r2, r0, #16
 8011ae8:	4618      	mov	r0, r3
 8011aea:	4553      	cmp	r3, sl
 8011aec:	db33      	blt.n	8011b56 <__lshift+0xb6>
 8011aee:	6920      	ldr	r0, [r4, #16]
 8011af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011af4:	f104 0314 	add.w	r3, r4, #20
 8011af8:	f019 091f 	ands.w	r9, r9, #31
 8011afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b04:	d02b      	beq.n	8011b5e <__lshift+0xbe>
 8011b06:	f1c9 0e20 	rsb	lr, r9, #32
 8011b0a:	468a      	mov	sl, r1
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	6818      	ldr	r0, [r3, #0]
 8011b10:	fa00 f009 	lsl.w	r0, r0, r9
 8011b14:	4310      	orrs	r0, r2
 8011b16:	f84a 0b04 	str.w	r0, [sl], #4
 8011b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b1e:	459c      	cmp	ip, r3
 8011b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b24:	d8f3      	bhi.n	8011b0e <__lshift+0x6e>
 8011b26:	ebac 0304 	sub.w	r3, ip, r4
 8011b2a:	3b15      	subs	r3, #21
 8011b2c:	f023 0303 	bic.w	r3, r3, #3
 8011b30:	3304      	adds	r3, #4
 8011b32:	f104 0015 	add.w	r0, r4, #21
 8011b36:	4560      	cmp	r0, ip
 8011b38:	bf88      	it	hi
 8011b3a:	2304      	movhi	r3, #4
 8011b3c:	50ca      	str	r2, [r1, r3]
 8011b3e:	b10a      	cbz	r2, 8011b44 <__lshift+0xa4>
 8011b40:	f108 0602 	add.w	r6, r8, #2
 8011b44:	3e01      	subs	r6, #1
 8011b46:	4638      	mov	r0, r7
 8011b48:	612e      	str	r6, [r5, #16]
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	f7ff fde2 	bl	8011714 <_Bfree>
 8011b50:	4628      	mov	r0, r5
 8011b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	e7c5      	b.n	8011aea <__lshift+0x4a>
 8011b5e:	3904      	subs	r1, #4
 8011b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b68:	459c      	cmp	ip, r3
 8011b6a:	d8f9      	bhi.n	8011b60 <__lshift+0xc0>
 8011b6c:	e7ea      	b.n	8011b44 <__lshift+0xa4>
 8011b6e:	bf00      	nop
 8011b70:	080154a4 	.word	0x080154a4
 8011b74:	080154b5 	.word	0x080154b5

08011b78 <__mcmp>:
 8011b78:	690a      	ldr	r2, [r1, #16]
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	6900      	ldr	r0, [r0, #16]
 8011b7e:	1a80      	subs	r0, r0, r2
 8011b80:	b530      	push	{r4, r5, lr}
 8011b82:	d10e      	bne.n	8011ba2 <__mcmp+0x2a>
 8011b84:	3314      	adds	r3, #20
 8011b86:	3114      	adds	r1, #20
 8011b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b98:	4295      	cmp	r5, r2
 8011b9a:	d003      	beq.n	8011ba4 <__mcmp+0x2c>
 8011b9c:	d205      	bcs.n	8011baa <__mcmp+0x32>
 8011b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba2:	bd30      	pop	{r4, r5, pc}
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	d3f3      	bcc.n	8011b90 <__mcmp+0x18>
 8011ba8:	e7fb      	b.n	8011ba2 <__mcmp+0x2a>
 8011baa:	2001      	movs	r0, #1
 8011bac:	e7f9      	b.n	8011ba2 <__mcmp+0x2a>
	...

08011bb0 <__mdiff>:
 8011bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4689      	mov	r9, r1
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	4611      	mov	r1, r2
 8011bba:	4648      	mov	r0, r9
 8011bbc:	4614      	mov	r4, r2
 8011bbe:	f7ff ffdb 	bl	8011b78 <__mcmp>
 8011bc2:	1e05      	subs	r5, r0, #0
 8011bc4:	d112      	bne.n	8011bec <__mdiff+0x3c>
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f7ff fd63 	bl	8011694 <_Balloc>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	b928      	cbnz	r0, 8011bde <__mdiff+0x2e>
 8011bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8011cd0 <__mdiff+0x120>)
 8011bd4:	f240 2137 	movw	r1, #567	@ 0x237
 8011bd8:	483e      	ldr	r0, [pc, #248]	@ (8011cd4 <__mdiff+0x124>)
 8011bda:	f000 fcaf 	bl	801253c <__assert_func>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011be4:	4610      	mov	r0, r2
 8011be6:	b003      	add	sp, #12
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	bfbc      	itt	lt
 8011bee:	464b      	movlt	r3, r9
 8011bf0:	46a1      	movlt	r9, r4
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011bf8:	bfba      	itte	lt
 8011bfa:	461c      	movlt	r4, r3
 8011bfc:	2501      	movlt	r5, #1
 8011bfe:	2500      	movge	r5, #0
 8011c00:	f7ff fd48 	bl	8011694 <_Balloc>
 8011c04:	4602      	mov	r2, r0
 8011c06:	b918      	cbnz	r0, 8011c10 <__mdiff+0x60>
 8011c08:	4b31      	ldr	r3, [pc, #196]	@ (8011cd0 <__mdiff+0x120>)
 8011c0a:	f240 2145 	movw	r1, #581	@ 0x245
 8011c0e:	e7e3      	b.n	8011bd8 <__mdiff+0x28>
 8011c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c14:	6926      	ldr	r6, [r4, #16]
 8011c16:	60c5      	str	r5, [r0, #12]
 8011c18:	f109 0310 	add.w	r3, r9, #16
 8011c1c:	f109 0514 	add.w	r5, r9, #20
 8011c20:	f104 0e14 	add.w	lr, r4, #20
 8011c24:	f100 0b14 	add.w	fp, r0, #20
 8011c28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011c2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c30:	9301      	str	r3, [sp, #4]
 8011c32:	46d9      	mov	r9, fp
 8011c34:	f04f 0c00 	mov.w	ip, #0
 8011c38:	9b01      	ldr	r3, [sp, #4]
 8011c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c42:	9301      	str	r3, [sp, #4]
 8011c44:	fa1f f38a 	uxth.w	r3, sl
 8011c48:	4619      	mov	r1, r3
 8011c4a:	b283      	uxth	r3, r0
 8011c4c:	1acb      	subs	r3, r1, r3
 8011c4e:	0c00      	lsrs	r0, r0, #16
 8011c50:	4463      	add	r3, ip
 8011c52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c60:	4576      	cmp	r6, lr
 8011c62:	f849 3b04 	str.w	r3, [r9], #4
 8011c66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c6a:	d8e5      	bhi.n	8011c38 <__mdiff+0x88>
 8011c6c:	1b33      	subs	r3, r6, r4
 8011c6e:	3b15      	subs	r3, #21
 8011c70:	f023 0303 	bic.w	r3, r3, #3
 8011c74:	3415      	adds	r4, #21
 8011c76:	3304      	adds	r3, #4
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	bf38      	it	cc
 8011c7c:	2304      	movcc	r3, #4
 8011c7e:	441d      	add	r5, r3
 8011c80:	445b      	add	r3, fp
 8011c82:	461e      	mov	r6, r3
 8011c84:	462c      	mov	r4, r5
 8011c86:	4544      	cmp	r4, r8
 8011c88:	d30e      	bcc.n	8011ca8 <__mdiff+0xf8>
 8011c8a:	f108 0103 	add.w	r1, r8, #3
 8011c8e:	1b49      	subs	r1, r1, r5
 8011c90:	f021 0103 	bic.w	r1, r1, #3
 8011c94:	3d03      	subs	r5, #3
 8011c96:	45a8      	cmp	r8, r5
 8011c98:	bf38      	it	cc
 8011c9a:	2100      	movcc	r1, #0
 8011c9c:	440b      	add	r3, r1
 8011c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ca2:	b191      	cbz	r1, 8011cca <__mdiff+0x11a>
 8011ca4:	6117      	str	r7, [r2, #16]
 8011ca6:	e79d      	b.n	8011be4 <__mdiff+0x34>
 8011ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011cac:	46e6      	mov	lr, ip
 8011cae:	0c08      	lsrs	r0, r1, #16
 8011cb0:	fa1c fc81 	uxtah	ip, ip, r1
 8011cb4:	4471      	add	r1, lr
 8011cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011cba:	b289      	uxth	r1, r1
 8011cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011cc0:	f846 1b04 	str.w	r1, [r6], #4
 8011cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011cc8:	e7dd      	b.n	8011c86 <__mdiff+0xd6>
 8011cca:	3f01      	subs	r7, #1
 8011ccc:	e7e7      	b.n	8011c9e <__mdiff+0xee>
 8011cce:	bf00      	nop
 8011cd0:	080154a4 	.word	0x080154a4
 8011cd4:	080154b5 	.word	0x080154b5

08011cd8 <__d2b>:
 8011cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cdc:	460f      	mov	r7, r1
 8011cde:	2101      	movs	r1, #1
 8011ce0:	ec59 8b10 	vmov	r8, r9, d0
 8011ce4:	4616      	mov	r6, r2
 8011ce6:	f7ff fcd5 	bl	8011694 <_Balloc>
 8011cea:	4604      	mov	r4, r0
 8011cec:	b930      	cbnz	r0, 8011cfc <__d2b+0x24>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	4b23      	ldr	r3, [pc, #140]	@ (8011d80 <__d2b+0xa8>)
 8011cf2:	4824      	ldr	r0, [pc, #144]	@ (8011d84 <__d2b+0xac>)
 8011cf4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cf8:	f000 fc20 	bl	801253c <__assert_func>
 8011cfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d04:	b10d      	cbz	r5, 8011d0a <__d2b+0x32>
 8011d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d0a:	9301      	str	r3, [sp, #4]
 8011d0c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d10:	d023      	beq.n	8011d5a <__d2b+0x82>
 8011d12:	4668      	mov	r0, sp
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	f7ff fd84 	bl	8011822 <__lo0bits>
 8011d1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d1e:	b1d0      	cbz	r0, 8011d56 <__d2b+0x7e>
 8011d20:	f1c0 0320 	rsb	r3, r0, #32
 8011d24:	fa02 f303 	lsl.w	r3, r2, r3
 8011d28:	430b      	orrs	r3, r1
 8011d2a:	40c2      	lsrs	r2, r0
 8011d2c:	6163      	str	r3, [r4, #20]
 8011d2e:	9201      	str	r2, [sp, #4]
 8011d30:	9b01      	ldr	r3, [sp, #4]
 8011d32:	61a3      	str	r3, [r4, #24]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bf0c      	ite	eq
 8011d38:	2201      	moveq	r2, #1
 8011d3a:	2202      	movne	r2, #2
 8011d3c:	6122      	str	r2, [r4, #16]
 8011d3e:	b1a5      	cbz	r5, 8011d6a <__d2b+0x92>
 8011d40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d44:	4405      	add	r5, r0
 8011d46:	603d      	str	r5, [r7, #0]
 8011d48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d4c:	6030      	str	r0, [r6, #0]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	b003      	add	sp, #12
 8011d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d56:	6161      	str	r1, [r4, #20]
 8011d58:	e7ea      	b.n	8011d30 <__d2b+0x58>
 8011d5a:	a801      	add	r0, sp, #4
 8011d5c:	f7ff fd61 	bl	8011822 <__lo0bits>
 8011d60:	9b01      	ldr	r3, [sp, #4]
 8011d62:	6163      	str	r3, [r4, #20]
 8011d64:	3020      	adds	r0, #32
 8011d66:	2201      	movs	r2, #1
 8011d68:	e7e8      	b.n	8011d3c <__d2b+0x64>
 8011d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d72:	6038      	str	r0, [r7, #0]
 8011d74:	6918      	ldr	r0, [r3, #16]
 8011d76:	f7ff fd35 	bl	80117e4 <__hi0bits>
 8011d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d7e:	e7e5      	b.n	8011d4c <__d2b+0x74>
 8011d80:	080154a4 	.word	0x080154a4
 8011d84:	080154b5 	.word	0x080154b5

08011d88 <__ssputs_r>:
 8011d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d8c:	688e      	ldr	r6, [r1, #8]
 8011d8e:	461f      	mov	r7, r3
 8011d90:	42be      	cmp	r6, r7
 8011d92:	680b      	ldr	r3, [r1, #0]
 8011d94:	4682      	mov	sl, r0
 8011d96:	460c      	mov	r4, r1
 8011d98:	4690      	mov	r8, r2
 8011d9a:	d82d      	bhi.n	8011df8 <__ssputs_r+0x70>
 8011d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011da4:	d026      	beq.n	8011df4 <__ssputs_r+0x6c>
 8011da6:	6965      	ldr	r5, [r4, #20]
 8011da8:	6909      	ldr	r1, [r1, #16]
 8011daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dae:	eba3 0901 	sub.w	r9, r3, r1
 8011db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011db6:	1c7b      	adds	r3, r7, #1
 8011db8:	444b      	add	r3, r9
 8011dba:	106d      	asrs	r5, r5, #1
 8011dbc:	429d      	cmp	r5, r3
 8011dbe:	bf38      	it	cc
 8011dc0:	461d      	movcc	r5, r3
 8011dc2:	0553      	lsls	r3, r2, #21
 8011dc4:	d527      	bpl.n	8011e16 <__ssputs_r+0x8e>
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	f7fd fdc2 	bl	800f950 <_malloc_r>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	b360      	cbz	r0, 8011e2a <__ssputs_r+0xa2>
 8011dd0:	6921      	ldr	r1, [r4, #16]
 8011dd2:	464a      	mov	r2, r9
 8011dd4:	f7fe fdab 	bl	801092e <memcpy>
 8011dd8:	89a3      	ldrh	r3, [r4, #12]
 8011dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011de2:	81a3      	strh	r3, [r4, #12]
 8011de4:	6126      	str	r6, [r4, #16]
 8011de6:	6165      	str	r5, [r4, #20]
 8011de8:	444e      	add	r6, r9
 8011dea:	eba5 0509 	sub.w	r5, r5, r9
 8011dee:	6026      	str	r6, [r4, #0]
 8011df0:	60a5      	str	r5, [r4, #8]
 8011df2:	463e      	mov	r6, r7
 8011df4:	42be      	cmp	r6, r7
 8011df6:	d900      	bls.n	8011dfa <__ssputs_r+0x72>
 8011df8:	463e      	mov	r6, r7
 8011dfa:	6820      	ldr	r0, [r4, #0]
 8011dfc:	4632      	mov	r2, r6
 8011dfe:	4641      	mov	r1, r8
 8011e00:	f7fe fc34 	bl	801066c <memmove>
 8011e04:	68a3      	ldr	r3, [r4, #8]
 8011e06:	1b9b      	subs	r3, r3, r6
 8011e08:	60a3      	str	r3, [r4, #8]
 8011e0a:	6823      	ldr	r3, [r4, #0]
 8011e0c:	4433      	add	r3, r6
 8011e0e:	6023      	str	r3, [r4, #0]
 8011e10:	2000      	movs	r0, #0
 8011e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e16:	462a      	mov	r2, r5
 8011e18:	f000 fbd4 	bl	80125c4 <_realloc_r>
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d1e0      	bne.n	8011de4 <__ssputs_r+0x5c>
 8011e22:	6921      	ldr	r1, [r4, #16]
 8011e24:	4650      	mov	r0, sl
 8011e26:	f7ff fbeb 	bl	8011600 <_free_r>
 8011e2a:	230c      	movs	r3, #12
 8011e2c:	f8ca 3000 	str.w	r3, [sl]
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	f04f 30ff 	mov.w	r0, #4294967295
 8011e3c:	e7e9      	b.n	8011e12 <__ssputs_r+0x8a>
	...

08011e40 <_svfiprintf_r>:
 8011e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	4698      	mov	r8, r3
 8011e46:	898b      	ldrh	r3, [r1, #12]
 8011e48:	061b      	lsls	r3, r3, #24
 8011e4a:	b09d      	sub	sp, #116	@ 0x74
 8011e4c:	4607      	mov	r7, r0
 8011e4e:	460d      	mov	r5, r1
 8011e50:	4614      	mov	r4, r2
 8011e52:	d510      	bpl.n	8011e76 <_svfiprintf_r+0x36>
 8011e54:	690b      	ldr	r3, [r1, #16]
 8011e56:	b973      	cbnz	r3, 8011e76 <_svfiprintf_r+0x36>
 8011e58:	2140      	movs	r1, #64	@ 0x40
 8011e5a:	f7fd fd79 	bl	800f950 <_malloc_r>
 8011e5e:	6028      	str	r0, [r5, #0]
 8011e60:	6128      	str	r0, [r5, #16]
 8011e62:	b930      	cbnz	r0, 8011e72 <_svfiprintf_r+0x32>
 8011e64:	230c      	movs	r3, #12
 8011e66:	603b      	str	r3, [r7, #0]
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295
 8011e6c:	b01d      	add	sp, #116	@ 0x74
 8011e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e72:	2340      	movs	r3, #64	@ 0x40
 8011e74:	616b      	str	r3, [r5, #20]
 8011e76:	2300      	movs	r3, #0
 8011e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e7a:	2320      	movs	r3, #32
 8011e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e84:	2330      	movs	r3, #48	@ 0x30
 8011e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012024 <_svfiprintf_r+0x1e4>
 8011e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e8e:	f04f 0901 	mov.w	r9, #1
 8011e92:	4623      	mov	r3, r4
 8011e94:	469a      	mov	sl, r3
 8011e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e9a:	b10a      	cbz	r2, 8011ea0 <_svfiprintf_r+0x60>
 8011e9c:	2a25      	cmp	r2, #37	@ 0x25
 8011e9e:	d1f9      	bne.n	8011e94 <_svfiprintf_r+0x54>
 8011ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ea4:	d00b      	beq.n	8011ebe <_svfiprintf_r+0x7e>
 8011ea6:	465b      	mov	r3, fp
 8011ea8:	4622      	mov	r2, r4
 8011eaa:	4629      	mov	r1, r5
 8011eac:	4638      	mov	r0, r7
 8011eae:	f7ff ff6b 	bl	8011d88 <__ssputs_r>
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	f000 80a7 	beq.w	8012006 <_svfiprintf_r+0x1c6>
 8011eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011eba:	445a      	add	r2, fp
 8011ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f000 809f 	beq.w	8012006 <_svfiprintf_r+0x1c6>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ed2:	f10a 0a01 	add.w	sl, sl, #1
 8011ed6:	9304      	str	r3, [sp, #16]
 8011ed8:	9307      	str	r3, [sp, #28]
 8011eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ee0:	4654      	mov	r4, sl
 8011ee2:	2205      	movs	r2, #5
 8011ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ee8:	484e      	ldr	r0, [pc, #312]	@ (8012024 <_svfiprintf_r+0x1e4>)
 8011eea:	f7ee f9a1 	bl	8000230 <memchr>
 8011eee:	9a04      	ldr	r2, [sp, #16]
 8011ef0:	b9d8      	cbnz	r0, 8011f2a <_svfiprintf_r+0xea>
 8011ef2:	06d0      	lsls	r0, r2, #27
 8011ef4:	bf44      	itt	mi
 8011ef6:	2320      	movmi	r3, #32
 8011ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011efc:	0711      	lsls	r1, r2, #28
 8011efe:	bf44      	itt	mi
 8011f00:	232b      	movmi	r3, #43	@ 0x2b
 8011f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f06:	f89a 3000 	ldrb.w	r3, [sl]
 8011f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f0c:	d015      	beq.n	8011f3a <_svfiprintf_r+0xfa>
 8011f0e:	9a07      	ldr	r2, [sp, #28]
 8011f10:	4654      	mov	r4, sl
 8011f12:	2000      	movs	r0, #0
 8011f14:	f04f 0c0a 	mov.w	ip, #10
 8011f18:	4621      	mov	r1, r4
 8011f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f1e:	3b30      	subs	r3, #48	@ 0x30
 8011f20:	2b09      	cmp	r3, #9
 8011f22:	d94b      	bls.n	8011fbc <_svfiprintf_r+0x17c>
 8011f24:	b1b0      	cbz	r0, 8011f54 <_svfiprintf_r+0x114>
 8011f26:	9207      	str	r2, [sp, #28]
 8011f28:	e014      	b.n	8011f54 <_svfiprintf_r+0x114>
 8011f2a:	eba0 0308 	sub.w	r3, r0, r8
 8011f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f32:	4313      	orrs	r3, r2
 8011f34:	9304      	str	r3, [sp, #16]
 8011f36:	46a2      	mov	sl, r4
 8011f38:	e7d2      	b.n	8011ee0 <_svfiprintf_r+0xa0>
 8011f3a:	9b03      	ldr	r3, [sp, #12]
 8011f3c:	1d19      	adds	r1, r3, #4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	9103      	str	r1, [sp, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	bfbb      	ittet	lt
 8011f46:	425b      	neglt	r3, r3
 8011f48:	f042 0202 	orrlt.w	r2, r2, #2
 8011f4c:	9307      	strge	r3, [sp, #28]
 8011f4e:	9307      	strlt	r3, [sp, #28]
 8011f50:	bfb8      	it	lt
 8011f52:	9204      	strlt	r2, [sp, #16]
 8011f54:	7823      	ldrb	r3, [r4, #0]
 8011f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f58:	d10a      	bne.n	8011f70 <_svfiprintf_r+0x130>
 8011f5a:	7863      	ldrb	r3, [r4, #1]
 8011f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f5e:	d132      	bne.n	8011fc6 <_svfiprintf_r+0x186>
 8011f60:	9b03      	ldr	r3, [sp, #12]
 8011f62:	1d1a      	adds	r2, r3, #4
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	9203      	str	r2, [sp, #12]
 8011f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f6c:	3402      	adds	r4, #2
 8011f6e:	9305      	str	r3, [sp, #20]
 8011f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012034 <_svfiprintf_r+0x1f4>
 8011f74:	7821      	ldrb	r1, [r4, #0]
 8011f76:	2203      	movs	r2, #3
 8011f78:	4650      	mov	r0, sl
 8011f7a:	f7ee f959 	bl	8000230 <memchr>
 8011f7e:	b138      	cbz	r0, 8011f90 <_svfiprintf_r+0x150>
 8011f80:	9b04      	ldr	r3, [sp, #16]
 8011f82:	eba0 000a 	sub.w	r0, r0, sl
 8011f86:	2240      	movs	r2, #64	@ 0x40
 8011f88:	4082      	lsls	r2, r0
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	3401      	adds	r4, #1
 8011f8e:	9304      	str	r3, [sp, #16]
 8011f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f94:	4824      	ldr	r0, [pc, #144]	@ (8012028 <_svfiprintf_r+0x1e8>)
 8011f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f9a:	2206      	movs	r2, #6
 8011f9c:	f7ee f948 	bl	8000230 <memchr>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d036      	beq.n	8012012 <_svfiprintf_r+0x1d2>
 8011fa4:	4b21      	ldr	r3, [pc, #132]	@ (801202c <_svfiprintf_r+0x1ec>)
 8011fa6:	bb1b      	cbnz	r3, 8011ff0 <_svfiprintf_r+0x1b0>
 8011fa8:	9b03      	ldr	r3, [sp, #12]
 8011faa:	3307      	adds	r3, #7
 8011fac:	f023 0307 	bic.w	r3, r3, #7
 8011fb0:	3308      	adds	r3, #8
 8011fb2:	9303      	str	r3, [sp, #12]
 8011fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fb6:	4433      	add	r3, r6
 8011fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fba:	e76a      	b.n	8011e92 <_svfiprintf_r+0x52>
 8011fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fc0:	460c      	mov	r4, r1
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	e7a8      	b.n	8011f18 <_svfiprintf_r+0xd8>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	3401      	adds	r4, #1
 8011fca:	9305      	str	r3, [sp, #20]
 8011fcc:	4619      	mov	r1, r3
 8011fce:	f04f 0c0a 	mov.w	ip, #10
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fd8:	3a30      	subs	r2, #48	@ 0x30
 8011fda:	2a09      	cmp	r2, #9
 8011fdc:	d903      	bls.n	8011fe6 <_svfiprintf_r+0x1a6>
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d0c6      	beq.n	8011f70 <_svfiprintf_r+0x130>
 8011fe2:	9105      	str	r1, [sp, #20]
 8011fe4:	e7c4      	b.n	8011f70 <_svfiprintf_r+0x130>
 8011fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fea:	4604      	mov	r4, r0
 8011fec:	2301      	movs	r3, #1
 8011fee:	e7f0      	b.n	8011fd2 <_svfiprintf_r+0x192>
 8011ff0:	ab03      	add	r3, sp, #12
 8011ff2:	9300      	str	r3, [sp, #0]
 8011ff4:	462a      	mov	r2, r5
 8011ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8012030 <_svfiprintf_r+0x1f0>)
 8011ff8:	a904      	add	r1, sp, #16
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	f7fd fdd4 	bl	800fba8 <_printf_float>
 8012000:	1c42      	adds	r2, r0, #1
 8012002:	4606      	mov	r6, r0
 8012004:	d1d6      	bne.n	8011fb4 <_svfiprintf_r+0x174>
 8012006:	89ab      	ldrh	r3, [r5, #12]
 8012008:	065b      	lsls	r3, r3, #25
 801200a:	f53f af2d 	bmi.w	8011e68 <_svfiprintf_r+0x28>
 801200e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012010:	e72c      	b.n	8011e6c <_svfiprintf_r+0x2c>
 8012012:	ab03      	add	r3, sp, #12
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	462a      	mov	r2, r5
 8012018:	4b05      	ldr	r3, [pc, #20]	@ (8012030 <_svfiprintf_r+0x1f0>)
 801201a:	a904      	add	r1, sp, #16
 801201c:	4638      	mov	r0, r7
 801201e:	f7fe f85b 	bl	80100d8 <_printf_i>
 8012022:	e7ed      	b.n	8012000 <_svfiprintf_r+0x1c0>
 8012024:	0801550e 	.word	0x0801550e
 8012028:	08015518 	.word	0x08015518
 801202c:	0800fba9 	.word	0x0800fba9
 8012030:	08011d89 	.word	0x08011d89
 8012034:	08015514 	.word	0x08015514

08012038 <__sfputc_r>:
 8012038:	6893      	ldr	r3, [r2, #8]
 801203a:	3b01      	subs	r3, #1
 801203c:	2b00      	cmp	r3, #0
 801203e:	b410      	push	{r4}
 8012040:	6093      	str	r3, [r2, #8]
 8012042:	da08      	bge.n	8012056 <__sfputc_r+0x1e>
 8012044:	6994      	ldr	r4, [r2, #24]
 8012046:	42a3      	cmp	r3, r4
 8012048:	db01      	blt.n	801204e <__sfputc_r+0x16>
 801204a:	290a      	cmp	r1, #10
 801204c:	d103      	bne.n	8012056 <__sfputc_r+0x1e>
 801204e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012052:	f000 b9df 	b.w	8012414 <__swbuf_r>
 8012056:	6813      	ldr	r3, [r2, #0]
 8012058:	1c58      	adds	r0, r3, #1
 801205a:	6010      	str	r0, [r2, #0]
 801205c:	7019      	strb	r1, [r3, #0]
 801205e:	4608      	mov	r0, r1
 8012060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012064:	4770      	bx	lr

08012066 <__sfputs_r>:
 8012066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012068:	4606      	mov	r6, r0
 801206a:	460f      	mov	r7, r1
 801206c:	4614      	mov	r4, r2
 801206e:	18d5      	adds	r5, r2, r3
 8012070:	42ac      	cmp	r4, r5
 8012072:	d101      	bne.n	8012078 <__sfputs_r+0x12>
 8012074:	2000      	movs	r0, #0
 8012076:	e007      	b.n	8012088 <__sfputs_r+0x22>
 8012078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801207c:	463a      	mov	r2, r7
 801207e:	4630      	mov	r0, r6
 8012080:	f7ff ffda 	bl	8012038 <__sfputc_r>
 8012084:	1c43      	adds	r3, r0, #1
 8012086:	d1f3      	bne.n	8012070 <__sfputs_r+0xa>
 8012088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801208c <_vfiprintf_r>:
 801208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012090:	460d      	mov	r5, r1
 8012092:	b09d      	sub	sp, #116	@ 0x74
 8012094:	4614      	mov	r4, r2
 8012096:	4698      	mov	r8, r3
 8012098:	4606      	mov	r6, r0
 801209a:	b118      	cbz	r0, 80120a4 <_vfiprintf_r+0x18>
 801209c:	6a03      	ldr	r3, [r0, #32]
 801209e:	b90b      	cbnz	r3, 80120a4 <_vfiprintf_r+0x18>
 80120a0:	f7fe f9c4 	bl	801042c <__sinit>
 80120a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120a6:	07d9      	lsls	r1, r3, #31
 80120a8:	d405      	bmi.n	80120b6 <_vfiprintf_r+0x2a>
 80120aa:	89ab      	ldrh	r3, [r5, #12]
 80120ac:	059a      	lsls	r2, r3, #22
 80120ae:	d402      	bmi.n	80120b6 <_vfiprintf_r+0x2a>
 80120b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120b2:	f7fe fc3a 	bl	801092a <__retarget_lock_acquire_recursive>
 80120b6:	89ab      	ldrh	r3, [r5, #12]
 80120b8:	071b      	lsls	r3, r3, #28
 80120ba:	d501      	bpl.n	80120c0 <_vfiprintf_r+0x34>
 80120bc:	692b      	ldr	r3, [r5, #16]
 80120be:	b99b      	cbnz	r3, 80120e8 <_vfiprintf_r+0x5c>
 80120c0:	4629      	mov	r1, r5
 80120c2:	4630      	mov	r0, r6
 80120c4:	f000 f9e4 	bl	8012490 <__swsetup_r>
 80120c8:	b170      	cbz	r0, 80120e8 <_vfiprintf_r+0x5c>
 80120ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120cc:	07dc      	lsls	r4, r3, #31
 80120ce:	d504      	bpl.n	80120da <_vfiprintf_r+0x4e>
 80120d0:	f04f 30ff 	mov.w	r0, #4294967295
 80120d4:	b01d      	add	sp, #116	@ 0x74
 80120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120da:	89ab      	ldrh	r3, [r5, #12]
 80120dc:	0598      	lsls	r0, r3, #22
 80120de:	d4f7      	bmi.n	80120d0 <_vfiprintf_r+0x44>
 80120e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120e2:	f7fe fc23 	bl	801092c <__retarget_lock_release_recursive>
 80120e6:	e7f3      	b.n	80120d0 <_vfiprintf_r+0x44>
 80120e8:	2300      	movs	r3, #0
 80120ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ec:	2320      	movs	r3, #32
 80120ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80120f6:	2330      	movs	r3, #48	@ 0x30
 80120f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122a8 <_vfiprintf_r+0x21c>
 80120fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012100:	f04f 0901 	mov.w	r9, #1
 8012104:	4623      	mov	r3, r4
 8012106:	469a      	mov	sl, r3
 8012108:	f813 2b01 	ldrb.w	r2, [r3], #1
 801210c:	b10a      	cbz	r2, 8012112 <_vfiprintf_r+0x86>
 801210e:	2a25      	cmp	r2, #37	@ 0x25
 8012110:	d1f9      	bne.n	8012106 <_vfiprintf_r+0x7a>
 8012112:	ebba 0b04 	subs.w	fp, sl, r4
 8012116:	d00b      	beq.n	8012130 <_vfiprintf_r+0xa4>
 8012118:	465b      	mov	r3, fp
 801211a:	4622      	mov	r2, r4
 801211c:	4629      	mov	r1, r5
 801211e:	4630      	mov	r0, r6
 8012120:	f7ff ffa1 	bl	8012066 <__sfputs_r>
 8012124:	3001      	adds	r0, #1
 8012126:	f000 80a7 	beq.w	8012278 <_vfiprintf_r+0x1ec>
 801212a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801212c:	445a      	add	r2, fp
 801212e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012130:	f89a 3000 	ldrb.w	r3, [sl]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 809f 	beq.w	8012278 <_vfiprintf_r+0x1ec>
 801213a:	2300      	movs	r3, #0
 801213c:	f04f 32ff 	mov.w	r2, #4294967295
 8012140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012144:	f10a 0a01 	add.w	sl, sl, #1
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012150:	931a      	str	r3, [sp, #104]	@ 0x68
 8012152:	4654      	mov	r4, sl
 8012154:	2205      	movs	r2, #5
 8012156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801215a:	4853      	ldr	r0, [pc, #332]	@ (80122a8 <_vfiprintf_r+0x21c>)
 801215c:	f7ee f868 	bl	8000230 <memchr>
 8012160:	9a04      	ldr	r2, [sp, #16]
 8012162:	b9d8      	cbnz	r0, 801219c <_vfiprintf_r+0x110>
 8012164:	06d1      	lsls	r1, r2, #27
 8012166:	bf44      	itt	mi
 8012168:	2320      	movmi	r3, #32
 801216a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801216e:	0713      	lsls	r3, r2, #28
 8012170:	bf44      	itt	mi
 8012172:	232b      	movmi	r3, #43	@ 0x2b
 8012174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012178:	f89a 3000 	ldrb.w	r3, [sl]
 801217c:	2b2a      	cmp	r3, #42	@ 0x2a
 801217e:	d015      	beq.n	80121ac <_vfiprintf_r+0x120>
 8012180:	9a07      	ldr	r2, [sp, #28]
 8012182:	4654      	mov	r4, sl
 8012184:	2000      	movs	r0, #0
 8012186:	f04f 0c0a 	mov.w	ip, #10
 801218a:	4621      	mov	r1, r4
 801218c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012190:	3b30      	subs	r3, #48	@ 0x30
 8012192:	2b09      	cmp	r3, #9
 8012194:	d94b      	bls.n	801222e <_vfiprintf_r+0x1a2>
 8012196:	b1b0      	cbz	r0, 80121c6 <_vfiprintf_r+0x13a>
 8012198:	9207      	str	r2, [sp, #28]
 801219a:	e014      	b.n	80121c6 <_vfiprintf_r+0x13a>
 801219c:	eba0 0308 	sub.w	r3, r0, r8
 80121a0:	fa09 f303 	lsl.w	r3, r9, r3
 80121a4:	4313      	orrs	r3, r2
 80121a6:	9304      	str	r3, [sp, #16]
 80121a8:	46a2      	mov	sl, r4
 80121aa:	e7d2      	b.n	8012152 <_vfiprintf_r+0xc6>
 80121ac:	9b03      	ldr	r3, [sp, #12]
 80121ae:	1d19      	adds	r1, r3, #4
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	9103      	str	r1, [sp, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	bfbb      	ittet	lt
 80121b8:	425b      	neglt	r3, r3
 80121ba:	f042 0202 	orrlt.w	r2, r2, #2
 80121be:	9307      	strge	r3, [sp, #28]
 80121c0:	9307      	strlt	r3, [sp, #28]
 80121c2:	bfb8      	it	lt
 80121c4:	9204      	strlt	r2, [sp, #16]
 80121c6:	7823      	ldrb	r3, [r4, #0]
 80121c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80121ca:	d10a      	bne.n	80121e2 <_vfiprintf_r+0x156>
 80121cc:	7863      	ldrb	r3, [r4, #1]
 80121ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80121d0:	d132      	bne.n	8012238 <_vfiprintf_r+0x1ac>
 80121d2:	9b03      	ldr	r3, [sp, #12]
 80121d4:	1d1a      	adds	r2, r3, #4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	9203      	str	r2, [sp, #12]
 80121da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121de:	3402      	adds	r4, #2
 80121e0:	9305      	str	r3, [sp, #20]
 80121e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122b8 <_vfiprintf_r+0x22c>
 80121e6:	7821      	ldrb	r1, [r4, #0]
 80121e8:	2203      	movs	r2, #3
 80121ea:	4650      	mov	r0, sl
 80121ec:	f7ee f820 	bl	8000230 <memchr>
 80121f0:	b138      	cbz	r0, 8012202 <_vfiprintf_r+0x176>
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	eba0 000a 	sub.w	r0, r0, sl
 80121f8:	2240      	movs	r2, #64	@ 0x40
 80121fa:	4082      	lsls	r2, r0
 80121fc:	4313      	orrs	r3, r2
 80121fe:	3401      	adds	r4, #1
 8012200:	9304      	str	r3, [sp, #16]
 8012202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012206:	4829      	ldr	r0, [pc, #164]	@ (80122ac <_vfiprintf_r+0x220>)
 8012208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801220c:	2206      	movs	r2, #6
 801220e:	f7ee f80f 	bl	8000230 <memchr>
 8012212:	2800      	cmp	r0, #0
 8012214:	d03f      	beq.n	8012296 <_vfiprintf_r+0x20a>
 8012216:	4b26      	ldr	r3, [pc, #152]	@ (80122b0 <_vfiprintf_r+0x224>)
 8012218:	bb1b      	cbnz	r3, 8012262 <_vfiprintf_r+0x1d6>
 801221a:	9b03      	ldr	r3, [sp, #12]
 801221c:	3307      	adds	r3, #7
 801221e:	f023 0307 	bic.w	r3, r3, #7
 8012222:	3308      	adds	r3, #8
 8012224:	9303      	str	r3, [sp, #12]
 8012226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012228:	443b      	add	r3, r7
 801222a:	9309      	str	r3, [sp, #36]	@ 0x24
 801222c:	e76a      	b.n	8012104 <_vfiprintf_r+0x78>
 801222e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012232:	460c      	mov	r4, r1
 8012234:	2001      	movs	r0, #1
 8012236:	e7a8      	b.n	801218a <_vfiprintf_r+0xfe>
 8012238:	2300      	movs	r3, #0
 801223a:	3401      	adds	r4, #1
 801223c:	9305      	str	r3, [sp, #20]
 801223e:	4619      	mov	r1, r3
 8012240:	f04f 0c0a 	mov.w	ip, #10
 8012244:	4620      	mov	r0, r4
 8012246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801224a:	3a30      	subs	r2, #48	@ 0x30
 801224c:	2a09      	cmp	r2, #9
 801224e:	d903      	bls.n	8012258 <_vfiprintf_r+0x1cc>
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0c6      	beq.n	80121e2 <_vfiprintf_r+0x156>
 8012254:	9105      	str	r1, [sp, #20]
 8012256:	e7c4      	b.n	80121e2 <_vfiprintf_r+0x156>
 8012258:	fb0c 2101 	mla	r1, ip, r1, r2
 801225c:	4604      	mov	r4, r0
 801225e:	2301      	movs	r3, #1
 8012260:	e7f0      	b.n	8012244 <_vfiprintf_r+0x1b8>
 8012262:	ab03      	add	r3, sp, #12
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	462a      	mov	r2, r5
 8012268:	4b12      	ldr	r3, [pc, #72]	@ (80122b4 <_vfiprintf_r+0x228>)
 801226a:	a904      	add	r1, sp, #16
 801226c:	4630      	mov	r0, r6
 801226e:	f7fd fc9b 	bl	800fba8 <_printf_float>
 8012272:	4607      	mov	r7, r0
 8012274:	1c78      	adds	r0, r7, #1
 8012276:	d1d6      	bne.n	8012226 <_vfiprintf_r+0x19a>
 8012278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801227a:	07d9      	lsls	r1, r3, #31
 801227c:	d405      	bmi.n	801228a <_vfiprintf_r+0x1fe>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	059a      	lsls	r2, r3, #22
 8012282:	d402      	bmi.n	801228a <_vfiprintf_r+0x1fe>
 8012284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012286:	f7fe fb51 	bl	801092c <__retarget_lock_release_recursive>
 801228a:	89ab      	ldrh	r3, [r5, #12]
 801228c:	065b      	lsls	r3, r3, #25
 801228e:	f53f af1f 	bmi.w	80120d0 <_vfiprintf_r+0x44>
 8012292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012294:	e71e      	b.n	80120d4 <_vfiprintf_r+0x48>
 8012296:	ab03      	add	r3, sp, #12
 8012298:	9300      	str	r3, [sp, #0]
 801229a:	462a      	mov	r2, r5
 801229c:	4b05      	ldr	r3, [pc, #20]	@ (80122b4 <_vfiprintf_r+0x228>)
 801229e:	a904      	add	r1, sp, #16
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7fd ff19 	bl	80100d8 <_printf_i>
 80122a6:	e7e4      	b.n	8012272 <_vfiprintf_r+0x1e6>
 80122a8:	0801550e 	.word	0x0801550e
 80122ac:	08015518 	.word	0x08015518
 80122b0:	0800fba9 	.word	0x0800fba9
 80122b4:	08012067 	.word	0x08012067
 80122b8:	08015514 	.word	0x08015514

080122bc <__sflush_r>:
 80122bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c4:	0716      	lsls	r6, r2, #28
 80122c6:	4605      	mov	r5, r0
 80122c8:	460c      	mov	r4, r1
 80122ca:	d454      	bmi.n	8012376 <__sflush_r+0xba>
 80122cc:	684b      	ldr	r3, [r1, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	dc02      	bgt.n	80122d8 <__sflush_r+0x1c>
 80122d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	dd48      	ble.n	801236a <__sflush_r+0xae>
 80122d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122da:	2e00      	cmp	r6, #0
 80122dc:	d045      	beq.n	801236a <__sflush_r+0xae>
 80122de:	2300      	movs	r3, #0
 80122e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80122e4:	682f      	ldr	r7, [r5, #0]
 80122e6:	6a21      	ldr	r1, [r4, #32]
 80122e8:	602b      	str	r3, [r5, #0]
 80122ea:	d030      	beq.n	801234e <__sflush_r+0x92>
 80122ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122ee:	89a3      	ldrh	r3, [r4, #12]
 80122f0:	0759      	lsls	r1, r3, #29
 80122f2:	d505      	bpl.n	8012300 <__sflush_r+0x44>
 80122f4:	6863      	ldr	r3, [r4, #4]
 80122f6:	1ad2      	subs	r2, r2, r3
 80122f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122fa:	b10b      	cbz	r3, 8012300 <__sflush_r+0x44>
 80122fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122fe:	1ad2      	subs	r2, r2, r3
 8012300:	2300      	movs	r3, #0
 8012302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012304:	6a21      	ldr	r1, [r4, #32]
 8012306:	4628      	mov	r0, r5
 8012308:	47b0      	blx	r6
 801230a:	1c43      	adds	r3, r0, #1
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	d106      	bne.n	801231e <__sflush_r+0x62>
 8012310:	6829      	ldr	r1, [r5, #0]
 8012312:	291d      	cmp	r1, #29
 8012314:	d82b      	bhi.n	801236e <__sflush_r+0xb2>
 8012316:	4a2a      	ldr	r2, [pc, #168]	@ (80123c0 <__sflush_r+0x104>)
 8012318:	40ca      	lsrs	r2, r1
 801231a:	07d6      	lsls	r6, r2, #31
 801231c:	d527      	bpl.n	801236e <__sflush_r+0xb2>
 801231e:	2200      	movs	r2, #0
 8012320:	6062      	str	r2, [r4, #4]
 8012322:	04d9      	lsls	r1, r3, #19
 8012324:	6922      	ldr	r2, [r4, #16]
 8012326:	6022      	str	r2, [r4, #0]
 8012328:	d504      	bpl.n	8012334 <__sflush_r+0x78>
 801232a:	1c42      	adds	r2, r0, #1
 801232c:	d101      	bne.n	8012332 <__sflush_r+0x76>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	b903      	cbnz	r3, 8012334 <__sflush_r+0x78>
 8012332:	6560      	str	r0, [r4, #84]	@ 0x54
 8012334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012336:	602f      	str	r7, [r5, #0]
 8012338:	b1b9      	cbz	r1, 801236a <__sflush_r+0xae>
 801233a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801233e:	4299      	cmp	r1, r3
 8012340:	d002      	beq.n	8012348 <__sflush_r+0x8c>
 8012342:	4628      	mov	r0, r5
 8012344:	f7ff f95c 	bl	8011600 <_free_r>
 8012348:	2300      	movs	r3, #0
 801234a:	6363      	str	r3, [r4, #52]	@ 0x34
 801234c:	e00d      	b.n	801236a <__sflush_r+0xae>
 801234e:	2301      	movs	r3, #1
 8012350:	4628      	mov	r0, r5
 8012352:	47b0      	blx	r6
 8012354:	4602      	mov	r2, r0
 8012356:	1c50      	adds	r0, r2, #1
 8012358:	d1c9      	bne.n	80122ee <__sflush_r+0x32>
 801235a:	682b      	ldr	r3, [r5, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d0c6      	beq.n	80122ee <__sflush_r+0x32>
 8012360:	2b1d      	cmp	r3, #29
 8012362:	d001      	beq.n	8012368 <__sflush_r+0xac>
 8012364:	2b16      	cmp	r3, #22
 8012366:	d11e      	bne.n	80123a6 <__sflush_r+0xea>
 8012368:	602f      	str	r7, [r5, #0]
 801236a:	2000      	movs	r0, #0
 801236c:	e022      	b.n	80123b4 <__sflush_r+0xf8>
 801236e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012372:	b21b      	sxth	r3, r3
 8012374:	e01b      	b.n	80123ae <__sflush_r+0xf2>
 8012376:	690f      	ldr	r7, [r1, #16]
 8012378:	2f00      	cmp	r7, #0
 801237a:	d0f6      	beq.n	801236a <__sflush_r+0xae>
 801237c:	0793      	lsls	r3, r2, #30
 801237e:	680e      	ldr	r6, [r1, #0]
 8012380:	bf08      	it	eq
 8012382:	694b      	ldreq	r3, [r1, #20]
 8012384:	600f      	str	r7, [r1, #0]
 8012386:	bf18      	it	ne
 8012388:	2300      	movne	r3, #0
 801238a:	eba6 0807 	sub.w	r8, r6, r7
 801238e:	608b      	str	r3, [r1, #8]
 8012390:	f1b8 0f00 	cmp.w	r8, #0
 8012394:	dde9      	ble.n	801236a <__sflush_r+0xae>
 8012396:	6a21      	ldr	r1, [r4, #32]
 8012398:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801239a:	4643      	mov	r3, r8
 801239c:	463a      	mov	r2, r7
 801239e:	4628      	mov	r0, r5
 80123a0:	47b0      	blx	r6
 80123a2:	2800      	cmp	r0, #0
 80123a4:	dc08      	bgt.n	80123b8 <__sflush_r+0xfc>
 80123a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ae:	81a3      	strh	r3, [r4, #12]
 80123b0:	f04f 30ff 	mov.w	r0, #4294967295
 80123b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b8:	4407      	add	r7, r0
 80123ba:	eba8 0800 	sub.w	r8, r8, r0
 80123be:	e7e7      	b.n	8012390 <__sflush_r+0xd4>
 80123c0:	20400001 	.word	0x20400001

080123c4 <_fflush_r>:
 80123c4:	b538      	push	{r3, r4, r5, lr}
 80123c6:	690b      	ldr	r3, [r1, #16]
 80123c8:	4605      	mov	r5, r0
 80123ca:	460c      	mov	r4, r1
 80123cc:	b913      	cbnz	r3, 80123d4 <_fflush_r+0x10>
 80123ce:	2500      	movs	r5, #0
 80123d0:	4628      	mov	r0, r5
 80123d2:	bd38      	pop	{r3, r4, r5, pc}
 80123d4:	b118      	cbz	r0, 80123de <_fflush_r+0x1a>
 80123d6:	6a03      	ldr	r3, [r0, #32]
 80123d8:	b90b      	cbnz	r3, 80123de <_fflush_r+0x1a>
 80123da:	f7fe f827 	bl	801042c <__sinit>
 80123de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d0f3      	beq.n	80123ce <_fflush_r+0xa>
 80123e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123e8:	07d0      	lsls	r0, r2, #31
 80123ea:	d404      	bmi.n	80123f6 <_fflush_r+0x32>
 80123ec:	0599      	lsls	r1, r3, #22
 80123ee:	d402      	bmi.n	80123f6 <_fflush_r+0x32>
 80123f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123f2:	f7fe fa9a 	bl	801092a <__retarget_lock_acquire_recursive>
 80123f6:	4628      	mov	r0, r5
 80123f8:	4621      	mov	r1, r4
 80123fa:	f7ff ff5f 	bl	80122bc <__sflush_r>
 80123fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012400:	07da      	lsls	r2, r3, #31
 8012402:	4605      	mov	r5, r0
 8012404:	d4e4      	bmi.n	80123d0 <_fflush_r+0xc>
 8012406:	89a3      	ldrh	r3, [r4, #12]
 8012408:	059b      	lsls	r3, r3, #22
 801240a:	d4e1      	bmi.n	80123d0 <_fflush_r+0xc>
 801240c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801240e:	f7fe fa8d 	bl	801092c <__retarget_lock_release_recursive>
 8012412:	e7dd      	b.n	80123d0 <_fflush_r+0xc>

08012414 <__swbuf_r>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	460e      	mov	r6, r1
 8012418:	4614      	mov	r4, r2
 801241a:	4605      	mov	r5, r0
 801241c:	b118      	cbz	r0, 8012426 <__swbuf_r+0x12>
 801241e:	6a03      	ldr	r3, [r0, #32]
 8012420:	b90b      	cbnz	r3, 8012426 <__swbuf_r+0x12>
 8012422:	f7fe f803 	bl	801042c <__sinit>
 8012426:	69a3      	ldr	r3, [r4, #24]
 8012428:	60a3      	str	r3, [r4, #8]
 801242a:	89a3      	ldrh	r3, [r4, #12]
 801242c:	071a      	lsls	r2, r3, #28
 801242e:	d501      	bpl.n	8012434 <__swbuf_r+0x20>
 8012430:	6923      	ldr	r3, [r4, #16]
 8012432:	b943      	cbnz	r3, 8012446 <__swbuf_r+0x32>
 8012434:	4621      	mov	r1, r4
 8012436:	4628      	mov	r0, r5
 8012438:	f000 f82a 	bl	8012490 <__swsetup_r>
 801243c:	b118      	cbz	r0, 8012446 <__swbuf_r+0x32>
 801243e:	f04f 37ff 	mov.w	r7, #4294967295
 8012442:	4638      	mov	r0, r7
 8012444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	6922      	ldr	r2, [r4, #16]
 801244a:	1a98      	subs	r0, r3, r2
 801244c:	6963      	ldr	r3, [r4, #20]
 801244e:	b2f6      	uxtb	r6, r6
 8012450:	4283      	cmp	r3, r0
 8012452:	4637      	mov	r7, r6
 8012454:	dc05      	bgt.n	8012462 <__swbuf_r+0x4e>
 8012456:	4621      	mov	r1, r4
 8012458:	4628      	mov	r0, r5
 801245a:	f7ff ffb3 	bl	80123c4 <_fflush_r>
 801245e:	2800      	cmp	r0, #0
 8012460:	d1ed      	bne.n	801243e <__swbuf_r+0x2a>
 8012462:	68a3      	ldr	r3, [r4, #8]
 8012464:	3b01      	subs	r3, #1
 8012466:	60a3      	str	r3, [r4, #8]
 8012468:	6823      	ldr	r3, [r4, #0]
 801246a:	1c5a      	adds	r2, r3, #1
 801246c:	6022      	str	r2, [r4, #0]
 801246e:	701e      	strb	r6, [r3, #0]
 8012470:	6962      	ldr	r2, [r4, #20]
 8012472:	1c43      	adds	r3, r0, #1
 8012474:	429a      	cmp	r2, r3
 8012476:	d004      	beq.n	8012482 <__swbuf_r+0x6e>
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	07db      	lsls	r3, r3, #31
 801247c:	d5e1      	bpl.n	8012442 <__swbuf_r+0x2e>
 801247e:	2e0a      	cmp	r6, #10
 8012480:	d1df      	bne.n	8012442 <__swbuf_r+0x2e>
 8012482:	4621      	mov	r1, r4
 8012484:	4628      	mov	r0, r5
 8012486:	f7ff ff9d 	bl	80123c4 <_fflush_r>
 801248a:	2800      	cmp	r0, #0
 801248c:	d0d9      	beq.n	8012442 <__swbuf_r+0x2e>
 801248e:	e7d6      	b.n	801243e <__swbuf_r+0x2a>

08012490 <__swsetup_r>:
 8012490:	b538      	push	{r3, r4, r5, lr}
 8012492:	4b29      	ldr	r3, [pc, #164]	@ (8012538 <__swsetup_r+0xa8>)
 8012494:	4605      	mov	r5, r0
 8012496:	6818      	ldr	r0, [r3, #0]
 8012498:	460c      	mov	r4, r1
 801249a:	b118      	cbz	r0, 80124a4 <__swsetup_r+0x14>
 801249c:	6a03      	ldr	r3, [r0, #32]
 801249e:	b90b      	cbnz	r3, 80124a4 <__swsetup_r+0x14>
 80124a0:	f7fd ffc4 	bl	801042c <__sinit>
 80124a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a8:	0719      	lsls	r1, r3, #28
 80124aa:	d422      	bmi.n	80124f2 <__swsetup_r+0x62>
 80124ac:	06da      	lsls	r2, r3, #27
 80124ae:	d407      	bmi.n	80124c0 <__swsetup_r+0x30>
 80124b0:	2209      	movs	r2, #9
 80124b2:	602a      	str	r2, [r5, #0]
 80124b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	f04f 30ff 	mov.w	r0, #4294967295
 80124be:	e033      	b.n	8012528 <__swsetup_r+0x98>
 80124c0:	0758      	lsls	r0, r3, #29
 80124c2:	d512      	bpl.n	80124ea <__swsetup_r+0x5a>
 80124c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124c6:	b141      	cbz	r1, 80124da <__swsetup_r+0x4a>
 80124c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124cc:	4299      	cmp	r1, r3
 80124ce:	d002      	beq.n	80124d6 <__swsetup_r+0x46>
 80124d0:	4628      	mov	r0, r5
 80124d2:	f7ff f895 	bl	8011600 <_free_r>
 80124d6:	2300      	movs	r3, #0
 80124d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80124da:	89a3      	ldrh	r3, [r4, #12]
 80124dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80124e0:	81a3      	strh	r3, [r4, #12]
 80124e2:	2300      	movs	r3, #0
 80124e4:	6063      	str	r3, [r4, #4]
 80124e6:	6923      	ldr	r3, [r4, #16]
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	f043 0308 	orr.w	r3, r3, #8
 80124f0:	81a3      	strh	r3, [r4, #12]
 80124f2:	6923      	ldr	r3, [r4, #16]
 80124f4:	b94b      	cbnz	r3, 801250a <__swsetup_r+0x7a>
 80124f6:	89a3      	ldrh	r3, [r4, #12]
 80124f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80124fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012500:	d003      	beq.n	801250a <__swsetup_r+0x7a>
 8012502:	4621      	mov	r1, r4
 8012504:	4628      	mov	r0, r5
 8012506:	f000 f8d1 	bl	80126ac <__smakebuf_r>
 801250a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801250e:	f013 0201 	ands.w	r2, r3, #1
 8012512:	d00a      	beq.n	801252a <__swsetup_r+0x9a>
 8012514:	2200      	movs	r2, #0
 8012516:	60a2      	str	r2, [r4, #8]
 8012518:	6962      	ldr	r2, [r4, #20]
 801251a:	4252      	negs	r2, r2
 801251c:	61a2      	str	r2, [r4, #24]
 801251e:	6922      	ldr	r2, [r4, #16]
 8012520:	b942      	cbnz	r2, 8012534 <__swsetup_r+0xa4>
 8012522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012526:	d1c5      	bne.n	80124b4 <__swsetup_r+0x24>
 8012528:	bd38      	pop	{r3, r4, r5, pc}
 801252a:	0799      	lsls	r1, r3, #30
 801252c:	bf58      	it	pl
 801252e:	6962      	ldrpl	r2, [r4, #20]
 8012530:	60a2      	str	r2, [r4, #8]
 8012532:	e7f4      	b.n	801251e <__swsetup_r+0x8e>
 8012534:	2000      	movs	r0, #0
 8012536:	e7f7      	b.n	8012528 <__swsetup_r+0x98>
 8012538:	20000058 	.word	0x20000058

0801253c <__assert_func>:
 801253c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801253e:	4614      	mov	r4, r2
 8012540:	461a      	mov	r2, r3
 8012542:	4b09      	ldr	r3, [pc, #36]	@ (8012568 <__assert_func+0x2c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4605      	mov	r5, r0
 8012548:	68d8      	ldr	r0, [r3, #12]
 801254a:	b14c      	cbz	r4, 8012560 <__assert_func+0x24>
 801254c:	4b07      	ldr	r3, [pc, #28]	@ (801256c <__assert_func+0x30>)
 801254e:	9100      	str	r1, [sp, #0]
 8012550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012554:	4906      	ldr	r1, [pc, #24]	@ (8012570 <__assert_func+0x34>)
 8012556:	462b      	mov	r3, r5
 8012558:	f000 f870 	bl	801263c <fiprintf>
 801255c:	f7fd f9bf 	bl	800f8de <abort>
 8012560:	4b04      	ldr	r3, [pc, #16]	@ (8012574 <__assert_func+0x38>)
 8012562:	461c      	mov	r4, r3
 8012564:	e7f3      	b.n	801254e <__assert_func+0x12>
 8012566:	bf00      	nop
 8012568:	20000058 	.word	0x20000058
 801256c:	08015529 	.word	0x08015529
 8012570:	08015536 	.word	0x08015536
 8012574:	08015564 	.word	0x08015564

08012578 <_calloc_r>:
 8012578:	b570      	push	{r4, r5, r6, lr}
 801257a:	fba1 5402 	umull	r5, r4, r1, r2
 801257e:	b934      	cbnz	r4, 801258e <_calloc_r+0x16>
 8012580:	4629      	mov	r1, r5
 8012582:	f7fd f9e5 	bl	800f950 <_malloc_r>
 8012586:	4606      	mov	r6, r0
 8012588:	b928      	cbnz	r0, 8012596 <_calloc_r+0x1e>
 801258a:	4630      	mov	r0, r6
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	220c      	movs	r2, #12
 8012590:	6002      	str	r2, [r0, #0]
 8012592:	2600      	movs	r6, #0
 8012594:	e7f9      	b.n	801258a <_calloc_r+0x12>
 8012596:	462a      	mov	r2, r5
 8012598:	4621      	mov	r1, r4
 801259a:	f7fe f881 	bl	80106a0 <memset>
 801259e:	e7f4      	b.n	801258a <_calloc_r+0x12>

080125a0 <__ascii_mbtowc>:
 80125a0:	b082      	sub	sp, #8
 80125a2:	b901      	cbnz	r1, 80125a6 <__ascii_mbtowc+0x6>
 80125a4:	a901      	add	r1, sp, #4
 80125a6:	b142      	cbz	r2, 80125ba <__ascii_mbtowc+0x1a>
 80125a8:	b14b      	cbz	r3, 80125be <__ascii_mbtowc+0x1e>
 80125aa:	7813      	ldrb	r3, [r2, #0]
 80125ac:	600b      	str	r3, [r1, #0]
 80125ae:	7812      	ldrb	r2, [r2, #0]
 80125b0:	1e10      	subs	r0, r2, #0
 80125b2:	bf18      	it	ne
 80125b4:	2001      	movne	r0, #1
 80125b6:	b002      	add	sp, #8
 80125b8:	4770      	bx	lr
 80125ba:	4610      	mov	r0, r2
 80125bc:	e7fb      	b.n	80125b6 <__ascii_mbtowc+0x16>
 80125be:	f06f 0001 	mvn.w	r0, #1
 80125c2:	e7f8      	b.n	80125b6 <__ascii_mbtowc+0x16>

080125c4 <_realloc_r>:
 80125c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4607      	mov	r7, r0
 80125ca:	4614      	mov	r4, r2
 80125cc:	460d      	mov	r5, r1
 80125ce:	b921      	cbnz	r1, 80125da <_realloc_r+0x16>
 80125d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d4:	4611      	mov	r1, r2
 80125d6:	f7fd b9bb 	b.w	800f950 <_malloc_r>
 80125da:	b92a      	cbnz	r2, 80125e8 <_realloc_r+0x24>
 80125dc:	f7ff f810 	bl	8011600 <_free_r>
 80125e0:	4625      	mov	r5, r4
 80125e2:	4628      	mov	r0, r5
 80125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125e8:	f000 f8be 	bl	8012768 <_malloc_usable_size_r>
 80125ec:	4284      	cmp	r4, r0
 80125ee:	4606      	mov	r6, r0
 80125f0:	d802      	bhi.n	80125f8 <_realloc_r+0x34>
 80125f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125f6:	d8f4      	bhi.n	80125e2 <_realloc_r+0x1e>
 80125f8:	4621      	mov	r1, r4
 80125fa:	4638      	mov	r0, r7
 80125fc:	f7fd f9a8 	bl	800f950 <_malloc_r>
 8012600:	4680      	mov	r8, r0
 8012602:	b908      	cbnz	r0, 8012608 <_realloc_r+0x44>
 8012604:	4645      	mov	r5, r8
 8012606:	e7ec      	b.n	80125e2 <_realloc_r+0x1e>
 8012608:	42b4      	cmp	r4, r6
 801260a:	4622      	mov	r2, r4
 801260c:	4629      	mov	r1, r5
 801260e:	bf28      	it	cs
 8012610:	4632      	movcs	r2, r6
 8012612:	f7fe f98c 	bl	801092e <memcpy>
 8012616:	4629      	mov	r1, r5
 8012618:	4638      	mov	r0, r7
 801261a:	f7fe fff1 	bl	8011600 <_free_r>
 801261e:	e7f1      	b.n	8012604 <_realloc_r+0x40>

08012620 <__ascii_wctomb>:
 8012620:	4603      	mov	r3, r0
 8012622:	4608      	mov	r0, r1
 8012624:	b141      	cbz	r1, 8012638 <__ascii_wctomb+0x18>
 8012626:	2aff      	cmp	r2, #255	@ 0xff
 8012628:	d904      	bls.n	8012634 <__ascii_wctomb+0x14>
 801262a:	228a      	movs	r2, #138	@ 0x8a
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	f04f 30ff 	mov.w	r0, #4294967295
 8012632:	4770      	bx	lr
 8012634:	700a      	strb	r2, [r1, #0]
 8012636:	2001      	movs	r0, #1
 8012638:	4770      	bx	lr
	...

0801263c <fiprintf>:
 801263c:	b40e      	push	{r1, r2, r3}
 801263e:	b503      	push	{r0, r1, lr}
 8012640:	4601      	mov	r1, r0
 8012642:	ab03      	add	r3, sp, #12
 8012644:	4805      	ldr	r0, [pc, #20]	@ (801265c <fiprintf+0x20>)
 8012646:	f853 2b04 	ldr.w	r2, [r3], #4
 801264a:	6800      	ldr	r0, [r0, #0]
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	f7ff fd1d 	bl	801208c <_vfiprintf_r>
 8012652:	b002      	add	sp, #8
 8012654:	f85d eb04 	ldr.w	lr, [sp], #4
 8012658:	b003      	add	sp, #12
 801265a:	4770      	bx	lr
 801265c:	20000058 	.word	0x20000058

08012660 <__swhatbuf_r>:
 8012660:	b570      	push	{r4, r5, r6, lr}
 8012662:	460c      	mov	r4, r1
 8012664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012668:	2900      	cmp	r1, #0
 801266a:	b096      	sub	sp, #88	@ 0x58
 801266c:	4615      	mov	r5, r2
 801266e:	461e      	mov	r6, r3
 8012670:	da0d      	bge.n	801268e <__swhatbuf_r+0x2e>
 8012672:	89a3      	ldrh	r3, [r4, #12]
 8012674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012678:	f04f 0100 	mov.w	r1, #0
 801267c:	bf14      	ite	ne
 801267e:	2340      	movne	r3, #64	@ 0x40
 8012680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012684:	2000      	movs	r0, #0
 8012686:	6031      	str	r1, [r6, #0]
 8012688:	602b      	str	r3, [r5, #0]
 801268a:	b016      	add	sp, #88	@ 0x58
 801268c:	bd70      	pop	{r4, r5, r6, pc}
 801268e:	466a      	mov	r2, sp
 8012690:	f000 f848 	bl	8012724 <_fstat_r>
 8012694:	2800      	cmp	r0, #0
 8012696:	dbec      	blt.n	8012672 <__swhatbuf_r+0x12>
 8012698:	9901      	ldr	r1, [sp, #4]
 801269a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801269e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80126a2:	4259      	negs	r1, r3
 80126a4:	4159      	adcs	r1, r3
 80126a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126aa:	e7eb      	b.n	8012684 <__swhatbuf_r+0x24>

080126ac <__smakebuf_r>:
 80126ac:	898b      	ldrh	r3, [r1, #12]
 80126ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126b0:	079d      	lsls	r5, r3, #30
 80126b2:	4606      	mov	r6, r0
 80126b4:	460c      	mov	r4, r1
 80126b6:	d507      	bpl.n	80126c8 <__smakebuf_r+0x1c>
 80126b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126bc:	6023      	str	r3, [r4, #0]
 80126be:	6123      	str	r3, [r4, #16]
 80126c0:	2301      	movs	r3, #1
 80126c2:	6163      	str	r3, [r4, #20]
 80126c4:	b003      	add	sp, #12
 80126c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c8:	ab01      	add	r3, sp, #4
 80126ca:	466a      	mov	r2, sp
 80126cc:	f7ff ffc8 	bl	8012660 <__swhatbuf_r>
 80126d0:	9f00      	ldr	r7, [sp, #0]
 80126d2:	4605      	mov	r5, r0
 80126d4:	4639      	mov	r1, r7
 80126d6:	4630      	mov	r0, r6
 80126d8:	f7fd f93a 	bl	800f950 <_malloc_r>
 80126dc:	b948      	cbnz	r0, 80126f2 <__smakebuf_r+0x46>
 80126de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126e2:	059a      	lsls	r2, r3, #22
 80126e4:	d4ee      	bmi.n	80126c4 <__smakebuf_r+0x18>
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	f043 0302 	orr.w	r3, r3, #2
 80126ee:	81a3      	strh	r3, [r4, #12]
 80126f0:	e7e2      	b.n	80126b8 <__smakebuf_r+0xc>
 80126f2:	89a3      	ldrh	r3, [r4, #12]
 80126f4:	6020      	str	r0, [r4, #0]
 80126f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126fa:	81a3      	strh	r3, [r4, #12]
 80126fc:	9b01      	ldr	r3, [sp, #4]
 80126fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012702:	b15b      	cbz	r3, 801271c <__smakebuf_r+0x70>
 8012704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012708:	4630      	mov	r0, r6
 801270a:	f000 f81d 	bl	8012748 <_isatty_r>
 801270e:	b128      	cbz	r0, 801271c <__smakebuf_r+0x70>
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	f023 0303 	bic.w	r3, r3, #3
 8012716:	f043 0301 	orr.w	r3, r3, #1
 801271a:	81a3      	strh	r3, [r4, #12]
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	431d      	orrs	r5, r3
 8012720:	81a5      	strh	r5, [r4, #12]
 8012722:	e7cf      	b.n	80126c4 <__smakebuf_r+0x18>

08012724 <_fstat_r>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	4d07      	ldr	r5, [pc, #28]	@ (8012744 <_fstat_r+0x20>)
 8012728:	2300      	movs	r3, #0
 801272a:	4604      	mov	r4, r0
 801272c:	4608      	mov	r0, r1
 801272e:	4611      	mov	r1, r2
 8012730:	602b      	str	r3, [r5, #0]
 8012732:	f7f4 fc75 	bl	8007020 <_fstat>
 8012736:	1c43      	adds	r3, r0, #1
 8012738:	d102      	bne.n	8012740 <_fstat_r+0x1c>
 801273a:	682b      	ldr	r3, [r5, #0]
 801273c:	b103      	cbz	r3, 8012740 <_fstat_r+0x1c>
 801273e:	6023      	str	r3, [r4, #0]
 8012740:	bd38      	pop	{r3, r4, r5, pc}
 8012742:	bf00      	nop
 8012744:	20007180 	.word	0x20007180

08012748 <_isatty_r>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	4d06      	ldr	r5, [pc, #24]	@ (8012764 <_isatty_r+0x1c>)
 801274c:	2300      	movs	r3, #0
 801274e:	4604      	mov	r4, r0
 8012750:	4608      	mov	r0, r1
 8012752:	602b      	str	r3, [r5, #0]
 8012754:	f7f4 fc74 	bl	8007040 <_isatty>
 8012758:	1c43      	adds	r3, r0, #1
 801275a:	d102      	bne.n	8012762 <_isatty_r+0x1a>
 801275c:	682b      	ldr	r3, [r5, #0]
 801275e:	b103      	cbz	r3, 8012762 <_isatty_r+0x1a>
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	bd38      	pop	{r3, r4, r5, pc}
 8012764:	20007180 	.word	0x20007180

08012768 <_malloc_usable_size_r>:
 8012768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801276c:	1f18      	subs	r0, r3, #4
 801276e:	2b00      	cmp	r3, #0
 8012770:	bfbc      	itt	lt
 8012772:	580b      	ldrlt	r3, [r1, r0]
 8012774:	18c0      	addlt	r0, r0, r3
 8012776:	4770      	bx	lr

08012778 <_init>:
 8012778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277a:	bf00      	nop
 801277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801277e:	bc08      	pop	{r3}
 8012780:	469e      	mov	lr, r3
 8012782:	4770      	bx	lr

08012784 <_fini>:
 8012784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012786:	bf00      	nop
 8012788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801278a:	bc08      	pop	{r3}
 801278c:	469e      	mov	lr, r3
 801278e:	4770      	bx	lr
